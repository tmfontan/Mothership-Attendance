/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import java.awt.Component;
import java.awt.Point;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author tylerfontana
 */
public class AddStudentWindow extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public AddStudentWindow(int value, ClassType type) {
        tableViewType = value;
        classType = type;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel15 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Student To Class");
        setBackground(new java.awt.Color(153, 153, 153));
        setLocation(new java.awt.Point(450, 294));
        setName("WarningFrame"); // NOI18N
        setSize(new java.awt.Dimension(430, 204));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel15.setOpaque(false);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/AttendanceScreenLoader.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel15);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(430, 204));

        jPanel4.setOpaque(false);

        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Username");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        jButton4.setText("Go");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addGap(0, 238, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4)
                    .addContainerGap(7, Short.MAX_VALUE)))
        );

        jTextField1.setVisible(false);
        jButton4.setVisible(false);

        jPanel7.setOpaque(false);

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Enter the Student's Username Below:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(16, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel7.setVisible(false);

        jPanel13.setOpaque(false);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/returnButton25x25.png"))); // NOI18N
        jLabel5.setToolTipText("<html><center>Click this Button to<br></br>Return to the Previous Screen.</center></html>");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(376, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(18, 18, 18))
        );

        jLabel5.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(19, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(15, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(36, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(121, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(430, 204));

        jPanel8.setOpaque(false);

        jTextField2.setForeground(new java.awt.Color(153, 153, 153));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("Student ID");
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        jButton5.setText("Go");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addGap(0, 238, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5)
                    .addContainerGap(7, Short.MAX_VALUE)))
        );

        jTextField2.setVisible(false);
        jButton5.setVisible(false);

        jPanel11.setOpaque(false);

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Enter the Student's Identification Number Below:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(16, Short.MAX_VALUE)))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel8.setVisible(false);

        jPanel14.setOpaque(false);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/returnButton25x25.png"))); // NOI18N
        jLabel9.setToolTipText("<html><center>Click this Button to<br></br>Return to the Previous Screen.</center></html>");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(376, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(18, 18, 18))
        );

        jLabel9.setVisible(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(19, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(15, Short.MAX_VALUE)))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(36, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(121, Short.MAX_VALUE)))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel5);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(430, 204));

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("How Would you like to Add a Student?");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ------------------------", " Username", " Identification Number" }));

        jButton3.setText("Go");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel9.setOpaque(false);

        jButton2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jButton2.setText("Add Multiple Students");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(160, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(15, 15, 15))
        );

        jButton2.setVisible(false);

        getContentPane().add(jPanel9);

        jPanel12.setOpaque(false);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/returnButton25x25.png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(376, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18))
        );

        getContentPane().add(jPanel12);

        jPanel3.setPreferredSize(new java.awt.Dimension(430, 204));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/steelbackground428x202.png"))); // NOI18N
        jLabel3.setToolTipText("");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // If the Window Is Closing Due to the User
        // Exiting from it and not the Add Student Operation
        // Finishing.
        if (operationInvoked == false) {
            // Re-Enable Students In Class Table Components on Exit
            // From JFrame Form.
            ManageStudentsPanel.enableStudentsInClassTableComponents(true);
        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Get Reference to the Current MainScreen Instance
        main = classInstanceTracker.getMainScreenInstance();
        // Let the Window Know That An Operation
        // is Not Taking Place.
        operationInvoked = false;
        // Bring Popup Window Form to the 
        // Front of the Application.
        super.toFront();
        
        // Hide The Value Retrival Section
        setSearchValueIDComponentsVisible(false);
        // Hide The Value Retrival Section
        setSearchValueUsernameComponentsVisible(false);
        // Disable Add Multiple Students Button
        jButton2.setEnabled(false);
        // Hide Loading Symbol
        showLoadingSymbol(false);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        if (jTextField1.getText().equalsIgnoreCase("Username")) {
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
            jTextField1.setBackground(new java.awt.Color(255, 255, 255));
            jTextField1.setText("");
        }
        else {
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
            jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        if (jTextField1.getText().equalsIgnoreCase("")) {
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
            jTextField1.setText("Username");
        }
        else {
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained
        if (jTextField2.getText().equalsIgnoreCase("Student ID")) {
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
            jTextField2.setBackground(new java.awt.Color(255, 255, 255));
            jTextField2.setText("");
        }
        else {
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
            jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        }
    }//GEN-LAST:event_jTextField2FocusGained

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        if (jTextField2.getText().equalsIgnoreCase("")) {
            jTextField2.setForeground(new java.awt.Color(153, 153, 153));
            jTextField2.setText("Student ID");
        }
        else {
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        }
    }//GEN-LAST:event_jTextField2FocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedIndex = jComboBox1.getSelectedIndex();
        
        if (selectedIndex == 0) {
            WarningMessageManageStudentAccessSelectValidOption wmmsasvo = new WarningMessageManageStudentAccessSelectValidOption();
            wmmsasvo.setVisible(true);
        }
        else if (selectedIndex == 1) {
            setSearchTypeComponentsVisible(false);
            setSearchValueUsernameComponentsVisible(true);
        }
        else if (selectedIndex == 2) {
            setSearchTypeComponentsVisible(false);
            setSearchValueIDComponentsVisible(true);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        dispose();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jComboBox1.getSelectedIndex() == 1) {
            AddMultipleStudentsWindow multipleStudentsWindow = new AddMultipleStudentsWindow(0);
            
            multipleStudentsWindow.setStudentUsernameInsertionComponentsVisible(true);
            multipleStudentsWindow.setStudentIdentificationNumberInsertionComponentsVisible(false);
            
            multipleStudentsWindow.setVisible(true);
        }
        else if (jComboBox1.getSelectedIndex() == 2) {
            AddMultipleStudentsWindow multipleStudentsWindow = new AddMultipleStudentsWindow(1);
            
            multipleStudentsWindow.setStudentIdentificationNumberInsertionComponentsVisible(true);
            multipleStudentsWindow.setStudentUsernameInsertionComponentsVisible(false);
            
            multipleStudentsWindow.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // Hide the Add Student By Username Associated
        // Components
        setSearchValueUsernameComponentsVisible(false);
        // Set the Add Student By Type
        // JComboBox to its Default Index
        jComboBox1.setSelectedIndex(0);
        // Show the Search Type Associated
        // Components
        setSearchTypeComponentsVisible(true);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        // Hide the Add Student By ID Associated
        // Components
        setSearchValueIDComponentsVisible(false);
        // Set the Add Student By Type
        // JComboBox to its Default Index
        jComboBox1.setSelectedIndex(0);
        // Show the Search Type Associated
        // Components
        setSearchTypeComponentsVisible(true);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        jLabel3.requestFocusInWindow();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Check to see if the Field Contains the Default Value String
        // If So, Show an Error Message. If Not, Spawn A Thread that
        // Runs the Background Task of Finding / Adding the Student by Username.
        if (jTextField1.getText().equalsIgnoreCase("Username")) {
            System.out.println("Getting Here in Go Button 1");
            WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
            
            String formattedHtml = "<html><center>Please Enter a Valid Response within the Add Student By Username Response Field.</center></html>";
            warning.jLabel6.setText(formattedHtml);
            
            setSearchValueUsernameComponentsEnabled(false);
            warning.setVisible(true);
        }
        else {
            System.out.println("Getting Here in Go Button 2");
            TaskHandler handler = new TaskHandler(0);
            handler.execute();
            
            setSearchValueUsernameComponentsEnabled(false);
            showLoadingSymbol(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Check to see if the Field Contains the Default Value String
        // If So, Show an Error Message. If Not, Spawn A Thread that
        // Runs the Background Task of Finding / Adding the Student By ID.
        if (jTextField1.getText().equalsIgnoreCase("Student ID")) {
            WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
            
            String formattedHtml = "<html><center>Please Enter a Valid Response within the Add Student By ID Response Field.</center></html>";
            warning.jLabel6.setText(formattedHtml);
            
            setSearchValueIDComponentsEnabled(false);
            warning.setVisible(true);
        }
        else {
            
            String studentID = jTextField2.getText();
            boolean parseResult;
            
            try {
                conversion = Integer.parseInt(studentID);
                
                parseResult = true;
            }
            catch (NumberFormatException nfe) {
                parseResult = false;
            }
            
            if (parseResult == false) {
                WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
            
                String formattedHtml = "<html><center>The Response You've Entered in the Student ID Field isn't a Valid Number. Please Check Your Input and Try Again.</center></html>";
                
                warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/warningemblemscaled.png")));
                warning.jLabel6.setText(formattedHtml);

                setSearchValueIDComponentsEnabled(false);
                warning.setVisible(true);
            }
            else {
                TaskHandler handler = new TaskHandler(1);
                handler.execute();

                setSearchValueIDComponentsEnabled(false);
                showLoadingSymbol(true);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public static void showLoadingSymbol(boolean value) {
        jLabel10.setVisible(value);
    }
    
    public static void setSearchValueUsernameComponentsEnabled(boolean value) {
        // Set Title Enablement
        jLabel7.setEnabled(value);
        
        // Set Student Username Text Field Enablement
        jTextField1.setEnabled(value);
        
        // Set Go Button Enablement
        jButton4.setEnabled(value);
        
        // Set Add Multiple Students Button Enablement
        //jButton2.setEnabled(value);
        
        // Set Return to Previous Screen Button Enablement
        jLabel5.setEnabled(value);
    }
    
    public static void setSearchValueIDComponentsEnabled(boolean value) {
        // Set Title Enablement
        jLabel8.setEnabled(value);
        
        // Set Student ID Text Field Enablement
        jTextField2.setEnabled(value);
        
        // Set Go Button Enablement
        jButton5.setEnabled(value);
        
        // Set Add Multiple Students Button Enablement
        //jButton2.setEnabled(value);
        
        // Set Return to Previous Screen Button Enablement
        jLabel9.setEnabled(value);
    }
    
    public void setSearchValueUsernameComponentsVisible(boolean value) {
        // Set Title Visibility
        jLabel7.setVisible(value);
        
        // Set Student Username Text Field Visibility
        jTextField1.setVisible(value);
        
        // Set Go Button Visibility
        jButton4.setVisible(value);
        
        // Set Add Multiple Students Button Visibility
        jButton2.setVisible(value);
        
        // Set Return to Previous Screen Button Visibility
        jLabel5.setVisible(value);
    }
    
    public void setSearchValueIDComponentsVisible(boolean value) {
        // Set Title Visibility
        jLabel8.setVisible(value);
        
        // Set Student ID Text Field Visibility
        jTextField2.setVisible(value);
        
        // Set Go Button Visibility
        jButton5.setVisible(value);
        
        // Set Add Multiple Students Button Visibility
        jButton2.setVisible(value);
        
        // Set Return to Previous Screen Button Visibility
        jLabel9.setVisible(value);
    }
    
    public void setSearchTypeComponentsVisible(boolean value) {
        // Set Title Visibility
        jLabel6.setVisible(value);
        
        // Set Text Field Visibility
        jComboBox1.setVisible(value);
        
        // Set Go Button Visibility
        jButton3.setVisible(value);
        
        // Set Return to Previous Screen Button Visibility
        jLabel4.setVisible(value);
    }
    
    public void createTableModel() {
        
        // Get a List of the Current Students within the Class
        ManageStudentsPanel.studentsInClassList = manager.getStudentsAssociatedWithClass(ManageStudentsPanel.selectedClassType.getClassID());
        // Reset Students in Class Table ArrayList.
        ManageStudentsPanel.rowDataListStudentsInClass = new ArrayList<CustomJTableObjectManageStudentsPanel>();

        // Execute if the Currently Selected Class Has No
        // Students within its Class Roster
        if (ManageStudentsPanel.studentsInClassList.isEmpty()) {

            // Create the New Table Model Using an Empty List
            ManageStudentsPanel.studentsInClassModel = new CustomJTableModelManagementTabStudents(ManageStudentsPanel.rowDataListStudentsInClass);
            // Set the Table to show A Blank Model which will
            // be automatically resized to fit the Container ScrollPane.
            ManageStudentsPanel.classListTable.setModel(ManageStudentsPanel.studentsInClassModel);

            // Disable Column Reordering so the User wont violate
            // or change the Table's Settings.
            ManageStudentsPanel.classListTable.getTableHeader().setReorderingAllowed(false);

            // Show that the Default Table Model is not currently in use.
            // This is done to Let the Program know when to show or hide
            // components upon click.
            ManageStudentsPanel.defaultTableModelInUseStudentsInClassList = false;

            // In this next section of code, we will create multiple Custom Cell
            // Renderer Objects. These Objects are responsible for changing the Overall
            // Appearance of the Cells (Such as Background and Vertical / Horizontal Data Alignment)
            // along with Changing things such as Data Font Type, Size, and Color. There are Two
            // Different Types of Cell Renderers. One for the Header or "Title" Cells of A Column
            // while the other is used to manipulate the contents of the Data Cells Contained
            // Underneath.

            // Create A Custom Cell Render which will be used on each of the
            // Data Cell Rows within the Table. This Renderer will set the Font
            // to the Regular "Lucida Grande" Font and Align the Contained text
            // within the Center of the Cell.
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     // Create Integer Variable that holds the Dimension Location
                     // of the Center of the Cell.
                     int align = DefaultTableCellRenderer.CENTER;
                     // Assign the Center Location to the Cells Data Positioning Method.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     // Assign a Font to the Data Contained Within the Cell.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 0, 13));
                     // Return the Custom Cell Renderer Object
                     // which will be assigned to all Data Cells
                     // within the Table.
                     return tableCellRendererComponent;
                }
            };

            // Create A Custom Column Header Renderer. This Will be used to both
            // Center and Change the Accompanying Font / Background of the Chosen
            // Column Title Cell. This Particular Renderer is responsible for Changing
            // the Column Cells Background Color to Black and its Font Color to White.
            // Additionally, it will set the Font to the Bold "Lucida Grande" Font and 
            // Horizontally Center the Column Title Within the Cell.
            DefaultTableCellRenderer headerRendererBlack = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     // Create Integer Variable that holds the Dimension Location
                     // of the Center of the Cell.
                     int align = DefaultTableCellRenderer.CENTER;
                     // Assign the Center Location to the Cells Data Positioning Method.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     // Set the Background Color of the Cell to Black.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(0, 0, 0));
                     // Set the Font Color of the Data Within the Cell to White
                     // in order to Contrast the Background.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                     // Assign a Font to the Data Contained Within the Cell.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                     // Return the Custom Cell Renderer Object
                     // which Can be Assigned to a Header Column Cell.
                     return tableCellRendererComponent;
                }
            };

            // Create A Custom Column Header Renderer. This Will be used to both
            // Center and Change the Accompanying Font / Background of the Chosen
            // Column Title Cell. This Particular Renderer is responsible for Changing
            // the Column Cells Background Color to Royal Blue and its Font Color to White.
            // Additionally, it will set the Font to the Bold "Lucida Grande" Font and 
            // Horizontally Center the Column Title Within the Cell.
            DefaultTableCellRenderer headerRendererRoyalBlue = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     // Create Integer Variable that holds the Dimension Location
                     // of the Center of the Cell.
                     int align = DefaultTableCellRenderer.CENTER;
                     // Assign the Center Location to the Cells Data Positioning Method.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     // Set the Background Color of the Cell to Royal Blue.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(51, 153, 255));
                     // Set the Font Color of the Data Within the Cell to White
                     // in order to Contrast the Background.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                     // Assign a Font to the Data Contained Within the Cell.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                     // Return the Custom Cell Renderer Object
                     // which Can be Assigned to a Header Column Cell.
                     return tableCellRendererComponent;
                }
            };

            // Set the Height of Each Row within the Table
            // to 100 Pixels. This is done so that the Contained Data
            // is more Seperated and thus easier to Read.
            ManageStudentsPanel.classListTable.setRowHeight(100);

            // Assign the Data Cell Renderer created earlier to Columns (1 - 6) Within
            // the Table. Seeing as the First Column will contain the Student's Associated
            // Profile Image, we will not assign a Cell Renderer to the Column. Should we
            // Assign the cell Renderer to Column 0, a filepath to the Student's Profile Picture
            // will be shown instead of the Actual Desired Image.

            // Assign Data Cell Render to Column 1 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 2 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(2).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 3 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(3).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 4 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(4).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 5 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(5).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 6 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(6).setCellRenderer(renderer);

            // Assign the Custom Cell Header Renderer Objects to each of the Columns Within
            // the Table. We will Alternate in Assigning the Black and Royal Blue HeaderRenderer Objects
            // by one cell each. This is done to make the Table more Aesthetically Pleasing in
            // addition to helping with Overall Data Readability.

            // Assign the Custom Black Header Render Object to Column 0 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(0).setHeaderRenderer(headerRendererBlack);
            // Assign the Custom Royal Blue Header Render Object to Column 1 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(1).setHeaderRenderer(headerRendererRoyalBlue);
            // Assign the Custom Black Header Render Object to Column 2 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(2).setHeaderRenderer(headerRendererBlack);
            // Assign the Custom Royal Blue Header Render Object to Column 3 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(3).setHeaderRenderer(headerRendererRoyalBlue);
            // Assign the Custom Black Header Render Object to Column 4 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(4).setHeaderRenderer(headerRendererBlack);
            // Assign the Custom Royal Blue Header Render Object to Column 5 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(5).setHeaderRenderer(headerRendererRoyalBlue);
            // Assign the Custom Black Header Render Object to Column 6 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(6).setHeaderRenderer(headerRendererBlack);

            // Seeing as we are using an Empty ArrayList to Form this Table, the
            // Width of all the Column Header Cells Combined won't be long enough to fill
            // the entirety of the ScrollPane holding our JTable. Thus, we Assign the 
            // AUTO_RESIZE_ALL_COLUMNS Integer to the JTable setAutoResizeMode() method.
            // This will Automatically Resize All of the Columns withing the Table to
            // Fill the Length of the ScrollPane. This is done for Aesthetic Improvement
            // to the Program.
            ManageStudentsPanel.classListTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

            // Hide the Loading Icon in MainScreen Management Tab
            // seeing as we have now retrieved the Student Data and
            // used it to Create our Table.
            main.jLabel62.setVisible(false);

            // Hide the Table View Type Selection Components
            // From the Users View.
            ManageStudentsPanel.setTableTypeSelectionComponentsVisible(false);
            // Ensure that the Remove Student From Class
            // Button is not visible once the Table is shown.
            // This Button should only appear when the Instructor
            // clicks upon a Student within the Students in Class
            // Table.
            ManageStudentsPanel.setRemoveStudentFromClassButtonVisible(false);
            // Seeing as we now have our Table Completely made
            // and the Loading Icon has been hidden. Renable the
            // Table View Type Selection Components.
            ManageStudentsPanel.enableTableTypeSelectionComponents(true);

            // Create an HTML Formatted Text String for the Title
            // JLabel Located Above the Students in Class Table.
            String formattedHtmlClassTitle = "<html><center><font color=#0093ff>" + ManageStudentsPanel.selectedClassType.getClassTitle() + "</font> (<font color=#ff0000>Students In Class</font>):</center></html>";
            // Make the JLabel Show  the Title of the Currently
            // Selected Class in a Royal Blue Color.
            ManageStudentsPanel.jLabel1.setText(formattedHtmlClassTitle);

            // Show the Students in Class Table and its Accompanying
            // Components Seeing as the Table's Model has been Set
            // and everything else has finished.
            ManageStudentsPanel.setClassStudentListComponentsVisible(true);
        }
        // Execute if the Currently Selected Class Already
        // has Students Present within its Roster.
        else {

            // The CustomJTableModelManagementTabStudents JTable Object Requires
            // An ArrayList or List Object to be Passed in as its Parameter. However
            // This List Object must in turn contain Custom Objects which will be
            // Automatically used to Display the Data Within the Table. Thus, in this
            // for loop, we convert the Student ArrayList retrived from the Remote
            // Database into a new ArrayList of CustomJTableObjectManageStudentsPanel Objects,
            // each of which contains a variable holding the desired Data Type that corresponds
            // to the Column Locations Within the Table.
            for (int i = 0; i < ManageStudentsPanel.studentsInClassList.size(); i++) {

                // Get the Student's Small Profile Image FilePath String. This will be used in
                // an ImageIcon conversion momentarily.
                String image = "" + ManageStudentsPanel.studentsInClassList.get(i).getStudentProfileImageSmall();
                // Retrieve the Student's Display Name which is a Combination of thier
                // First and Last Names.
                String name = "  " + ManageStudentsPanel.studentsInClassList.get(i).getStudentDisplayName() + "  ";
                // Retrieve the Student's Associated Username for thier Account.
                String username = "  " + ManageStudentsPanel.studentsInClassList.get(i).getStudentUsername() + "  ";
                // Retrieve the Student's Email Address 
                // associated with thier Account.
                String email = "";
                // Retrieve the Student's Phone Number 
                // associated with thier Account.
                String phone = "";
                // Retrieve the Student's Physical Address 
                // associated with thier Account.
                String address = "";

                // If the Student's Email Address Field is Empty, set the JTable Display
                // Value to N/A (Not Available). This will also be serpated by two spaces on
                // both sides in order to distance the width between column information in the
                // Table. This is done to improve Application Aestheics and Table Readability.
                if (ManageStudentsPanel.studentsInClassList.get(i).getStudentEmail().equalsIgnoreCase("")) {
                    // Assign the Not Available Value
                    // to the String.
                    email = "  N/A  ";
                }
                else {
                    // If the Email Address Field is not empty, assign the actual value
                    // once again seperated on both sides by two spaces.
                    email = "  " + ManageStudentsPanel.studentsInClassList.get(i).getStudentEmail() + "  ";
                }

                // If the Student's Phone Number Field is Empty, set the JTable Display
                // Value to N/A (Not Available). This will also be serpated by two spaces on
                // both sides in order to distance the width between column information in the
                // Table. This is done to improve Application Aestheics and Table Readability.
                if (ManageStudentsPanel.studentsInClassList.get(i).getStudentPhone().equalsIgnoreCase("") || ManageStudentsPanel.studentsInClassList.get(i).getStudentPhone().equalsIgnoreCase("Default")) {
                    // Assign the Not Available Value
                    // to the String.
                    phone = "  N/A  ";
                }
                else {
                    // If the Phone Number Field is not empty, assign the actual value
                    // once again seperated on both sides by two spaces.
                    phone = "  " + ManageStudentsPanel.studentsInClassList.get(i).getStudentPhone() + "  ";
                }

                // If the Student's Physical Address Field is Empty, set the JTable Display
                // Value to No Address Available. This will also be serpated by two spaces on
                // both sides in order to distance the width between column information in the
                // Table. This is done to improve Application Aestheics and Table Readability.
                if (ManageStudentsPanel.studentsInClassList.get(i).getStudentAddress().equalsIgnoreCase("")) {
                    // Assign the No Address Available Value
                    // to the String.
                    address = "  No Address Available  ";
                }
                else {
                    // If the Physical Address Field is not empty, assign the actual value
                    // once again seperated on both sides by two spaces.
                    address = "  " + ManageStudentsPanel.studentsInClassList.get(i).getStudentAddress() + "  ";
                }

                // Use the previously calculated Values to Form A New CustomJTableObjectManageStudentsPanel
                // and add it to the rowDataListStudentsInClass ArrayList which will be used later to create
                // Student's In Class JTable Object.
                ManageStudentsPanel.rowDataListStudentsInClass.add(new CustomJTableObjectManageStudentsPanel(new javax.swing.ImageIcon(getClass().getResource(image)), name, ManageStudentsPanel.studentsInClassList.get(i).getStudentIdentificationNumber(), username, email, phone, address));
            }

            // Once the Loop has finished Executing, Use the new rowDataListStudentsInClass ArrayList
            // to create the Student's In Class Table Model.
            ManageStudentsPanel.studentsInClassModel = new CustomJTableModelManagementTabStudents(ManageStudentsPanel.rowDataListStudentsInClass);
            // Set this new model to our classListTable JTable's
            // custom model field.
            ManageStudentsPanel.classListTable.setModel(ManageStudentsPanel.studentsInClassModel);

            // Disable Table Column Reordering. This is done to prevent
            // the user from Accidently altering or violating the Table's
            // set Properties.
            ManageStudentsPanel.classListTable.getTableHeader().setReorderingAllowed(false);

            // Seeing as we are using a Custom Model for our Student's In
            // Class JTable, we will set the Default Table Model Boolean
            // Value to Zero. This is done to let other event Queue Threads
            // know when to Show / Hide or Enable / Disable other Components.
            ManageStudentsPanel.defaultTableModelInUseStudentsInClassList = false;


            // In this next section of code, we will create multiple Custom Cell
            // Renderer Objects. These Objects are responsible for changing the Overall
            // Appearance of the Cells (Such as Background and Vertical / Horizontal Data Alignment)
            // along with Changing things such as Data Font Type, Size, and Color. There are Two
            // Different Types of Cell Renderers. One for the Header or "Title" Cells of A Column
            // while the other is used to manipulate the contents of the Data Cells Contained
            // Underneath.

            // Create A Custom Cell Render which will be used on each of the
            // Data Cell Rows within the Table. This Renderer will set the Font
            // to the Regular "Lucida Grande" Font and Align the Contained text
            // within the Center of the Cell.
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     // Create Integer Variable that holds the Dimension Location
                     // of the Center of the Cell.
                     int align = DefaultTableCellRenderer.CENTER;
                     // Assign the Center Location to the Cells Data Positioning Method.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     // Assign a Font to the Data Contained Within the Cell.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 0, 13));
                     // Return the Custom Cell Renderer Object
                     // which Can be Assigned to a Data Cell.
                     return tableCellRendererComponent;
                }
            };

            // Create A Custom Column Header Renderer. This Will be used to both
            // Center and Change the Accompanying Font / Background of the Chosen
            // Column Title Cell. This Particular Renderer is responsible for Changing
            // the Column Cells Background Color to Black and its Font Color to White.
            // Additionally, it will set the Font to the Bold "Lucida Grande" Font and 
            // Horizontally Center the Column Title Within the Cell.
            DefaultTableCellRenderer headerRendererBlack = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     // Create Integer Variable that holds the Dimension Location
                     // of the Center of the Cell.
                     int align = DefaultTableCellRenderer.CENTER;
                     // Assign the Center Location to the Cells Data Positioning Method.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     // Set the Background Color of the Cell to Black.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(0, 0, 0));
                     // Set the Font Color of the Data Within the Cell to White
                     // in order to Contrast the Background.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                     // Assign a Font to the Data Contained Within the Cell.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                     // Return the Custom Cell Renderer Object
                     // which Can be Assigned to a Header Column Cell.
                     return tableCellRendererComponent;
                }
            };

            // Create A Custom Column Header Renderer. This Will be used to both
            // Center and Change the Accompanying Font / Background of the Chosen
            // Column Title Cell. This Particular Renderer is responsible for Changing
            // the Column Cells Background Color to Royal Blue and its Font Color to White.
            // Additionally, it will set the Font to the Bold "Lucida Grande" Font and 
            // Horizontally Center the Column Title Within the Cell.
            DefaultTableCellRenderer headerRendererRoyalBlue = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     // Create Integer Variable that holds the Dimension Location
                     // of the Center of the Cell.
                     int align = DefaultTableCellRenderer.CENTER;
                     // Assign the Center Location to the Cells Data Positioning Method.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     // Set the Background Color of the Cell to Royal Blue.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(51, 153, 255));
                     // Set the Font Color of the Data Within the Cell to White
                     // in order to Contrast the Background.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                     // Assign a Font to the Data Contained Within the Cell.
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                     // Return the Custom Cell Renderer Object
                     // which Can be Assigned to a Header Column Cell.
                     return tableCellRendererComponent;
                }
            };

            // Set the Height of Each Row within the Table
            // to 100 Pixels. This is done so that the Contained Data
            // is more Seperated and thus easier to Read.
            ManageStudentsPanel.classListTable.setRowHeight(100);

            // Assign the Data Cell Renderer created earlier to Columns (1 - 6) Within
            // the Table. Seeing as the First Column will contain the Student's Associated
            // Profile Image, we will not assign a Cell Renderer to the Column. Should we
            // Assign the cell Renderer to Column 0, a filepath to the Student's Profile Picture
            // will be shown instead of the Actual Desired Image.

            // Assign Data Cell Render to Column 1 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 2 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(2).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 3 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(3).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 4 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(4).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 5 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(5).setCellRenderer(renderer);
            // Assign Data Cell Render to Column 6 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(6).setCellRenderer(renderer);

            // Assign the Custom Cell Header Renderer Objects to each of the Columns Within
            // the Table. We will Alternate in Assigning the Black and Royal Blue HeaderRenderer Objects
            // by one cell each. This is done to make the Table more Aesthetically Pleasing in
            // addition to helping with Overall Data Readability.

            // Assign the Custom Black Header Render Object to Column 0 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(0).setHeaderRenderer(headerRendererBlack);
            // Assign the Custom Royal Blue Header Render Object to Column 1 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(1).setHeaderRenderer(headerRendererRoyalBlue);
            // Assign the Custom Black Header Render Object to Column 2 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(2).setHeaderRenderer(headerRendererBlack);
            // Assign the Custom Royal Blue Header Render Object to Column 3 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(3).setHeaderRenderer(headerRendererRoyalBlue);
            // Assign the Custom Black Header Render Object to Column 4 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(4).setHeaderRenderer(headerRendererBlack);
            // Assign the Custom Royal Blue Header Render Object to Column 5 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(5).setHeaderRenderer(headerRendererRoyalBlue);
            // Assign the Custom Black Header Render Object to Column 6 Within the Table.
            ManageStudentsPanel.classListTable.getColumnModel().getColumn(6).setHeaderRenderer(headerRendererBlack);

            // Turn off Auto Resize Mode Within the Table. In the Next Step,
            // we will Calculate the Desired Width of Each Column by mesauring
            // the length of the longest piece of Data contained within all the
            // rows present in the Table. We turn the Auto Resize Mode off so that
            // the Data is all clearly show to the User.
            ManageStudentsPanel.classListTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            // Adjust Column Widths According to Largest Piece of Data Contained
            // within one rows in each column. Loop until all of the Columns have been
            // searched through and set the Associated Width of the Longest Data Entry
            // within thier ranks.
            for (int column = 0; column < ManageStudentsPanel.classListTable.getColumnCount(); column++)
            {
                // Retrive the Table Column Model Object Associated with the Current
                // Column Number that the loop is on.
                TableColumn tableColumn = ManageStudentsPanel.classListTable.getColumnModel().getColumn(column);
                // Retrieve the Prefered Width of the Column. This is the Actual Width
                // Associated with the Column Object Within the Table.
                int preferredWidth = tableColumn.getMinWidth();
                // Retrieve the Max Width of the Column. This is the Width which the
                // column may be stretched too should it be required.
                int maxWidth = tableColumn.getMaxWidth();

                // Loop through each of the Rows Within the Current Column
                for (int row = 0; row < ManageStudentsPanel.classListTable.getRowCount(); row++)
                {
                    // Retrieve the Cell Renderer Object Associated With the Current
                    // Column and Row Number. This will be used to retrieve the size
                    // information of the Data Contained within the Cell.
                    TableCellRenderer cellRenderer = ManageStudentsPanel.classListTable.getCellRenderer(row, column);
                    // Convert the Cell Renderer into a Generic Component Object to Retrieve
                    // the Data Size Information.
                    Component c = ManageStudentsPanel.classListTable.prepareRenderer(cellRenderer, row, column);
                    // Retrieve the Prefered Width of the Components Containing the Data.
                    // The Prefered Width is the current width of the Compononet after all of the
                    // changes we invoked earlier. We then combine this with the Intercell Spacing
                    // Width to get the Length in Pixels of the Data.
                    int width = c.getPreferredSize().width + ManageStudentsPanel.classListTable.getIntercellSpacing().width;
                    // Get the Maximum Size that the Cell's Width Can Become.
                    preferredWidth = Math.max(preferredWidth, width);

                    // Check to see if the Preferered Width is greater than the
                    // Cells Maximum Visible Dimension Size. If so,
                    // We've exceeded the maximum width, so theres
                    // no need to check other rows.
                    if (preferredWidth >= maxWidth)
                    {
                        // Set the Prefered Width to the Max
                        // Width's Size.
                        preferredWidth = maxWidth;
                        // Break Inner Loop.
                        break;
                    }
                }

                // Se the Prefererd Width of the Current Column to
                // the Maximum Width Required to Fully Display the
                // longest piece of information.
                tableColumn.setPreferredWidth(preferredWidth);
            }

            // Seeing as We have made changes to the Original Structure
            // of the JScrollPane Viewport, revalidate the object before repainting
            // it to the Screen.
            ManageStudentsPanel.classListTableScrollPane.revalidate();
            ManageStudentsPanel.classListTableScrollPane.repaint();

            // Seeing as We have made changes to the Original Structure
            // of the JTable, revalidate the object before repainting
            // it to the Screen.
            ManageStudentsPanel.classListTable.revalidate();
            ManageStudentsPanel.classListTable.repaint();

            // Create Integer Array Variable to Hold the Individual Width's
            // of each Column now that the resizing operations have been
            // performed.
            int[] columnWidths = {0, 0, 0, 0, 0, 0, 0};

            // Get the Current Width of the First Column.
            columnWidths[0] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(0).getPreferredWidth();
            // Get the Current Width of the Second Column.
            columnWidths[1] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(1).getPreferredWidth();
            // Get the Current Width of the Third Column.
            columnWidths[2] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(2).getPreferredWidth();
            // Get the Current Width of the Forth Column.
            columnWidths[3] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(3).getPreferredWidth();
            // Get the Current Width of the Fifth Column.
            columnWidths[4] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(4).getPreferredWidth();
            // Get the Current Width of the Sixth Column.
            columnWidths[5] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(5).getPreferredWidth();
            // Get the Current Width of the Seventh Column.
            columnWidths[6] = ManageStudentsPanel.classListTable.getColumnModel().getColumn(6).getPreferredWidth();

            // Combine All of the Column Widths to get A Total
            // Width in pixels. This is done to provide a comparison
            // value in the next step.
            int jTableWidth = columnWidths[0] + columnWidths[1] + columnWidths[2] + columnWidths[3] + columnWidths[4] + columnWidths[5] + columnWidths[6];

            // If The Width of All the Current Columns in the JTable is
            // Less than the Size of the JScrollPane's Visible Viewport Width, then
            // resize the Last Column to Fit the Entire ScrollPane Width
            if (jTableWidth < 754) {
                // Set JTable Resize Mode to Automatically Resize the Last Column
                // should the current assortment of the Datat contained within all of
                // the columns and rows is less in pixel width than the visible
                // Area of the Container JViewPort.
                ManageStudentsPanel.classListTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            }

            // Hide the Loading Icon in MainScreen Management Tab
            // seeing as we have now retrieved the Student Data and
            // used it to Create our Table.
            main.jLabel62.setVisible(false);

            // Hide the Table View Type Selection Components
            // From the Users View.
            ManageStudentsPanel.setTableTypeSelectionComponentsVisible(false);
            // Ensure that the Remove Student From Class
            // Button is not visible once the Table is shown.
            // This Button should only appear when the Instructor
            // clicks upon a Student within the Students in Class
            // Table.
            ManageStudentsPanel.setRemoveStudentFromClassButtonVisible(false);
            // Seeing as we now have our Table Completely made
            // and the Loading Icon has been hidden. Renable the
            // Table View Type Selection Components.
            ManageStudentsPanel.enableTableTypeSelectionComponents(true);

            // Create an HTML Formatted Text String for the Title
            // JLabel Located Above the Students in Class Table.
            String formattedHtmlClassTitle = "<html><center><font color=#0093ff>" + ManageStudentsPanel.selectedClassType.getClassTitle() + "</font> (<font color=#ff0000>Students In Class</font>):</center></html>";
            // Make the JLabel Show  the Title of the Currently
            // Selected Class in a Royal Blue Color.
            ManageStudentsPanel.jLabel1.setText(formattedHtmlClassTitle);

            // Show the Students in Class Table and its Accompanying
            // Components Seeing as the Table's Model has been Set
            // and everything else has finished.
            ManageStudentsPanel.setClassStudentListComponentsVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStudentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStudentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStudentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStudentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClassType defaultClass = null;
                new AddStudentWindow(0, defaultClass).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public static javax.swing.JButton jButton4;
    public static javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    public static javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    public static javax.swing.JLabel jLabel8;
    public static javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    
    public Point newLocation;
    public int tableViewType;
    public ClassType classType;
    public int conversion = 0;
    public MainScreen main;
    
    public boolean operationInvoked;
    
    public Student studentValueStudentsInClassAddByUsername;
    public Student studentValueStudentsInClassAddByStudentID;
    
    public MessageResponseTracker messageResponseTracker = new MessageResponseTracker();
    public ClassInstanceInformationTracker classInstanceTracker = new ClassInstanceInformationTracker();
    public DatabaseManagerMySQL manager = new DatabaseManagerMySQL();
    public TrackerObject tracker = new TrackerObject();
    
    
    /*
     *  LoadingScreenController is a SwingWorker Class whose
     *  doInBackground() Method is invoked upon calling the execute()
     *  method in the main class. A SwingWorker Class is the only
     *  way to safely create a seperate thread that interacts with
     *  the main EventQueue class. Should you try to invoke change to the GUI
     *  object from a non EventQueue related class, it can cause
     *  unforseen nonrepeatable errors in the programs execution.
     *
     */
    public class TaskHandler extends SwingWorker<Void,Void> {
        
        public int task;

        public TaskHandler(int value) {
            task = value;
        }
        
        // Method for Seperate EventQueue Thread
        // to Execute.
        @Override
        protected Void doInBackground() throws Exception {
            
            // Execute once the User has Clicked the Go Button
            // for Adding a Student by the Inputted Username. 
            if (task == 0) {
                
                // Query the Remote Database to Determine whether or not there
                // is a Student who is using the choosen Username Entered within the 
                // Username JTextField. 
                studentValueStudentsInClassAddByUsername = manager.findStudentByUsername(jTextField1.getText());
                
                System.out.println("Getting Here in Task Handler(1) 1");
                // Create And Show Error Message Telling the User that
                // There is no Student using the Specified Username Present
                // within the Remote Database.
                if (studentValueStudentsInClassAddByUsername.getRowID() == 1) {
                    // Hide the Loading Gif Image to
                    // show the User that the Background Operation
                    // has finished Executing.
                    showLoadingSymbol(false);
                    
                    // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                    WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
                    // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                    String formattedHTML = "<html><center>There is no Student Matching the Inputted Information Present Within the Database. Please Check Your Input and Try Again.</center></html>";
                    
                    // Set the Icon of the Warning Message Window
                    warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/failIcon78x78.png")));
                    // Set the Warning Message JLabel to Display the HTML Text.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Disable Search Value Components Until User Clicks
                    // out of Warning Message Window
                    setSearchValueUsernameComponentsEnabled(false);
                    // Make Warning Message Window Visible.
                    warning.setVisible(true);
                }
                // Create And Show Error Message Telling the User that
                // A Communication's Exception Has Occured While Attempting to
                // find the Student using the choosen Username.
                else if (studentValueStudentsInClassAddByUsername.getRowID() == 2) {
                    // Hide the Loading Gif Image to
                    // show the User that the Background Operation
                    // has finished Executing.
                    showLoadingSymbol(false);

                    // Create New Internet Connection Failure Class
                    WarningMessageInternetConnectionFailure warning = new WarningMessageInternetConnectionFailure("Management Tab Add Student Window");
                    
                    // Disable Search Value Components Until User Clicks
                    // out of Warning Message Window
                    setSearchValueUsernameComponentsEnabled(false);
                    // Make Warning Message Window Visible.
                    warning.setVisible(true);
                }
                // Create And Show Error Message Telling the User that
                // A SQL Exception Has Occured While Attempting to
                // find the Student using the choosen Username.
                else if (studentValueStudentsInClassAddByUsername.getRowID() == 3) {
                    // Hide the Loading Gif Image to
                    // show the User that the Background Operation
                    // has finished Executing.
                    showLoadingSymbol(false);
                    
                    // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                    WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
                    // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                    String formattedHTML = "<html><center>An Error Has Occured Within the Database While Attempting to Execute the Operation. Please Try Again Later.</center></html>";
                    
                    // Set the Icon of the Warning Message Window
                    warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/failIcon78x78.png")));
                    // Set the Warning Message JLabel to Display the HTML Text.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Disable Search Value Components Until User Clicks
                    // out of Warning Message Window
                    setSearchValueUsernameComponentsEnabled(false);
                    // Make Warning Message Window Visible.
                    warning.setVisible(true);
                }
                // If the Student's RowID Field is 0, it means that the Operation
                // has been performed successfully and that all of the information
                // has been retrieved.
                else {
                    System.out.println("Getting Here in Task Handler(1) 2");
                    // If there is a Student Found Using the Specified Username In the Previous Step,
                    // Check to Make Sure that the Student Being Added is not already present within the
                    // the Current Class.
                    int result = manager.checkForStudentInClass(studentValueStudentsInClassAddByUsername.getStudentIdentificationNumber(), classType.getClassID());
                    
                    // If The Student that the User is Trying to Add is
                    // already enrolled in the Current Class, Create
                    // Warning Message.
                    if (result >= 0) {
                        try {
                            // Hide the Loading Gif Image to
                            // show the User that the Background Operation
                            // has finished Executing.
                            showLoadingSymbol(false);

                            // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                            WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
                            // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                            String formattedHTML = "<html><center>The Student You Are Attempting To Add is Already Present Within the Class <font color=#00d7e7>" + classType.getClassTitle() + "</font>.</center></html>";

                            // Set Icon to Warning Icon in the Warning Window Instance
                            warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/YMIcon75x75.png")));
                            // Set the Warning Window to Display the Formatted
                            // Error Message HTML Text.
                            warning.jLabel6.setText(formattedHTML);

                            // Disable the Add Student Components Until the
                            // User Exits from the Error Window.
                            setSearchValueUsernameComponentsEnabled(false);
                            // Make the Warning Message Window Visible.
                            warning.setVisible(true);
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    // Create And Show Error Message Telling the User that
                    // A Communication's Exception Has Occured While Attempting to
                    // determine Whether or not the Chosen Student is Already Within
                    // the Current Class.
                    else if (result == -2) {
                        // Hide the Loading Gif Image to
                        // show the User that the Background Operation
                        // has finished Executing.
                        showLoadingSymbol(false);

                        // Create New Internet Connection Failure Class
                        WarningMessageInternetConnectionFailure warning = new WarningMessageInternetConnectionFailure("Management Tab Add Student Window");

                        // Disable Search Value Components Until User Clicks
                        // out of Warning Message Window
                        setSearchValueUsernameComponentsEnabled(false);
                        // Make Warning Message Window Visible.
                        warning.setVisible(true);
                    }
                    // Create And Show Error Message Telling the User that
                    // A SQL Exception Has Occured While Attempting to
                    // determine Whether or not the choosen Student is Already
                    // present Within the Class.
                    else if (result == -3) {
                        // Hide the Loading Gif Image to
                        // show the User that the Background Operation
                        // has finished Executing.
                        showLoadingSymbol(false);

                        // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                        WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
                        // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                        String formattedHTML = "<html><center>An Error Has Occured Within the Database While Attempting to Execute the Operation. Please Try Again Later.</center></html>";

                        // Set the Icon of the Warning Message Window
                        warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/failIcon78x78.png")));
                        // Set the Warning Message JLabel to Display the HTML Text.
                        warning.jLabel6.setText(formattedHTML);

                        // Disable Search Value Components Until User Clicks
                        // out of Warning Message Window
                        setSearchValueUsernameComponentsEnabled(false);
                        // Make Warning Message Window Visible.
                        warning.setVisible(true);
                    }
                    // The Choosen Student's Information has been found and
                    // they are not currently enrolled in the Chosen Class.
                    // Thus, create a Confirmation Message Dialog displaying
                    // the Students Name and Asking Whether or not They are
                    // sure if they want to Add the Student to Current Class.
                    else {
                        // Create New Instance of the AddStudentConfirmationMessage Confirmation Window.
                        AddStudentConfirmationMessage ascm = new AddStudentConfirmationMessage(0, 0);
                        // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                        String formattedHTML = "<html><center>Are you sure you want to Add the Student <font color=#00eddb>" + studentValueStudentsInClassAddByUsername.getStudentDisplayName() + "</font> to the Class <font color=#34ed00>" + classType.getClassTitle() + "</font>?</center></html>";

                        // Set the Confirmation Message JLabel to Display the HTML Text.
                        ascm.jLabel6.setText(formattedHTML);
                        // Show the Confirmation Message Screen.
                        ascm.setVisible(true);

                        System.out.println("Getting Here in Task Handler(1) 3");
                        // Create New Thread to Wait on Response From
                        // Add Student Confirmation Message Window.
                        TaskHandler handler = new TaskHandler(2);
                        handler.execute();
                        
                        ManageStudentsPanel.enableStudentsInClassTableComponents(false);
                        main.jLabel62.setVisible(true);
                        
                        System.out.println("Getting Here in Task Handler(1) 4");
                    }
                }
            }
            // Execute once the User has Clicked the Go Button
            // for Adding a Student by the Inputted Student ID. 
            else if (task == 1) {
                
                // Query the Remote Database to Determine whether or not there
                // is a Student who is using the choosen Student ID Entered within the 
                // Student ID JTextField. 
                studentValueStudentsInClassAddByStudentID = manager.findStudentByIdentificationNumber(conversion);
                
                // Create And Show Error Message Telling the User that
                // There is no Student using the Specified Identification Number
                // Present within the Remote Database.
                if (studentValueStudentsInClassAddByStudentID.getRowID() == 1) {
                    // Hide the Loading Gif Image to
                    // show the User that the Background Operation
                    // has finished Executing.
                    showLoadingSymbol(false);
                    
                    // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                    WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(1);
                    // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                    String formattedHTML = "<html><center>There is no Student Associated with the Inputted Identification Number Present Within the Database. Please Check Your Input and Try Again.</center></html>";
                    
                    // Set the Icon of the Warning Message Window
                    warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/YMIcon75x75.png")));
                    // Set the Warning Message JLabel to Display the HTML Text.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Disable Search Value Components Until User Clicks
                    // out of Warning Message Window
                    setSearchValueIDComponentsEnabled(false);
                    // Make Warning Message Window Visible.
                    warning.setVisible(true);
                }
                // Create And Show Error Message Telling the User that
                // A Communication's Exception Has Occured While Attempting to
                // find the Student using the choosen Student ID Number.
                else if (studentValueStudentsInClassAddByStudentID.getRowID() == 2) {
                    // Hide the Loading Gif Image to
                    // show the User that the Background Operation
                    // has finished Executing.
                    showLoadingSymbol(false);

                    // Create New Internet Connection Failure Class
                    WarningMessageInternetConnectionFailure warning = new WarningMessageInternetConnectionFailure("Management Tab Add Student Window");
                    
                    // Disable Search Value Components Until User Clicks
                    // out of Warning Message Window
                    setSearchValueUsernameComponentsEnabled(false);
                    // Make Warning Message Window Visible.
                    warning.setVisible(true);
                }
                // Create And Show Error Message Telling the User that
                // A SQL Exception Has Occured While Attempting to
                // find the Student using the choosen Student ID Number.
                else if (studentValueStudentsInClassAddByStudentID.getRowID() == 3) {
                    // Hide the Loading Gif Image to
                    // show the User that the Background Operation
                    // has finished Executing.
                    showLoadingSymbol(false);
                    
                    // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                    WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(1);
                    // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                    String formattedHTML = "<html><center>An Error Has Occured Within the Database While Attempting to Execute the Operation. Please Try Again Later.</center></html>";
                    
                    // Set the Icon of the Warning Message Window
                    warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/failIcon78x78.png")));
                    // Set the Warning Message JLabel to Display the HTML Text.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Disable Search Value Components Until User Clicks
                    // out of Warning Message Window
                    setSearchValueUsernameComponentsEnabled(false);
                    // Make Warning Message Window Visible.
                    warning.setVisible(true);
                }
                // We Have Successfully Found the Student's Information,
                // From Here, We Need to First Ensure that the Student
                // Chosen by the User is not Present Within the Current
                // Class.
                else {
                    // Determine Whether or Not the Chosen Student
                    // is Already within the Class.
                    int result = manager.checkForStudentInClass(studentValueStudentsInClassAddByStudentID.getStudentIdentificationNumber(), classType.getClassID());
                    
                    // Seeing as We Are Retrieveing the Row ID
                    // Number of the Possible Student Class Link,
                    // We need to have our Error Return Values as
                    // Negative Numbers.
                    
                    // If The ID Returned is (0 - ∞), it means
                    // that the Choosen Student is Already Present
                    // Within the Current Class. Thus, Print out
                    // a Warning Message Letting the User Know.
                    if (result >= 0) {
                        // Hide the Loading Gif Image to
                        // show the User that the Background Operation
                        // has finished Executing.
                        showLoadingSymbol(false);

                        // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                        WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(1);
                        // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                        String formattedHTML = "<html><center>The Student You Are Currently Trying to Add is Already Enolled In the Class.</center></html>";

                        // Set the Icon of the Warning Message Window
                        warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/YMIcon75x75.png")));
                        // Set the Warning Message JLabel to Display the HTML Text.
                        warning.jLabel6.setText(formattedHTML);

                        // Disable Search Value Components Until User Clicks
                        // out of Warning Message Window
                        setSearchValueIDComponentsEnabled(false);
                        // Make Warning Message Window Visible.
                        warning.setVisible(true);
                    }
                    // Create And Show Error Message Telling the User that
                    // A Communication's Exception Has Occured While Attempting to
                    // Determine Whether or Not the Chosen Student is Present Within
                    // the Current Class.
                    else if (result == -2) {
                        // Hide the Loading Gif Image to
                        // show the User that the Background Operation
                        // has finished Executing.
                        showLoadingSymbol(false);

                        // Create New Internet Connection Failure Class
                        WarningMessageInternetConnectionFailure warning = new WarningMessageInternetConnectionFailure("Management Tab Add Student Window");

                        // Disable Search Value Components Until User Clicks
                        // out of Warning Message Window
                        setSearchValueUsernameComponentsEnabled(false);
                        // Make Warning Message Window Visible.
                        warning.setVisible(true);
                    }
                    // Create And Show Error Message Telling the User that
                    // A SQL Exception Has Occured While Attempting to
                    // Determine Whether or Not the Chosen Student is Present Within
                    // the Current Class.
                    else if (result == -3) {
                        // Hide the Loading Gif Image to
                        // show the User that the Background Operation
                        // has finished Executing.
                        showLoadingSymbol(false);

                        // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                        WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(1);
                        // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                        String formattedHTML = "<html><center>An Error Has Occured Within the Database While Attempting to Execute the Operation. Please Try Again Later.</center></html>";

                        // Set the Icon of the Warning Message Window
                        warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/failIcon78x78.png")));
                        // Set the Warning Message JLabel to Display the HTML Text.
                        warning.jLabel6.setText(formattedHTML);

                        // Disable Search Value Components Until User Clicks
                        // out of Warning Message Window
                        setSearchValueUsernameComponentsEnabled(false);
                        // Make Warning Message Window Visible.
                        warning.setVisible(true);
                    }
                    // The Choosen Student's Information has been found and
                    // they are not currently enrolled in the Chosen Class.
                    // Thus, create a Confirmation Message Dialog displaying
                    // the Students Name and Asking Whether or not They are
                    // sure if they want to Add the Student to Current Class.
                    else {
                        // Create New Instance of the AddStudentConfirmationMessage Confirmation Window.
                        AddStudentConfirmationMessage ascm = new AddStudentConfirmationMessage(0, 1);
                        // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                        String formattedHTML = "<html><center>Are you sure you want to Add the Student <font color=#00eddb>" + studentValueStudentsInClassAddByStudentID.getStudentDisplayName() + "</font> to the Class <font color=#34ed00>" + classType.getClassTitle() + "</font>?</center></html>";
                    
                        // Set the Confirmation Message JLabel to Display the HTML Text.
                        ascm.jLabel6.setText(formattedHTML);
                        // Show the Confirmation Message Screen.
                        
                        ManageStudentsPanel.enableStudentsInClassTableComponents(false);
                        main.jLabel62.setVisible(true);
                        
                        ascm.setVisible(true);
                    }
                }
            }
            // Create A Thread that Waits for A Users Response on the 
            // Add Student Confirmation Message Window triggered during the
            // Student's In Class Add By Username Table Segment.
            else if (task == 2) {
                
                // Reset the Response User's Response Value in Case it Is Currently
                // Stuck At 3.
                messageResponseTracker.setAddStudentResponseStudentsInClassAddByUsernameSegmentValue(0);
                
                boolean breaker = false;
                    
                while (breaker == false) {
                    
                    // If the User Clicks Yes.
                    switch (messageResponseTracker.getAddStudentResponseStudentsInClassAddByUsernameSegmentValue()) {
                        case 1:
                            // Reset the Synchronized Response Value
                            messageResponseTracker.setAddStudentResponseStudentsInClassAddByUsernameSegmentValue(0);
                            
                            // Call Method to Create the Student Class Link Within
                            // the Database Along with Any Attendance Records should
                            // they be needed.
                            DatabaseOperationResult finalresult = manager.createStudentClassLinkStudentsInClass(studentValueStudentsInClassAddByUsername.getStudentIdentificationNumber(), tracker.getCurrentInstructorInformation().getInstructorID(), classType.getClassID());
                            
                            // If the Overall Result of the Database Operation
                            // Sequence is Failure.
                            if (finalresult.getResult() == false) {
                                // Create And Show Error Message Telling the User that
                                // A SQL Exception Has Occured While Attempting to
                                // create A New Student Class Link.
                                if (finalresult.getType().equalsIgnoreCase("SQLException")) {
                                    
                                    // Hide the Loading Gif Image to
                                    // show the User that the Background Operation
                                    // has finished Executing.
                                    showLoadingSymbol(false);
                                    
                                    // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                                    WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(0);
                                    // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                                    String formattedHTML = "<html><center>And Error Has Occured While Attempting To Add the Student to the Class Please Try Again Later.</center></html>";
                                    
                                    // Set the Icon of the new Warning Message Window As the Warning Icon.
                                    warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/warningemblemscaled.png")));
                                    // Set the Warning Message JLabel to Display the HTML Text.
                                    warning.jLabel6.setText(formattedHTML);
                                    
                                    // Disable the Search Components Until the User Closes
                                    // the Warning Message Window.
                                    setSearchValueUsernameComponentsEnabled(false);
                                    // Make the Warning Message Window Visible.
                                    warning.setVisible(true);
                                }
                                // Create And Show Error Message Telling the User that
                                // A Communication's Exception Has Occured While Attempting to
                                // create A New Student Class Link.
                                else if (finalresult.getType().equalsIgnoreCase("CommunicationsException")) {
                                    System.out.println("Getting Here in the ADD STUDENT WINDOW 7");
                                    
                                    // Hide the Loading Gif Image to
                                    // show the User that the Background Operation
                                    // has finished Executing.
                                    showLoadingSymbol(false);
                                    
                                    // Create New Internet Connection Failure Class
                                    WarningMessageInternetConnectionFailure warning = new WarningMessageInternetConnectionFailure("Management Tab Add Student Window");
                                    
                                    // Disable Search Value Components Until User Clicks
                                    // out of Warning Message Window
                                    setSearchValueUsernameComponentsEnabled(false);
                                    // Make Warning Message Window Visible.
                                    warning.setVisible(true);
                                }
                            }
                            // If the Overall Result of the Database Operation
                            // Sequence is Successful.
                            else {
                                
                                // Hide the Loading Gif Image to
                                // show the User that the Background Operation
                                // has finished Executing.
                                showLoadingSymbol(false);
                                
                                // Create New Instance of the Successful Status Message Class.
                                StatusMessageStudentModificationSuccessful smssa = new StatusMessageStudentModificationSuccessful(0);
                                
                                // Create Formatted HTML Text That Tells the User The Details of the Successful Operation.
                                String formattedHTML = "<html><center>Student <font color=#00d7ed>" + studentValueStudentsInClassAddByUsername.getStudentDisplayName() + "</font> has been successfully added to the Class <font color=#01ed00>" + classType.getClassTitle() + "</font>.</center></html>";
                                // Set the Success Message Window's Display Text.
                                smssa.jLabel6.setText(formattedHTML);
                                
                                // Disable the Components Until User Exits Out of Status
                                // Message Window.
                                setSearchValueUsernameComponentsEnabled(false);
                                
                                // Let the Window Know That An Operation
                                // has Taken Place.
                                operationInvoked = true;
                                // Exit out of the Current
                                // JFrame Form
                                dispose();
                                // Show Success Status Message
                                // Window
                                smssa.setVisible(true);
                                
                                // Repopulate And Repaint
                                // Table in MainScreen Manage
                                // Students Panel.
                                createTableModel();
                                
                                // Break From the Loop.
                                breaker = true;
                                
                                // Hide the Loading Image In
                                // MainScreen Class
                                main.jLabel62.setVisible(false);
                            }
                        case 2:
                            System.out.println("Getting Here in the Case 2");
                            // Reset the Synchronized Response Value
                            messageResponseTracker.setAddStudentResponseStudentsInClassAddByUsernameSegmentValue(0);
                            // Hide the Loading Gif Image to
                            // show the User that the Background Operation
                            // has finished Executing.
                            showLoadingSymbol(false);
                            // Re-Enable the Search Components Associated
                            // With the Add By Username Section of the JPanel Form.
                            setSearchValueUsernameComponentsEnabled(true);
                            // Break From the Loop And End the Thread
                            // Seeing As the User Has Choosen to Cancel
                            // the Operation or Say No.
                            breaker = true;
                            
                            // Renable the Students In Class Components
                            // Seeing as the Operation Has Finished.
                            ManageStudentsPanel.enableStudentsInClassTableComponents(true);
                            // Hide the Loading Image In
                            // MainScreen Class
                            main.jLabel62.setVisible(false);
                        case 3:
                            System.out.println("Getting Here in the Case 3");
                            // Reset the Synchronized Response Value
                            messageResponseTracker.setAddStudentResponseStudentsInClassAddByUsernameSegmentValue(0);
                            // Hide the Loading Gif Image to
                            // show the User that the Background Operation
                            // has finished Executing.
                            showLoadingSymbol(false);
                            // Re-Enable the Search Components Associated
                            // With the Add By Username Section of the JPanel Form.
                            setSearchValueUsernameComponentsEnabled(true);
                            // Break From the Loop And End the Thread
                            // Seeing As the User Has Choosen to Cancel
                            // the Operation or Say No.
                            breaker = true;
                            
                            // Renable the Students In Class Components
                            // Seeing as the Operation Has Finished.
                            ManageStudentsPanel.enableStudentsInClassTableComponents(true);
                            // Hide the Loading Image In
                            // MainScreen Class
                            main.jLabel62.setVisible(false);
                        default:
                            // Do Nothing
                    }
                }
            }
            // Create A Thread that Waits for A Users Response on the 
            // Add Student Confirmation Message Window triggered during the
            // Student's In Class Add By Identification Number Table Segment.
            else if (task == 3) {
                
                // Reset the Response User's Response Value in Case it Is Currently
                // Stuck At 3.
                messageResponseTracker.setAddStudentResponseStudentsInClassAddByStudentIDSegmentValue(0);
                
                boolean breaker = false;
                    
                while (breaker == false) {
                    
                    // If the User Clicks Yes.
                    switch (messageResponseTracker.getAddStudentResponseStudentsInClassAddByStudentIDSegmentValue()) {
                        case 1:
                            // Call Method to Create the Student Class Link Within
                            // the Database Along with Any Attendance Records should
                            // they be needed.
                            DatabaseOperationResult finalresult = manager.createStudentClassLinkStudentsInClass(studentValueStudentsInClassAddByStudentID.getStudentIdentificationNumber(), tracker.getCurrentInstructorInformation().getInstructorID(), classType.getClassID());
                            
                            System.out.println("Getting Here in the ADD STUDENT WINDOW 6");
                            
                            // If the Overall Result of the Database Operation
                            // Sequence is Failure.
                            if (finalresult.getResult() == false) {
                                // Create And Show Error Message Telling the User that
                                // A SQL Exception Has Occured While Attempting to
                                // create A New Student Class Link.
                                if (finalresult.getType().equalsIgnoreCase("SQLException")) {
                                    
                                    System.out.println("Getting Here in the ADD STUDENT WINDOW 7");
                                    
                                    // Hide the Loading Gif Image to
                                    // show the User that the Background Operation
                                    // has finished Executing.
                                    showLoadingSymbol(false);
                                    
                                    // Create New Instance of the WarningMessageManageStudentsAddStudent Warning Window.
                                    WarningMessageManageStudentsAddStudent warning = new WarningMessageManageStudentsAddStudent(1);
                                    // Create HTML Formatted Text that will be displayed in the Warning Message Window.
                                    String formattedHTML = "<html><center>And Error Has Occured While Attempting To Add the Student to the Class Please Try Again Later.</center></html>";
                                    
                                    // Set the Icon of the new Warning Message Window As the Warning Icon.
                                    warning.jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/warningemblemscaled.png")));
                                    // Set the Warning Message JLabel to Display the HTML Text.
                                    warning.jLabel6.setText(formattedHTML);
                                    
                                    // Disable the Search Components Until the User Closes
                                    // the Warning Message Window.
                                    setSearchValueUsernameComponentsEnabled(false);
                                    // Make the Warning Message Window Visible.
                                    warning.setVisible(true);
                                }
                                // Create And Show Error Message Telling the User that
                                // A Communication's Exception Has Occured While Attempting to
                                // create A New Student Class Link.
                                else if (finalresult.getType().equalsIgnoreCase("CommunicationsException")) {
                                    // Hide the Loading Gif Image to
                                    // show the User that the Background Operation
                                    // has finished Executing.
                                    showLoadingSymbol(false);
                                    
                                    // Create New Internet Connection Failure Class
                                    WarningMessageInternetConnectionFailure warning = new WarningMessageInternetConnectionFailure("Management Tab Add Student Window");
                                    
                                    // Disable Search Value Components Until User Clicks
                                    // out of Warning Message Window
                                    setSearchValueUsernameComponentsEnabled(false);
                                    // Make Warning Message Window Visible.
                                    warning.setVisible(true);
                                }
                            }
                            // If the Overall Result of the Database Operation
                            // Sequence is Successful.
                            else {
                                // Hide the Loading Gif Image to
                                // show the User that the Background Operation
                                // has finished Executing.
                                showLoadingSymbol(false);
                                
                                // Create New Instance of the Successful Status Message Class.
                                StatusMessageStudentModificationSuccessful smssa = new StatusMessageStudentModificationSuccessful(0);
                                
                                // Create Formatted HTML Text That Tells the User The Details of the Successful Operation.
                                String formattedHTML = "<html><center>Student <font color=#00d7ed>" + studentValueStudentsInClassAddByStudentID.getStudentDisplayName() + "</font> has been successfully added to the Class <font color=#01ed00>" + classType.getClassTitle() + "</font>.</center></html>";
                                // Set the Success Message Window's Display Text.
                                smssa.jLabel6.setText(formattedHTML);
                                
                                // Disable the Components Until User Exits Out of Status
                                // Message Window.
                                setSearchValueUsernameComponentsEnabled(false);
                                
                                // Exit out of the Current
                                // JFrame Form
                                dispose();
                                // Show Success Status Message
                                // Window
                                smssa.setVisible(true);
                                
                                // Repopulate And Repaint
                                // Table in MainScreen Manage
                                // Students Panel.
                                createTableModel();
                            }
                            
                            // Break From the Loop And End the Thread
                            // Seeing As the User Has Choosen to Cancel
                            // the Operation or Say No.
                            breaker = true;
                        case 2:
                            // Reset the Synchronized Response Value
                            messageResponseTracker.setAddStudentResponseStudentsInClassAddByStudentIDSegmentValue(0);
                            // Re-Enable the Search Components Associated
                            // With the Add By Student ID Section of the JPanel Form.
                            setSearchValueIDComponentsEnabled(true);
                            // Hide the Loader Symbol Seeing As the User
                            // has Chosen to Cancel the Add Student Operation.
                            showLoadingSymbol(false);
                            // Break From the Loop And End the Thread
                            // Seeing As the User Has Choosen to Cancel
                            // the Operation or Say No.
                            breaker = true;
                        case 3:
                            // Reset the Synchronized Response Value
                            messageResponseTracker.setAddStudentResponseStudentsInClassAddByStudentIDSegmentValue(0);
                            // Re-Enable the Search Components Associated
                            // With the Add By Student ID Section of the JPanel Form.
                            setSearchValueIDComponentsEnabled(true);
                            // Hide the Loader Symbol Seeing As the User
                            // has Chosen to Cancel the Add Student Operation.
                            showLoadingSymbol(false);
                            // Break From the Loop And End the Thread
                            // Seeing As the User Has Choosen to Cancel
                            // the Operation or Say No.
                            breaker = true;
                        default:
                            // Do Nothing
                    }
                }
            }
            
            return null;
        }
        
        // This method is automatically invoked after the
        // doInBackground() method has finished
        // executing.
        @Override
        protected void done() {
            // Make the GuiFour Frame
            // invisible.
            //setVisible(false);
            //dispose();
        }
    }
}
