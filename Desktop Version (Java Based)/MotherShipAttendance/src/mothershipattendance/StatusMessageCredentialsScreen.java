/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import java.awt.Point;
import javax.swing.SwingWorker;

/**
 *  This Class is Responsible for Creating a Pop-Up GUI
 *  Status Message which Alerts the User of What Type of
 *  Error Has Occurred During the Credentials Screen Login
 *  Process. This Class will Re-Enable the Credentials Screen
 *  User Response Components in Addition to Highlighting the
 *  Fields Containing Errors within the Form. Additionally,
 *  this Class will Display the Error Message Details in the
 *  Status Message JLabel Component Contained Underneath the 
 *  Credentials Screen "Password Field".
 * 
 *  @date           November 10, 2020
 *  @author         Tyler Fontana
 *  @version        1.0.2
 */
public class StatusMessageCredentialsScreen extends javax.swing.JFrame {

    /**
     *  This Basic Constructor Creates a new Instance of
     *  the Status Message Credentials Screen GUI Class. The
     *  Parameter Integer Value Passed in Acts as the Status
     *  Message Number Type which Tells the Class What Task to
     *  Accomplish on Window Disposal.
     * 
     *  @param value            The Error / Status Message
     *                          Number Which Lets the Pop-Up
     *                          Window Know Which Task to
     *                          Accomplish on Window Disposal.
     */
    public StatusMessageCredentialsScreen(int value) {
        // Set the Error / Status Message Type.
        messageType = value;
        /**
         * Invoke the Method Used to Create and
         * Display the TitleScreen GUI Window Form.
         **/
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Warning Screen");
        setBackground(new java.awt.Color(153, 153, 153));
        setLocation(new java.awt.Point(450, 294));
        setName("WarningFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText(" Please Enter Both A Valid");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/warningemblemscaled.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(16, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addContainerGap(270, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(15, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(17, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/steelbackground356x112.png"))); // NOI18N
        jLabel3.setToolTipText("");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 114, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This Method is Automatically Invoked Whenever the User
     *  Closes the current Status Message GUI Window Instance, or
     *  the dispose() method is invoked somewhere within the Class.
     *  This Method is Responsible for Creating and Executing a
     *  Background Event Queue Thread Which is Responsible for
     *  Manipulating the Credentials Screen GUI Window Form's Aesthetics.
     * 
     *  @param evt              The Action of the Current Window Instance
     *                          Closing either Programmatically or through
     *                          User intervention / Response.
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        /**
         *  Execute a new Background Event Queue Thread
         *  which will Accomplish the Heavy Window Form 
         *  Manipulation Tasks Upon Window Disposal.
         */
        new TaskHandler(messageType).execute();        
    }//GEN-LAST:event_formWindowClosed

    /**
     *  This Method is Used to Request that the Focus
     *  of the Credentials Screen GUI Form is Moved to
     *  the "Login" JButton Upon the Disposal of the
     *  Status Message GUI Screen. This is done so that
     *  the Highlighted Error Fields aren't Automatically
     *  Removed by the Form Placing the Overall Event
     *  Queue Thread's Focus on the "Username" Field.
     */
    public void requestFocusOnLoginButtonComponent() {
        // Request Focus to be Placed on "Login" Button.
        CredintialsScreen.jButton1.requestFocusInWindow();
    }
    
    /**
     *  This Method is Used to Set the Display Text Message Present
     *  Within the Current Instance of this GUI Window Form.
     * 
     *  @param value        The String Message Value that will be
     *                      Displayed on the Current Instance of the
     *                      Status Message Window Form.
     */
    public void setStatusMessageDisplayMessage(String value) {
        // Set the Status Message Value.
        jLabel6.setText(value);
    }
    
    /**
     *  This Method is Used to Set the Display Text Value of the Credentials Screen
     *  Error Message JLabel Located Under the Password Field.
     * 
     *  @param value        The Error / Status Message String
     *                      Value that will be Displayed Within
     *                      the Credentials Screen JLabel Component.
     */
    public void setCredentialsScreenStatusMessage(String value) {
        // Set the Display Text Message Value
        CredintialsScreen.jLabel7.setText(value);
    }
    
    /**
     *  This Method is Used to Show the Error / Status Message
     *  JLabel Within the Credentials Screen GUI Window Form.
     */
    public void showCredentialsScreenStatusMessage() {
        // Show the Error / Status Message JLabel
        CredintialsScreen.jLabel7.setVisible(true);
    }
    
    /**
     *  This Method is Used to Highlight the Credentials Screen "Password"
     *  User Response Field. This Method is Invoked Whenever the User Input
     *  Causes an Error to Occur in the Login Process which is Attributed to
     *  the Use of an Invalid or Non-Existing "Password" Value.
     */
    public void setCredentialsScreenPasswordFieldErrorAesthetics() {
        // Highlight "Password" Field Background in Red.
        CredintialsScreen.jPasswordField1.setBackground(new java.awt.Color(255, 0, 0));
        // Change "Password" Field Font Color to Gray.
        CredintialsScreen.jPasswordField1.setForeground(new java.awt.Color(204, 204, 204));
    }
    
    /**
     *  This Method is Used to Highlight the Credentials Screen "Username"
     *  User Response Field. This Method is Invoked Whenever the User Input
     *  Causes an Error to Occur in the Login Process which is Attributed to
     *  the Use of an Invalid or Non-Existing "Username" Value.
     */
    public void setCredentialsScreenUsernameFieldErrorAesthetics() {
        // Highlight "Username" Field Background in Red.
        CredintialsScreen.jTextField1.setBackground(new java.awt.Color(255, 0, 0));
        // Change "Password" Field Font Color to Gray.
        CredintialsScreen.jTextField1.setForeground(new java.awt.Color(204, 204, 204));
    }
    
    /**
     *  This Method is Used to Set Which Icon will be Shown within the
     *  Current Instance of the Status Message Credentials Screen GUI Class.
     *  If the Error Type which Caused the Window Instance to be Spawned
     *  Deals with the User Failing to Input Information, then the JLabel
     *  Emblem will Shown the Yellow Warning Message Icon. Otherwise, it
     *  will show the Red Warning Message Icon.
     * 
     *  @param value            The Integer Number Telling the Class Which
     *                          Warning Emblem Should Be Shown in the Status
     *                          Message Instance when it is Shown to the User.
     */
    public void setStatusMessageEmblem(int value) {
        /**
         * If the Integer Number is the Value of 0
         * then Display the Red Warning Message Emblem
         * Within the Form.
         */
        if (value == 0) {
            // Set the Display Emblem Icon.
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/warningemblemscaled.png"))); // NOI18N
        }
        /**
         * If the Integer Number is the Value of 1
         * then Display the Yellow Warning Message Emblem
         * Within the Form.
         */
        else if (value == 1) {
            // Set the Display Emblem Icon.
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/YMIcon75x75.png"))); // NOI18N
        }
        /**
         * If the Integer Number is any other Value,
         * then Display the Red Warning Message Emblem
         * Within the Form.
         */
        else {
            // Set the Display Emblem Icon.
            jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/warningemblemscaled.png"))); // NOI18N
        }
    }
    
    /**
     *  This Method is Used to Re-enable the User Response Components
     *  Present Within the Credentials Screen GUI Window Upon Successful
     *  Task Completion.
     */
    public void enableCredentialsScreenComponents() {
        // Reneable Credentials Screen GUI Window Components
        CredintialsScreen.setCredintialSearchComponentsEnablement(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatusMessageCredentialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatusMessageCredentialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatusMessageCredentialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatusMessageCredentialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatusMessageCredentialsScreen(-1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    
    /**
    *  Create an Global Integer Variable Which is Responsible
    *  For Determining What Type of Error Has Occurred in the
    *  Credentials Screen Login Process. This Value will be Defined
    *  in as the Parameter Value that the GUI Class Instance is
    *  Instantiated With.
    */
    public int messageType;
        
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    private class TaskHandler extends SwingWorker<Void,Void> {
        
        /**
        *  Create A Custom String Value Meant to Hold 
        *  the User Input Password Value
        */
        public String passwordValue = "";
        /**
        *  Create an Integer Variable Which is Responsible
        *  For Determining What Type of Task the Background
        *  Event Queue Thread will Execute.
        */
        public int task;
        
        /**
         *  This Constructor is Used to Create a New
         *  Instance of the Task Handler Thread and
         *  set the Error Type Integer Number Value
         *  which Determines what the Thread Does on
         *  Window Disposal.
         * 
         *  @param value        The Error / Status Message
         *                      Number that Tells the Background
         *                      SwingWorker Event Queue Thread
         *                      which Task to Execute.
         */
        public TaskHandler(int value) {
            // Set the Task Type.
            task = value;
        }
        
        /**
         * Method for Separate EventQueue Thread
         * to Execute.
         **/
        @Override
        protected Void doInBackground() throws Exception {
            
            /**
             *  Create Custom String Variable to Hold the
             *  Newly Generated Custom Message Which will be
             *  Displayed Under the Password Field in the
             *  Credentials Screen GUI Window Form.
             */
            String displayMessage = "";
            
            /**
             *  If the User has Failed to Input Both a "Username"
             *  and "Password" Response Value Before Attempting the
             *  Login Process, then Execute this Code Block.
             */
            if (task == 0) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>Please Enter Both A Username & Password.</left></html>";
                // Highlight "Username" Field Due to Error.
                setCredentialsScreenUsernameFieldErrorAesthetics();
                // Highlight "Password" Field Due to Error.
                setCredentialsScreenPasswordFieldErrorAesthetics();
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            /**
             *  If the User has Failed to Input a "Password"
             *  Response Value Before Attempting the
             *  Login Process, then Execute this Code Block.
             */
            else if (task == 1) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>Please Enter A Response in the Password Field.</left></html>";
                // Highlight "Password" Field Due to Error.
                setCredentialsScreenPasswordFieldErrorAesthetics();
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            /**
             *  If the User has Failed to Input a "Username"
             *  Response Value Before Attempting the
             *  Login Process, then Execute this Code Block.
             */
            else if (task == 2) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>Please Enter A Response in the Username Field.</left></html>";
                // Highlight "Username" Field Due to Error.
                setCredentialsScreenUsernameFieldErrorAesthetics();
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            /**
             *  If the Login Credential Information That the User Has Provided
             *  Fails to Return an Associated Profile, then Execute this Code Block.
             */
            else if (task == 3) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>Error Retrieving Profile Information.</left></html>";
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            /**
             *  If the Password that User Has Provided is Deemed to be Incorrect, Then
             *  Execute this Code Block.
             */
            else if (task == 4) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>The Specified Password is Incorrect.</left></html>";
                // Highlight "Password" Field Due to Error.
                setCredentialsScreenPasswordFieldErrorAesthetics();
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            /**
             *  If there is No Account Associated with the Specified Login Information
             *  then Execute this Code Block.
             */
            else if (task == 5) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>Account Not Found, Try Again.</left></html>";
                // Highlight "Username" Field Due to Error.
                setCredentialsScreenUsernameFieldErrorAesthetics();
                // Highlight "Password" Field Due to Error.
                setCredentialsScreenPasswordFieldErrorAesthetics();
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            /**
             *  If An SQL Error Has Occurred During the Login Process, then
             *  Execute this Code Block.
             */
            else if (task == 6) {
                /**
                 *  Create the Custom Display Message Which Will Be Shown
                 *  Under the "Password" Field in the Credentials Screen GUI
                 *  Instance.
                 */
                displayMessage = "<html><left>Database Error Has Occurred. Try Again Later.</left></html>";
                // Set the Custom Credentials Screen Display Message.
                setCredentialsScreenStatusMessage(displayMessage);
                // Show the Custom Message
                showCredentialsScreenStatusMessage();
                // Take the Focus Away From the Username Field.
                requestFocusOnLoginButtonComponent();
                // Re-Enable Credentials Screen Components.
                enableCredentialsScreenComponents();
            }
            
            /**
             * We will always Return a Null
             * Value for any SwingWorker Thread.
             */
            return null;
        }
    }
}
