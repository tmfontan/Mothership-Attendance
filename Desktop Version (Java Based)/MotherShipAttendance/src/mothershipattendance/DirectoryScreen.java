/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import javax.swing.SwingWorker;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;

/**
 *  This Class is Responsible for Creating a GUI
 *  Window Form Which Displays a Directory Screen
 *  allowing the Current User to Choose their
 *  Designation. A User can choose to Either
 *  Login as an Instructor or a Student by clicking
 *  the corresponding Button within the Form. Once
 *  this Event Occurs, a Login Credentials Pop Up
 *  Message Form will appear.
 * 
 *  @date       November 10 2020
 *  @author     Tyler Fontana
 *  @version    1.0.2
 */
public class DirectoryScreen extends javax.swing.JFrame {

    /**
     *  A Basic Constructor Method Used to
     *  invoke the GUI Form Creation Method
     *  in addition to Initializing and
     *  Executing a Background SwingWorker
     *  Thread. The SwingWorker Thread is
     *  responsible for Invoking the Iteration
     *  to the Next GUI Window in the Application's
     *  Sequence.
     */
    public DirectoryScreen() {
        // Execute the SwingWorker Thread.
        taskHandler.execute();
        /**
         * Pack and Arrange the Components 
         * Within the GUI Window Form.
        **/
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mothership Attendance (Desktop Edition)");

        jPanel1.setBackground(new java.awt.Color(190, 217, 238));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMaximumSize(new java.awt.Dimension(900, 656));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 656));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 656));
        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        jPanel2.setMaximumSize(new java.awt.Dimension(900, 656));
        jPanel2.setMinimumSize(new java.awt.Dimension(900, 656));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new javax.swing.OverlayLayout(jPanel2));
        jPanel1.add(jPanel2);

        jPanel3.setOpaque(false);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/TeacherButtonLayout_291x291.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/StudentButtonLayout_291x291.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 898, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(104, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(503, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(502, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(103, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 654, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(317, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(317, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(44, Short.MAX_VALUE)))
        );

        jPanel1.add(jPanel3);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setOpaque(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/MotherShipAttendanceScaled.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 18)); // NOI18N
        jLabel4.setText("Welcome to Mothership Attendance!");

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        jLabel5.setText("This Application Uses a TCP Server/Client Connection");

        jLabel6.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        jLabel6.setText("Interface In Order to Record Student Attendance Information.");

        jLabel7.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        jLabel7.setText("Please Begin By Choosing Your Designation Below:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 898, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(356, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addContainerGap(356, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(310, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addContainerGap(304, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(249, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(225, 225, 225)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(223, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(196, 196, 196)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(261, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(237, 237, 237)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 654, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(477, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(166, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(447, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(194, 194, 194)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(426, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(222, 222, 222)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(399, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(249, 249, 249)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(372, Short.MAX_VALUE)))
        );

        jPanel1.add(jPanel6);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/BackgroundDirectoryScreen900x656.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 656, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        /* Get the Size of the Current JFrame.
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        // Create new Point 
        Point middle = new Point(screenSize.width / 2, screenSize.height / 2);
        // Create new Point 
        Point newLocation = new Point(middle.x - (this.getWidth() / 2), middle.y - (this.getHeight() / 2));
        // Places the JFrame window in middle of the screen.
        this.setLocation(newLocation);*/
        
        this.setLocation(windowTracker.getMainWindowLocation());
        
        Point temp = new Point(windowTracker.getMainWindowLocation());
        double x = temp.getX() + 250.0;
        double y = temp.getY() + 245.0;
        windowTracker.setMiniWindowLocation(new Point((int) x, (int) y));

        pack();
    }// </editor-fold>                        

    /**
     *  This Method is Invoked Whenever the User Clicks Upon
     *  the "Instructor" JButton Located at the Bottom of the
     *  GUI Window's Form.
     * 
     *  @param evt              The Action of the User Clicking
     *                          Upon the JButton.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        /**
         * Spawn a New Instance of the Credintials Screen
         * GUI Class. This Form is Used to Allow the Current
         * User to Login or Create an account as an Instructor. 
         */
        CredintialsScreen credit = new CredintialsScreen();
        
        /**
         * Set the Synchronized Designation Overhead String
         * Variable as the word Instructor. We can Refer to
         * this Later on to determine what type of Account
         * the User is Trying to Login in to.
         */
        tracker.setCurrentDesignation("Instructor");
        /**
         * Set the Current Location of the Directory Screen
         * GUI Window. This will be used in Determining where
         * the new Smaller Credintials Window will be spawned.
         */
        setWindowLocation();
        /**
         * Show the New Instance of the Credintials Screen
         * Window.
         */
        credit.setVisible(true);
    }                                        

    /**
     *  This Method is Invoked Whenever the User Clicks Upon
     *  the "Student" JButton Located at the Bottom of the
     *  GUI Window's Form.
     * 
     *  @param evt              The Action of the User Clicking
     *                          Upon the JButton.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        /**
         * Spawn a New Instance of the Credintials Screen
         * GUI Class. This Form is Used to Allow the Current
         * User to Login or Create an account as an Instructor. 
         */
        CredintialsScreen credit = new CredintialsScreen();
        /**
         * Set the Synchronized Designation Overhead String
         * Variable as the word Instructor. We can Refer to
         * this Later on to determine what type of Account
         * the User is Trying to Login in to.
         */
        tracker.setCurrentDesignation("Student");
        /**
         * Set the Current Location of the Directory Screen
         * GUI Window. This will be used in Determining where
         * the new Smaller Credintials Window will be spawned.
         */
        setWindowLocation();
        /**
         * Show the New Instance of the Credintials Screen
         * Window.
         */
        credit.setVisible(true);
    }
    
    /**
     *  This Method is Used to Calculate Where the Current
     *  Directory Screen GUI Window is Located in Regards to
     *  the Current Machine's Screen. If the Window is Located
     *  outside of the Visible Area, then the new Pop-Up Window
     *  will be spawned in the Middle of the Screen. Otherwise,
     *  it will be spawned in the Middle of the Directory Screen
     *  GUI's Form Regardless of its Current Position.
     */
    private void setWindowLocation() {
        /**
         * Get the Screen Size of the Current Machine that the
         * Application is Operating On.
        **/
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        // Retrieve the Screen Height Integer Value.
        int screenHeight = screenSize.height;
        // Retrieve the Screen Width Integer Value.
        int screenWidth = screenSize.width;
        
        /**
         * // If the Current Directory Screen GUI Window is Located Outside
         * // of the Current Machine's Visible Screen Area, set the Location
         * // as the value of null, so that the new Window will be Spawned
         * // in the Middle of the Screen instead.
         */
        if ((getX() < 0) || (getX() > (screenWidth - 900)) || getY() > (screenHeight - 700)) {
            // Set the Synchronized Location Variable as Null
            windowTracker.setMainWindowLocation(null);
        }
        /**
         * // If the Current Directory Screen GUI Instance is Still Fully
         * // Visible within the Current Machine's Screen Area, then Record
         * // its Location so that it may be used in Spawning Pop-Up Message
         * // GUI Instances.
         */
        else  {
            Point remeberLocation = new Point(getX(), getY());
            /**
             * // Set the Synchronized Location Variable as the
             * // Current Point Object Retrieved by the GUI Window's
             * // Location Relative to the Current Machine's Screen
             * // Dimensions.
             */
            windowTracker.setMainWindowLocation(remeberLocation);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DirectoryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DirectoryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DirectoryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DirectoryScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DirectoryScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration
    
    // Create Reference to Synchronized Window Location Tracker Overhead Class.
    public static WindowLocationTracker windowTracker = new WindowLocationTracker();
    // Create Global Instance of the Inner SwingWorker Thread Class.
    private TaskHandler taskHandler = new TaskHandler();
    // Create Reference to Synchronized Information Tracker Overhead Class.
    public TrackerObject tracker = new TrackerObject();

    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    private class TaskHandler extends SwingWorker<Void,Void> {
        /**
         * Method for Seperate EventQueue Thread
         * to Execute.
         **/
        @Override
        protected Void doInBackground() throws Exception {
            
            /**
             * Continously Loop Until the User has either been
             * Successful in the Login or Account Creation Process
             * for either the Student of Instructor Designation. Once
             * the Current GUI Form has Deemed their Account Creation
             * or Login Credintials as Satisfactory, a Synchronized
             * Boolean Variable from the Overhead Information Tracker
             * Class will alert the Current Thread to Continue on to
             * the MainScreen of the Application.
             */
            while (true) {
                /**
                 * If the Synchronized Continue to Main Screen Boolean Variable
                 * has been Triggered by the Login / Account Creation GUI Form,
                 * and the User has chosen the Instructor Designation, then Create
                 * a new Instance of the Instructor's MainScreen GUI Form and
                 * make it Visible to the User.
                 */
                if (tracker.getContinueToMainStatus() == true && tracker.getCurrentDesignation().equalsIgnoreCase("Instructor")) {
                    /**
                     * Spawn New Instance of the Instructor's Main Screen 
                     * GUI Class.
                     */
                    MainScreen main = new MainScreen();
                    /**
                     * Save the Reference to this GUI Class Instance
                     * in the Synchronized Information Class.
                    **/
                    tracker.setMainScreenInstance(main);
                    /**
                     * Show the New Instructor Main Screen Instance
                     * to the User.
                    **/
                    main.setVisible(true);
                    // Dispose of the Current Directory Screen GUI Instance.
                    dispose();
                    /**
                     * Break From the Loop and End the
                     * Execution of the SwingWorker Thread.
                    **/
                    break;
                }
                /**
                 * If the Synchronized Continue to Main Screen Boolean Variable
                 * has been Triggered by the Login / Account Creation GUI Form,
                 * and the User has chosen the Student Designation, then Create
                 * a new Instance of the Student's MainScreen GUI Form and
                 * make it Visible to the User.
                 */
                else if (tracker.getContinueToMainStatus() == true && tracker.getCurrentDesignation().equalsIgnoreCase("Student")) {
                    /**
                     * Spawn New Instance of the Student's Main Screen 
                     * GUI Class.
                     */
                    MainScreenStudent main = new MainScreenStudent();
                    /**
                     * Save the Reference to this GUI Class Instance
                     * in the Synchronized Information Class.
                    **/
                    tracker.setMainScreenStudentInstance(main);
                    /**
                     * Show the New Instructor Main Screen Instance
                     * to the User.
                    **/
                    main.setVisible(true);
                    // Dispose of the Current Directory Screen GUI Instance.
                    dispose();
                    /**
                     * Break From the Loop and End the
                     * Execution of the SwingWorker Thread.
                    **/
                    break;
                }
            }

            /**
             * We will always Return a Null
             * Value for any SwingWorker Thread.
             */
            return null;
        }
    }
}

