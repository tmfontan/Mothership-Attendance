/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *  This Class is Responsible for Creating a JPanel
 *  Component which will be placed within the Management
 *  Tab of the MainScreen GUI Class. This JPanel contains
 *  Components which allow for the Instructor to Find
 *  Classes which are Currently Unlinked within the
 *  Database. The Instructor can choose to then Link
 *  the Class, and all of its Associated Student's to
 *  his or her Account.
 * 
 *  @date       November 14 2020
 *  @author     Tyler Fontana
 *  @version    1.0.2
 * 
 */
public class LinkClassesPanel extends javax.swing.JPanel {

    /**
     *  This Method Creates a New Instance
     *  of the Link Classes JPanel Form by
     *  invoking the initComponents() method
     *  which is Responsible for Arranging and 
     *  Positioning all of the Components into
     *  the JPanel Window.
     */
    public LinkClassesPanel() {
        // Create the JPanel Form.
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel18 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox<>();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox<>();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel20 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox<>();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel21 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(829, 360));
        setMinimumSize(new java.awt.Dimension(829, 360));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(829, 360));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new javax.swing.OverlayLayout(this));

        jPanel6.setOpaque(false);

        jPanel7.setOpaque(false);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Select the Fields You Wish to Search For:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 751, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(8, Short.MAX_VALUE)))
        );

        jPanel8.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Field:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " -------------------------------- ", " A&S\t(Arts and Sciences)", " AADM\t(Arts Administration)", " ACCT\t(Accounting)", " AERO\t(Aerospace Studies)", " ANTH\t(Anthropology)", " ARTS\t(ARTS)", " BA\t(Business Administration - BA)", " BIOS\t(Biological Sciences)", " CHEM\t(Chemistry)", " CHIN\t(CHIN)", " COBA\t(Co-Operative Education - BADM)", " COED\t(COED)", " COEN\t(Co-Operative Education - ENGR)", " COLA\t(Co-Operative Education - LA)", " COSC\t(Co-Operative Education - SC)", " CSCI\t(Computer Science)", " DEG_ONLY\t(DEG_ONLY)", " DURB\t(Urban Studies-DURB)", " ECON\t(Economics)", " EDAD\t(Educational Administration)", " EDCI\t(Curriculum and Instruction)", " EDFR\t(Educ Foundations and Res-EDFR)", " EDGC\t(Counselor Education)", " EDHP\t(Human Performance-EDHP)", " EDHS\t(Health Promotion-EDHS)", " EDLS\t(Library Science)", " EDSP\t(Spec Educ and Habilitative Svcs)", " EDUC\t(Education)", " EES\t(Earth and Environmental Sci-EES)", " ENAS\t(Engineering and Applied Science)", " ENCE\t(Civil and Environmental Engr)", " ENCM\t(ENCM)", " ENEE\t(Electrical Engineering)", " ENGL\t(English)", " ENGR \t(Engineering)", " ENME \t(Mechanical Engineering)", " ENMG \t(Engineering Management)", " FA \t(Fine Arts)", " FIN \t(Finance)", " FREN \t(French)", " FTA \t(Film and Theatre)", " GEOG \t(Geography)", " GER \t(German)", " HCM \t(Health Care Management)", " HIST \t(History)", " HRT \t(Hotel, Rest and Tourism Adm)", " HUMS \t(HUMS)", " IDS \t(Interdisciplinary Studies)", " IS \t(International Studies)", " ITAL \t(Italian)", " JAPN \t(Japanese)", " JOUR \t(Journalism)", " LAT \t(Latin)", " MANG \t(Management)", " MATH \t(Mathematics)", " MILS \t(Military Science - MILS)", " MKT \t(Marketing)", " MURP \t(Urban and Regional Planning(M))", " MUS \t(Music)", " NAME \t(Naval Arch and Marine Engr)", " NAVS \t(Naval Science - NAVS)", " ORGL \t(ORGL)", " PADM \t(Public Administration)", " PHIL \t(Philosophy)", " PHYS \t(Physics)", " POLI \t(Political Science)", " PPEL \t(PPEL)", " PSYC \t(Psychology)", " QMBE \t(Quant Meth - Bus and Econ)", " ROML \t(Romance Languages)", " SOC \t(Sociology)", " SPAN \t(Spanish)", " TEMP\t(Testing Purposes - DO NOT USE)", " TRNS \t(Transportation)", " UNIV \t(Univ)", " URBN \t(Urban Studies - URBN)", " WGS \t(Womens and Gender Studies)" }));
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });

        jCheckBox1.setToolTipText("");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jCheckBox1)
                    .addContainerGap(347, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addComponent(jCheckBox1)
                    .addGap(0, 4, Short.MAX_VALUE)))
        );

        jComboBox1.addPopupMenuListener(new BoundsPopupMenuListener());

        jPanel18.setOpaque(false);

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Semester:");

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " -------------------------------- ", " SPRING", " SUMMER", " FALL", " WINTER" }));
        jComboBox5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox5FocusGained(evt);
            }
        });

        jCheckBox2.setToolTipText("");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel18Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jCheckBox2)
                    .addContainerGap(347, Short.MAX_VALUE)))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel18Layout.createSequentialGroup()
                    .addComponent(jCheckBox2)
                    .addGap(0, 4, Short.MAX_VALUE)))
        );

        jComboBox1.addPopupMenuListener(new BoundsPopupMenuListener());

        jPanel19.setOpaque(false);

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Section:");

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " -------------------------------- ", " 001", " 002", " 003", " 004", " 005", " 006", " 007", " 008", " 009", " 010", " 011", " 012" }));
        jComboBox6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox6FocusGained(evt);
            }
        });

        jCheckBox3.setToolTipText("");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel19Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jCheckBox3)
                    .addContainerGap(347, Short.MAX_VALUE)))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel19Layout.createSequentialGroup()
                    .addComponent(jCheckBox3)
                    .addGap(0, 4, Short.MAX_VALUE)))
        );

        jComboBox1.addPopupMenuListener(new BoundsPopupMenuListener());

        jPanel20.setOpaque(false);

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Type:");

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " -------------------------------- ", " Lecture", " Laboratory", " Lecture/Lab", " Thesis Research", " Independent Study", " Seminar", " Internship", " Online" }));
        jComboBox7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox7FocusGained(evt);
            }
        });

        jCheckBox4.setToolTipText("");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel20Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jCheckBox4)
                    .addContainerGap(347, Short.MAX_VALUE)))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel20Layout.createSequentialGroup()
                    .addComponent(jCheckBox4)
                    .addGap(0, 4, Short.MAX_VALUE)))
        );

        jComboBox1.addPopupMenuListener(new BoundsPopupMenuListener());

        jPanel21.setOpaque(false);

        jButton2.setText("Search");
        jButton2.setToolTipText("<html><center>Search For a Specific Un-Linked Class using<br></br>the Search Criteria Options Above.</center></html>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Search All");
        jButton3.setToolTipText("<html><center>Retrieve all Classes which are Currently<br></br>Un-Linked Using no Search Criteria.</center></html>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(37, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(25, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(423, 423, 423)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(205, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(231, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(210, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(21, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(293, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(84, 84, 84)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(249, Short.MAX_VALUE)))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(164, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(145, Short.MAX_VALUE)))
        );

        add(jPanel6);

        jPanel1.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please Select An Option From the List Below:");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/Loader35x35.gif"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/Loader35x35.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(236, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(202, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(274, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(520, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(545, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(249, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(25, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(304, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(163, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(162, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(293, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );

        add(jPanel1);

        jPanel2.setOpaque(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Field", "Class Number", "Title", "Type", "Section", "Semester", "Year"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(40, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(35, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(66, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(88, Short.MAX_VALUE)))
        );

        add(jPanel2);

        jPanel3.setOpaque(false);

        jButton4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jButton4.setText("Link Class");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/returnButton37x37.png"))); // NOI18N
        jLabel4.setToolTipText("<html><center>Click This Button to Return<br></br>to the Search Bar.</center></html>");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(583, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(83, 83, 83)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(757, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addContainerGap(35, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(291, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(29, 29, 29)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(294, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );

        add(jPanel3);

        jPanel5.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Class: Analysis of Algorithms");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(40, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(296, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(294, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(28, Short.MAX_VALUE)))
        );

        add(jPanel5);

        jPanel4.setOpaque(false);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/PanelBackdrop829x360.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel4);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
        jComboBox1.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jComboBox1FocusGained

    private void jComboBox5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox5FocusGained
        jComboBox5.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox5.setBackground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jComboBox5FocusGained

    private void jComboBox6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox6FocusGained
        jComboBox6.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox6.setBackground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jComboBox6FocusGained

    private void jComboBox7FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox7FocusGained
        jComboBox7.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox7.setBackground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jComboBox7FocusGained

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected() == true) {
            jLabel6.setEnabled(true);
            jComboBox1.setEnabled(true);
        }
        else {
            jLabel6.setEnabled(false);
            jComboBox1.setEnabled(false);
            jComboBox1.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected() == true) {
            jLabel13.setEnabled(true);
            jComboBox5.setEnabled(true);
        }
        else {
            jLabel13.setEnabled(false);
            jComboBox5.setEnabled(false);
            jComboBox5.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        if (jCheckBox3.isSelected() == true) {
            jLabel14.setEnabled(true);
            jComboBox6.setEnabled(true);
        }
        else {
            jLabel14.setEnabled(false);
            jComboBox6.setEnabled(false);
            jComboBox6.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        if (jCheckBox4.isSelected() == true) {
            jLabel15.setEnabled(true);
            jComboBox7.setEnabled(true);
        }
        else {
            jLabel15.setEnabled(false);
            jComboBox7.setEnabled(false);
            jComboBox7.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Create and Execute Background Thread
        // Meant to Control the Heavy Computation
        // Tasks so the Main Event Queue Thread
        // can Focus on Maintaining the Form's
        // Appearance.
        new TaskHandler(0).execute();
    }//GEN-LAST:event_formComponentShown

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Create and Execute Background Thread
        // Meant to Control the Heavy Computation
        // Tasks so the Main Event Queue Thread
        // can Focus on Maintaining the Form's
        // Appearance.
        new TaskHandler(2).execute();
        
        // Show the Loader GIF Image While the Task
        // Continues to Execute.
        setSearchLoaderImageVisibility(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Create and Execute Background Thread
        // Meant to Control the Heavy Computation
        // Tasks so the Main Event Queue Thread
        // can Focus on Maintaining the Form's
        // Appearance.
        new TaskHandler(1).execute();
        
        // Show the Loader GIF Image While the Task
        // Continues to Execute.
        setSearchLoaderImageVisibility(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Create and Execute Background Thread
        // Meant to Control the Heavy Computation
        // Tasks so the Main Event Queue Thread
        // can Focus on Maintaining the Form's
        // Appearance.
        new TaskHandler(3).execute();
        
        // Show the Loader GIF Image While the Task
        // Continues to Execute.
        setLinkLoaderImageVisibility(true);
        // Disable the Components Associated with
        // the Search Table Until the Linking
        // Process has Finished Executing.
        setTableComponentEnablementStatus(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
            
        CustomJTableModelUnlinkedClasses model = (CustomJTableModelUnlinkedClasses) jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();

        selectedClassType = model.getList().get(selectedIndex);
        
        System.out.println("JTable 1 Clicked: " + selectedClassType.getClassTitle());

        String formattedHtml = "<html><left>Class: <font color=#00cb2b>" + selectedClassType.toString() + "</font></left></html>";
        jLabel3.setText(formattedHtml);

        setLinkClassComponentsVisible(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        resetSearchFields();
        
        setSearchComponentsVisible(true);
        setLinkClassComponentsVisible(false);
        setTableComponentsVisible(false);
        resetTableInformation();
        defaultTableModelInUse = true;
    }//GEN-LAST:event_jLabel4MouseClicked

    public void setSearchLoaderImageVisibility(boolean value) {
        jLabel7.setVisible(value);
    }
    
    public void setLinkLoaderImageVisibility(boolean value) {
        jLabel8.setVisible(value);
    }
    
    public String convertClassFieldForComparison(String field) {
        String[] modifiedField = field.split(" ");
        field = modifiedField[1];

        modifiedField = field.split("\t");
        field = modifiedField[0];

        field = field.trim();
        return field;
    }
    
    public void createTableNoSearchConditions() {
        
        unlinkedClassList = manager.findUnlinkedClasses();
        CustomJTableModelUnlinkedClasses unlinkedClassesTableModel = new CustomJTableModelUnlinkedClasses(unlinkedClassList);
        
        jTable1.setModel(unlinkedClassesTableModel);
        jTable1.getTableHeader().setReorderingAllowed(false);
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                 Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                 int align = DefaultTableCellRenderer.CENTER;
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 0, 13));
                 return tableCellRendererComponent;
            }
        };
        
        DefaultTableCellRenderer headerRendererBlack = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                 Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                 int align = DefaultTableCellRenderer.CENTER;
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(0, 0, 0));
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                 return tableCellRendererComponent;
            }
        };
        
        DefaultTableCellRenderer headerRendererRed = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                 Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                 int align = DefaultTableCellRenderer.CENTER;
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(255, 0, 0));
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                 ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                 return tableCellRendererComponent;
            }
        };

        jTable1.getColumnModel().getColumn(0).setCellRenderer(renderer);
        jTable1.getColumnModel().getColumn(1).setCellRenderer(renderer);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(renderer);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(renderer);
        jTable1.getColumnModel().getColumn(4).setCellRenderer(renderer);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(renderer);
        jTable1.getColumnModel().getColumn(6).setCellRenderer(renderer);
        
        jTable1.getColumnModel().getColumn(0).setHeaderRenderer(headerRendererBlack);
        jTable1.getColumnModel().getColumn(1).setHeaderRenderer(headerRendererRed);
        jTable1.getColumnModel().getColumn(2).setHeaderRenderer(headerRendererBlack);
        jTable1.getColumnModel().getColumn(3).setHeaderRenderer(headerRendererRed);
        jTable1.getColumnModel().getColumn(4).setHeaderRenderer(headerRendererBlack);
        jTable1.getColumnModel().getColumn(5).setHeaderRenderer(headerRendererRed);
        jTable1.getColumnModel().getColumn(6).setHeaderRenderer(headerRendererBlack);
        
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        // Adjust Column Widths According to Largest Piece of Data Contained
        for (int column = 0; column < jTable1.getColumnCount(); column++)
        {
            TableColumn tableColumn = jTable1.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();
 
            for (int row = 0; row < jTable1.getRowCount(); row++)
            {
                TableCellRenderer cellRenderer = jTable1.getCellRenderer(row, column);
                Component c = jTable1.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + jTable1.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows

                if (preferredWidth >= maxWidth)
                {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
        
        // Resize Selected Columns to Show Full Column Name
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(150);

        jTable1.setRowHeight(30);
    }
    
    public void createTableBySearchConditions(String field, String semester, String section, String type) {
        
        unlinkedClassList = manager.findUnlinkedClasses();
        boolean[] searchProperties = {false, false, false, false};
        
        field = field.trim();
        semester = semester.trim();
        section = section.trim();
        type = type.trim();
        
        // Reset Table ArrayList
        unlinkedClassTypesBySearch = new ArrayList<ClassType>();
        
        if (field.equalsIgnoreCase("") == false) {
            System.out.println("Field Name: " + field);
            searchProperties[0] = true;
        }
        
        if (semester.equalsIgnoreCase("") == false) {
            System.out.println("Semester Name: " + semester);
            searchProperties[1] = true;
        }
        
        if (type.equalsIgnoreCase("") == false) {
            System.out.println("Type Name: " + type);
            searchProperties[2] = true;
        }
        
        if (section.equalsIgnoreCase("") == false) {
            System.out.println("Section Name: " + section);
            searchProperties[3] = true;
        }
        
        System.out.println("Field: " + field + " Semester: " + semester + " Section: " + section + " Type: " + type);

        System.out.println("searchProperties[0]" + searchProperties[0] + " " + "searchProperties[1]" + searchProperties[1] + " " + "searchProperties[2]" + searchProperties[2] + " " + "searchProperties[3]" + searchProperties[3] + " ");
        
        for (int i = 0; i < unlinkedClassList.size(); i++) {
            
            if (searchProperties[0] == true && searchProperties[1] == true && searchProperties[2] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)
                    && unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true && searchProperties[1] == true && searchProperties[2] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)
                    && unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true && searchProperties[2] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true && searchProperties[1] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[1] == true && searchProperties[2] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)
                    && unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true && searchProperties[1] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true && searchProperties[2] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[1] == true && searchProperties[2] == true) {
                if (unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)
                    && unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)) {
                    
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[1] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[2] == true && searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)
                    && unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[0] == true) {
                if (unlinkedClassList.get(i).getClassField().equalsIgnoreCase(field)) {
                    
                    System.out.println(i + " UnLinked Class List Field: " + unlinkedClassList.get(i).getClassField() + " Comparison: " + field);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[1] == true) {
                if (unlinkedClassList.get(i).getClassSemester().equalsIgnoreCase(semester)) {
                    
                    System.out.println(i + " UnLinked Class List Semester: " + unlinkedClassList.get(i).getClassSemester() + " Comparison: " + semester);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[2] == true) {
                if (unlinkedClassList.get(i).getClassStructureType().equalsIgnoreCase(type)) {
                    
                    System.out.println(i + " UnLinked Class List Type: " + unlinkedClassList.get(i).getClassStructureType() + " Comparison: " + type);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
            else if (searchProperties[3] == true) {
                if (unlinkedClassList.get(i).getClassSection().equalsIgnoreCase(section)) {
                    
                    System.out.println(i + " UnLinked Class List Section: " + unlinkedClassList.get(i).getClassSection() + " Comparison: " + section);
                    unlinkedClassTypesBySearch.add(unlinkedClassList.get(i));
                }
            }
        }
        
        System.out.println("Un Linked Classes List Size: " + unlinkedClassTypesBySearch.size());
        
        if (unlinkedClassTypesBySearch.size() == 0) {
            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();
            String formattedHTMLText = "<html><center>There are currently no unlinked classes associated with the chosen search type(s). Please check your Search Criteria and try again.</center></html>";
        
            wmlcsvso.jLabel6.setText(formattedHTMLText);
            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));
            
            resetTableInformation();
            defaultTableModelInUse = true;
            resetSearchFields();
            
            wmlcsvso.setVisible(true);
        }
        else {
            
            setSearchComponentsVisible(false);
            setTableComponentsVisible(true);
            
            CustomJTableModelUnlinkedClasses unlinkedClassesTableModel = new CustomJTableModelUnlinkedClasses(unlinkedClassTypesBySearch);
        
            jTable1.setModel(unlinkedClassesTableModel);
            jTable1.getTableHeader().setReorderingAllowed(false);

            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     int align = DefaultTableCellRenderer.CENTER;
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 0, 13));
                     return tableCellRendererComponent;
                }
            };

            DefaultTableCellRenderer headerRendererBlack = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     int align = DefaultTableCellRenderer.CENTER;
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(0, 0, 0));
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                     return tableCellRendererComponent;
                }
            };

            DefaultTableCellRenderer headerRendererRed = new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable arg0,Object arg1, boolean arg2, boolean arg3, int arg4, int arg5) {
                     Component tableCellRendererComponent = super.getTableCellRendererComponent(arg0, arg1, arg2, arg3, arg4, arg5);
                     int align = DefaultTableCellRenderer.CENTER;
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setHorizontalAlignment(align);
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setBackground(new java.awt.Color(255, 0, 0));
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setForeground(new java.awt.Color(255, 255, 255));
                     ((DefaultTableCellRenderer)tableCellRendererComponent).setFont(new java.awt.Font("Lucida Grande", 1, 13));
                     return tableCellRendererComponent;
                }
            };

            jTable1.getColumnModel().getColumn(0).setCellRenderer(renderer);
            jTable1.getColumnModel().getColumn(1).setCellRenderer(renderer);
            jTable1.getColumnModel().getColumn(2).setCellRenderer(renderer);
            jTable1.getColumnModel().getColumn(3).setCellRenderer(renderer);
            jTable1.getColumnModel().getColumn(4).setCellRenderer(renderer);
            jTable1.getColumnModel().getColumn(5).setCellRenderer(renderer);
            jTable1.getColumnModel().getColumn(6).setCellRenderer(renderer);

            jTable1.getColumnModel().getColumn(0).setHeaderRenderer(headerRendererBlack);
            jTable1.getColumnModel().getColumn(1).setHeaderRenderer(headerRendererRed);
            jTable1.getColumnModel().getColumn(2).setHeaderRenderer(headerRendererBlack);
            jTable1.getColumnModel().getColumn(3).setHeaderRenderer(headerRendererRed);
            jTable1.getColumnModel().getColumn(4).setHeaderRenderer(headerRendererBlack);
            jTable1.getColumnModel().getColumn(5).setHeaderRenderer(headerRendererRed);
            jTable1.getColumnModel().getColumn(6).setHeaderRenderer(headerRendererBlack);

            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            // Adjust Column Widths According to Largest Piece of Data Contained
            for (int column = 0; column < jTable1.getColumnCount(); column++)
            {
                TableColumn tableColumn = jTable1.getColumnModel().getColumn(column);
                int preferredWidth = tableColumn.getMinWidth();
                int maxWidth = tableColumn.getMaxWidth();

                for (int row = 0; row < jTable1.getRowCount(); row++)
                {
                    TableCellRenderer cellRenderer = jTable1.getCellRenderer(row, column);
                    Component c = jTable1.prepareRenderer(cellRenderer, row, column);
                    int width = c.getPreferredSize().width + jTable1.getIntercellSpacing().width;
                    preferredWidth = Math.max(preferredWidth, width);

                    //  We've exceeded the maximum width, no need to check other rows

                    if (preferredWidth >= maxWidth)
                    {
                        preferredWidth = maxWidth;
                        break;
                    }
                }

                tableColumn.setPreferredWidth(preferredWidth);
            }

            // Resize Selected Columns to Show Full Column Name
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(150);

            jTable1.setRowHeight(30);
        }
    }
    
    public void setSearchComponentsVisible(boolean value) {
        jLabel5.setVisible(value);
        jLabel6.setVisible(value);
        jLabel13.setVisible(value);
        jLabel14.setVisible(value);
        jLabel15.setVisible(value);
        jButton2.setVisible(value);
        jButton3.setVisible(value);
        jComboBox1.setVisible(value);
        jComboBox5.setVisible(value);
        jComboBox6.setVisible(value);
        jComboBox7.setVisible(value);
        jCheckBox1.setVisible(value);
        jCheckBox2.setVisible(value);
        jCheckBox3.setVisible(value);
        jCheckBox4.setVisible(value);
    }
    
    public void resetSearchFields() {
        jComboBox1.setSelectedIndex(0);
        jComboBox5.setSelectedIndex(0);
        jComboBox6.setSelectedIndex(0);
        jComboBox7.setSelectedIndex(0);
        
        jComboBox1.setEnabled(false);
        jComboBox5.setEnabled(false);
        jComboBox6.setEnabled(false);
        jComboBox7.setEnabled(false);
        
        jLabel6.setEnabled(false);
        jLabel13.setEnabled(false);
        jLabel14.setEnabled(false);
        jLabel15.setEnabled(false);
        
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
    }
    
    public void setTableComponentsVisible(boolean value) {
        jLabel1.setVisible(value);
        jScrollPane1.setVisible(value);
        jTable1.setVisible(value);
        jLabel4.setVisible(value);
    }
    
    public void setLinkClassComponentsVisible(boolean value) {
        jButton4.setVisible(value);
        jLabel3.setVisible(value);
    }
    
    public void setTableComponentEnablementStatus(boolean value) {
        jLabel1.setEnabled(value);
        jScrollPane1.setEnabled(value);
        jTable1.setEnabled(value);
        jLabel4.setEnabled(value);
        jButton4.setEnabled(value);
    }
    
    public void resetTableInformation() {
        
        String[] columnNames = {"Field", "Class Number", "Title", "Type", "Section", "Semester", "Year"};
        
        DefaultTableModel model = new DefaultTableModel();
        
        model.setColumnCount(7);
        model.setColumnIdentifiers(columnNames);
        
        jTable1.setModel(model);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    public static javax.swing.JComboBox<String> jComboBox1;
    public static javax.swing.JComboBox<String> jComboBox5;
    public static javax.swing.JComboBox<String> jComboBox6;
    public static javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    public DatabaseManagerMySQL manager = new DatabaseManagerMySQL();
    public TrackerObject tracker = new TrackerObject();
    public ArrayList<ClassType> unlinkedClassList = new ArrayList<ClassType>();
    public ArrayList<ClassType> unlinkedClassTypesBySearch = new ArrayList<ClassType>();
    public ServerInformationTracker serverTracker = new ServerInformationTracker();
    public boolean defaultTableModelInUse = false;
    public ClassType selectedClassType;
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    public class TaskHandler extends SwingWorker<Void,Void> {
        
        // This is a Local Variable Used to
        // Set the Task Number of the Created
        // Thread. This Number will tell the Thread
        // Which Operation to Execute in the
        // doInBackground() Method.
        public int task;
        
        /**
         *  This Constructor is Used to Create a
         *  new TaskHandler Event Queue Thread Object
         *  and set the Task Number which determines
         *  what the new Thread will do.
         * 
         *  @param value        The Integer containing the 
         *                      Task Number which Determines
         *                      the Thread's Execution Role.
         */
        public TaskHandler(int value) {
            // Set the Task Number
            task = value;
        }
        
        /**
         *  This method will be executed once a New Instance
         *  of the TaskHandler Swing Interface is Created and
         *  the execute() method is invoked. The newly created Thread
         *  will execute the Code Block Corresponding with the
         *  Task Number it is Initialized With.
         * 
         *  @return             Returns a Null Value seeing as this
         *                      is a Void Event Queue Thread Execution
         *                      method. The doInBackground() Method
         *                      will never have a different Return Value.
         * 
         *  @throws Exception   Possible Initialization Exception That
         *                      may happen due to Thread Concurrency.
         */
        @Override
        protected Void doInBackground() throws Exception {
            
            // This Thread is Executed When the Link Classes
            // Panel is Re-shown Within the Main GUI Window Form.
            if (task == 0) {
                setSearchComponentsVisible(true);
                setTableComponentsVisible(false);
                setLinkClassComponentsVisible(false);
                setSearchLoaderImageVisibility(false);
                setLinkLoaderImageVisibility(false);

                resetTableInformation();
                defaultTableModelInUse = true;
            }
            // This Thread is Executed When a User Clicks Upon the
            // 'Search' Button. If the User hasnt Selected any Search
            // Criteria at this Point, a Pop-Up Warning Message will be
            // shown. Otherwise, this Background Thread will Create a
            // List of All Classes which Currently don't have an
            // Instructor's Unique ID Number Linked to them Via
            // the InstructorClassLink Table in the Database.
            if (task == 1) {
                
                // Here, we will reset the Background and Font Colors
                // of the 'Field', 'Semester', 'Section', and 'Type'
                // Search Criteria Drop Down Menu's In Case they have
                // Been Highlighted due to a Previous Error on the
                // User's Part.
                jComboBox1.setForeground(new java.awt.Color(0, 0, 0));
                jComboBox1.setBackground(new java.awt.Color(255, 255, 255));
                jComboBox5.setForeground(new java.awt.Color(0, 0, 0));
                jComboBox5.setBackground(new java.awt.Color(255, 255, 255));
                jComboBox6.setForeground(new java.awt.Color(0, 0, 0));
                jComboBox6.setBackground(new java.awt.Color(255, 255, 255));
                jComboBox7.setForeground(new java.awt.Color(0, 0, 0));
                jComboBox7.setBackground(new java.awt.Color(255, 255, 255));

                // If the User has Clicked the 'Search' Button But Hasn't Selected
                // any of the Search Critera Options, then show a Pop-Up Warning
                // Message.
                if (jCheckBox1.isSelected() == false && jCheckBox2.isSelected() == false && jCheckBox3.isSelected() == false && jCheckBox4.isSelected() == false) {
                    // 
                    WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                    wmlcsvso.setVisible(true);
                }
                else {

                    boolean conditionCheckValidated = true;

                    if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {

                        boolean[] indexChecker = {false, false, false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Semester Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[2] = true;
                        }

                        // Type Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[3] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[2] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For Each of the Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field, Semester, and Section Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field, Semester, and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[2] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field, Section, and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[2] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester, Section, and Type Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Semester Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Section Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Section Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[2] == true && indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section and Type Search Categories.</center></html>";

                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[3] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true) {

                        boolean[] indexChecker = {false, false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Semester Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[2] = true;
                        }


                        if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field, Semester, and Section Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Semester Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Section Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Section Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox1.isSelected() == true && jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {

                        boolean[] indexChecker = {false, false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        // Type Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[2] = true;
                        }


                        if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field, Section, and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Section Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section and Type Search Categories.</center></html>";

                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    //////////////////
                    ////////
                    else if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true && jCheckBox4.isSelected() == true) {

                        boolean[] indexChecker = {false, false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        // Type Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[2] = true;
                        }


                        if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field, Semester, and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Semester Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Type Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    ///////////////
                    ///////////////
                    else if (jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {

                        boolean[] indexChecker = {false, false, false};
                        String errorMessageText = "";

                        // Semester Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        // Type Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[2] = true;
                        }


                        if (indexChecker[0] == true && indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester, Section, and Type Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Section Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Type Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true && indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section and Type Search Categories.</center></html>";

                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[2] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    //////////////////////////////////////////
                    /////////////////////////////////////////
                    else if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true) {
                        boolean[] indexChecker = {false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Semester Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox1.isSelected() == true && jCheckBox3.isSelected() == true) {

                        boolean[] indexChecker = {false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Section Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox1.isSelected() == true && jCheckBox4.isSelected() == true) {

                        boolean[] indexChecker = {false, false};
                        String errorMessageText = "";

                        // Field Search Check
                        if (jCheckBox1.isSelected() == true && jComboBox1.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Type Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field and Type Search Categories.</center></html>";

                            jComboBox1.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";

                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true) {

                        boolean[] indexChecker = {false, false};
                        String errorMessageText = "";

                        // Semester Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Section Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox2.isSelected() == true && jCheckBox4.isSelected() == true) {
                        boolean[] indexChecker = {false, false};
                        String errorMessageText = "";

                        // Semester Search Check
                        if (jCheckBox2.isSelected() == true && jComboBox5.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Section Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester and Type Search Categories.</center></html>";

                            jComboBox5.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";

                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {

                        boolean[] indexChecker = {false, false};
                        String errorMessageText = "";

                        // Section Search Check
                        if (jCheckBox3.isSelected() == true && jComboBox6.getSelectedIndex() == 0) {
                            indexChecker[0] = true;
                        }

                        // Type Search Check
                        if (jCheckBox4.isSelected() == true && jComboBox7.getSelectedIndex() == 0) {
                            indexChecker[1] = true;
                        }

                        if (indexChecker[0] == true && indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section and Type Search Categories.</center></html>";

                            jComboBox6.setBackground(Color.red);
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[0] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";

                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }
                        else if (indexChecker[1] == true) {
                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";

                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox1.isSelected() == true) {

                        boolean indexChecker = false;
                        String errorMessageText = "";

                        if (jComboBox1.getSelectedIndex() == 0) {

                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Field Search Category.</center></html>";
                            jComboBox1.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox2.isSelected() == true) {

                        boolean indexChecker = false;
                        String errorMessageText = "";

                        if (jComboBox5.getSelectedIndex() == 0) {

                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Semester Search Category.</center></html>";
                            jComboBox5.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox3.isSelected() == true) {

                        boolean indexChecker = false;
                        String errorMessageText = "";

                        if (jComboBox6.getSelectedIndex() == 0) {

                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Section Search Category.</center></html>";
                            jComboBox6.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }
                    else if (jCheckBox4.isSelected() == true) {

                        boolean indexChecker = false;
                        String errorMessageText = "";

                        if (jComboBox7.getSelectedIndex() == 0) {

                            errorMessageText = "<html><center>Please Select A Valid Option For the Class Type Search Category.</center></html>";
                            jComboBox7.setBackground(Color.red);

                            conditionCheckValidated = false;
                        }

                        if (conditionCheckValidated == false) {
                            WarningMessageLinkClassesSelectValidSearchOption wmlcsvso = new WarningMessageLinkClassesSelectValidSearchOption();

                            wmlcsvso.jLabel6.setText(errorMessageText);
                            wmlcsvso.jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12));

                            wmlcsvso.setVisible(true);
                        }
                    }

                    if (conditionCheckValidated == true) {
                        int counter = 0;

                        String field = "";
                        String type = "";
                        String semester = "";
                        String section = "";

                        if (jCheckBox1.isSelected() == true) {
                            counter++;
                        }

                        if (jCheckBox2.isSelected() == true) {
                            counter++;
                        }

                        if (jCheckBox3.isSelected() == true) {
                            counter++;
                        }

                        if (jCheckBox4.isSelected() == true) {
                            counter++;
                        }

                        if (counter > 1) {

                            if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                            else if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                            else if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true && jCheckBox4.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                            }
                            else if (jCheckBox1.isSelected() == true && jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                            else if (jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                            else if (jCheckBox1.isSelected() == true && jCheckBox2.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                            }
                            else if (jCheckBox1.isSelected() == true && jCheckBox3.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                            else if (jCheckBox1.isSelected() == true && jCheckBox4.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                            }
                            else if (jCheckBox2.isSelected() == true && jCheckBox3.isSelected() == true) {
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                            else if (jCheckBox2.isSelected() == true && jCheckBox4.isSelected() == true) {
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                            }
                            else if (jCheckBox3.isSelected() == true && jCheckBox4.isSelected() == true) {
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                            }
                        }
                        else if (counter == 1) {

                            if (jCheckBox1.isSelected() == true) {
                                field = jComboBox1.getItemAt(jComboBox1.getSelectedIndex());
                            }
                            else if (jCheckBox2.isSelected() == true) {
                                semester = jComboBox5.getItemAt(jComboBox5.getSelectedIndex());
                                semester = semester.trim();
                            }
                            else if (jCheckBox3.isSelected() == true) {
                                section = jComboBox6.getItemAt(jComboBox6.getSelectedIndex());
                                section = section.trim();
                            }
                            else if (jCheckBox4.isSelected() == true) {
                                type = jComboBox7.getItemAt(jComboBox7.getSelectedIndex());
                                type = type.trim();
                            }
                        }

                        if (!field.equalsIgnoreCase("")) {
                            field = convertClassFieldForComparison(field);
                        }

                        setLinkClassComponentsVisible(false);
                        createTableBySearchConditions(field, semester, section, type);
                    }
                    else {
                        
                    }
                }
                
                setSearchLoaderImageVisibility(false);
            }
            else if (task == 2) {
                
                resetSearchFields();
                createTableNoSearchConditions();

                setSearchComponentsVisible(false);
                setLinkClassComponentsVisible(false);
                defaultTableModelInUse = false;

                setSearchLoaderImageVisibility(false);
                setTableComponentsVisible(true);
                
            }
            else if (task == 3) {
                boolean result = manager.createInstructorClassLink(selectedClassType.getClassID(), tracker.getCurrentInstructorInformation().getInstructorID());
        
                if (result == true) {

                    MainScreen main = serverTracker.getMainScreenInstance();
                    main.resetComboBoxInformation();

                    StatusMessageLinkClassOperationSuccess smlcos = new StatusMessageLinkClassOperationSuccess();
                    String formattedHtml = "<html><center>Class <font color=#00cb2b>" + selectedClassType.getClassTitle() + "</font> has been successfully linked to your Account.</center></html>";

                    smlcos.jLabel6.setText(formattedHtml);
                    smlcos.setVisible(true);

                    setLinkClassComponentsVisible(false);
                    setTableComponentsVisible(false);
                    resetTableInformation();
                    defaultTableModelInUse = true;

                    resetSearchFields();
                    setSearchComponentsVisible(true);
                    setLinkLoaderImageVisibility(false);
                    setTableComponentEnablementStatus(true);
                }
                else {
                    StatusMessageLinkClassOperationFailed smlcof = new StatusMessageLinkClassOperationFailed();
                    String formattedHtml = "<html><center>An error has occured while attempting to link the selected class to your account. Please try again later.</center></html>";

                    smlcof.jLabel6.setText(formattedHtml);
                    smlcof.setVisible(true);

                    setTableComponentsVisible(false);
                    resetTableInformation();
                    defaultTableModelInUse = true;

                    resetSearchFields();
                    setSearchComponentsVisible(true);
                    
                    setLinkLoaderImageVisibility(false);
                    setTableComponentEnablementStatus(true);
                }
            }
            
            // We will Always Return a Value of
            // Null Once the Event Queue Background
            // Thread has finished its Execution
            // Process.
            return null;
        }
    }
}
