/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Toolkit;
import javax.swing.Action;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultEditorKit;

/**
 *  This Class is Responsible for Creating
 *  a Pop-Up GUI Window Form Which Allows for
 *  the Current User to Either Login or Create
 *  an Account as an "Instructor" / "Student".
 * 
 *  @author     Tyler Fontana
 *  @date       November 3 2020
 *  @version    1.0.2
 */
public class CredintialsScreen extends javax.swing.JFrame {

    /**
     *  A Basic Constructor Method Used to
     *  invoke the GUI Form Creation Method
     *  which involves spawning the new JFrame
     *  object and positioning the Defined
     *  Components within it in addition to
     *  creating a reference to the Current
     *  GUI Window. Additionally, this Method
     *  is Used to Create the New Instance of
     *  the Credentials Screen Window.
     */
    public CredintialsScreen() {
        /**
         * Invoke the Method Used to Create and
         * Display the Credentials Screen GUI Window Form.
         **/
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Login Screen");
        setMaximumSize(new java.awt.Dimension(381, 213));
        setMinimumSize(new java.awt.Dimension(381, 213));
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel2.setMaximumSize(new java.awt.Dimension(381, 213));
        jPanel2.setMinimumSize(new java.awt.Dimension(381, 213));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(381, 213));

        jPasswordField1.setText("Enter Password");
        jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
        jPasswordField1.setMargin(new Insets(0, 5, 0, 0));
        jPasswordField1.setEchoChar((char)0);
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusLost(evt);
            }
        });

        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setText("Enter Username");
        jTextField1.setMargin(new Insets(0, 5, 0, 0));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Username:");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("Password:");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Please Enter The Required Information Below:");

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/createAccountButton147x37.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/loginbuttonscaled.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField1)
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel3.setMaximumSize(new java.awt.Dimension(381, 213));
        jPanel3.setMinimumSize(new java.awt.Dimension(381, 213));
        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(381, 213));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 8)); // NOI18N
        jLabel2.setText("Don't Have An Account?");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/loadingGif2.gif"))); // NOI18N
        jLabel3.setVisible(false);
        
        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("jLabel7");
        jLabel7.setVisible(false);
        
        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 381, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(31, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(196, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(217, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addContainerGap(135, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(119, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 213, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(131, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(56, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(151, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(25, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(127, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addContainerGap(80, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel3);

        jPanel1.setMaximumSize(new java.awt.Dimension(381, 213));
        jPanel1.setMinimumSize(new java.awt.Dimension(381, 213));
        jPanel1.setOpaque(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/BackgroundDirectory381x213.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setMaximumSize(new java.awt.Dimension(381, 213));
        jLabel1.setMinimumSize(new java.awt.Dimension(381, 213));
        jLabel1.setPreferredSize(new java.awt.Dimension(381, 213));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        
        JPopupMenu menu = new JPopupMenu();
        Action cut = new DefaultEditorKit.CutAction();
        cut.putValue(Action.NAME, "Cut");
        cut.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control X"));
        menu.add(cut);

        Action copy = new DefaultEditorKit.CopyAction();
        copy.putValue(Action.NAME, "Copy");
        copy.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control C"));
        menu.add(copy);

        Action paste = new DefaultEditorKit.PasteAction();
        paste.putValue(Action.NAME, "Paste");
        paste.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control V"));
        menu.add(paste);
        
        jTextField1.setComponentPopupMenu(menu);
        jPasswordField1.setComponentPopupMenu(menu);

        TrackerObject tracker = new TrackerObject();
        // Get the Size of the Current JFrame.
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        // Create new Point 
        Point middle = new Point(screenSize.width / 2, screenSize.height / 2);
        // Create new Point 
        Point newLocation = new Point(middle.x - (this.getWidth() / 2), middle.y - (this.getHeight() / 2));
        // Places the JFrame window in middle of the screen.
        this.setLocation(windowTracker.getMiniWindowLocation());
        
        pack();
        
        jButton1.requestFocusInWindow();
    }// </editor-fold>                        

    /**
     *  This Method is Automatically invoked whenever the Credential's
     *  Screen GUI Form is Initialized. It is responsible for saving
     *  a reference to the Current Instance of the Credential's GUI Form
     *  in the Synchronized Overhead Instance Reference Class. This
     *  Reference will be used at a later time to invoke changes within
     *  the Current Form from a Separate Class.
     * 
     *  @param evt                  The Action of the Credentials Screen
     *                              GUI Window Form First Being Initialized.
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        /**
         * Save a Reference to the Current Credentials Screen GUI
         * Window in the Synchronized Overhead Reference Retrieval Class.
        **/
        classInstanceTracker.setCredintialsScreenInstance(this);
    }
    
    /**
     *  This Method is invoked whenever the User Clicks Upon the
     *  "Create Account" Button Located at the Bottom Left of the
     *  Credential's Window Screen Form. Depending on Whether the
     *  Current User has selected "Instructor" or "Student" as their
     *  Designation, a Corresponding Account Creation GUI Pop-Up
     *  Window will appear for that Designation.
     * 
     *  @param evt                  The User Action of Clicking the Create
     *                              Account Button.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // If the User Has Chosen to Login / Create an Account as a "Student"
        if (tracker.getCurrentDesignation().equalsIgnoreCase("Student")) {
            // Spawn New Instance of the "Student" Account Creation GUI Form.
            AccountCreationStudent acs = new AccountCreationStudent();
            // Show the New Instance to the User.
            acs.setVisible(true);
            /**
             * Dispose of the Current Credentials
             * Screen GUI Window Form.
             */
            dispose();
        }
        // If the User Has Chosen to Login / Create an Account as a "Instructor"
        else if (tracker.getCurrentDesignation().equalsIgnoreCase("Instructor")) {
            // Spawn New Instance of the "Instructor" Account Creation GUI Form.
            AccountCreationInstructor aci = new AccountCreationInstructor();
            // Show the New Instance to the User.
            aci.setVisible(true);
            /**
             * Dispose of the Current Credentials
             * Screen GUI Window Form.
             */
            dispose();
        }
    }                                        

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Enter Username" JTextField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Username Segment of their Credentials without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JTextField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) { 
        /**
         *  Ensure that the Status Message JLabel is
         *  not Visible once the User Begins to Change
         *  Information within the Field. This Needs to
         *  be done seeing as the Status Message may be
         *  visible and display an Error Message from a
         *  previous Login Attempt.
         */
        jLabel7.setVisible(false);
        
        // Make the TextField Component's Background Color White.
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        // Make the TextField Component's Font Color Black.
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        /**
         *  If the TextField Component Currently Contains the Default
         *  Text Phrase Upon the User Clicking into it, then Remove
         *  the Default Text and Change the Font Color from Gray to Black.
         */
        if (jTextField1.getText().equalsIgnoreCase("Enter Username")) {
            // Set Display Text Upon Focus Gained.
            jTextField1.setText("");
            // Set the TextField Component's Font Color as Black.
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Enter Username" JTextField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JTextField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JTextField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {                                      
        /**
         *  If the "Enter Username" Field contains an Empty String
         *  upon the User Clicking out of the Component, then Reset
         *  the Component to Display the Default String Value in Gray.
         */
        if (jTextField1.getText().equalsIgnoreCase("")) {
            // Set the Display Text Font Color as Gray.
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
            // Set the Display Text as the Default Text Phrase.
            jTextField1.setText("Enter Username");
        }
        /**
         *  If the "Enter Username" Field Contains the Default String,
         *  then ensure that the Font Color is Set to Gray.
         */
        else if (jTextField1.getText().equalsIgnoreCase("Enter Username")) {
            // Set the Display Text Font Color as Gray.
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Enter Password" JPasswordField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Password Segment of their Credentials without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the Password Field Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JPasswordField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jPasswordField1FocusGained(java.awt.event.FocusEvent evt) {                                            
        /**
         *  Ensure that the Status Message JLabel is
         *  not Visible once the User Begins to Change
         *  Information within the Field. This Needs to
         *  be done seeing as the Status Message may be
         *  visible and display an Error Message from a
         *  previous Login Attempt.
         */
        jLabel7.setVisible(false);
        
        // Retrieve the Password Text From Field and Convert it to a String.
        String password = new String(jPasswordField1.getPassword());
        
        // Make the Password Field Component's Background Color White.
        jPasswordField1.setBackground(new java.awt.Color(255, 255, 255));
        // Make the Password Field Component's Font Color Black.
        jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));                                          
        /**
         *  If the PasswordField Component Currently Contains the Default
         *  Text Phrase Upon the User Clicking into it, then Remove
         *  the Default Text and Change the Font Color from Gray to Black.
         *  Additionally, Make the Password Characters Non-Visible.
         */
        if (password.equalsIgnoreCase("Enter Password")) {
            // Set Display Text Upon Focus Gained.
            jPasswordField1.setText("");
            // Replace all Current Input Characters with '•' Character
            jPasswordField1.setEchoChar('•');
            // Set JPasswordField Font Color as Black.
            jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                           

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Enter Password" JPasswordField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JPasswordField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JPasswordField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jPasswordField1FocusLost(java.awt.event.FocusEvent evt) {                                          
        // Retrieve the Current Text Value Displayed in the Password Field
        String password = new String(jPasswordField1.getPassword());
        
        /**
         *  If the Current Text Value is an Empty String, then Display
         *  the Default Text Value within the Component. Additionally,
         *  Show the Actual Char Entries of the Text Value instead of 
         *  the '•' Characters and Change the Font Color to Gray.
         */
        if (password.equalsIgnoreCase("")) {
            // Set Font Color of Input Text to Gray
            jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
            // Show the Actual Character Values
            jPasswordField1.setEchoChar((char)0);
            // Set Display Text as Default Text Phrase
            jPasswordField1.setText("Enter Password");
        }
        /**
         *  If the Current Text Value is the Default Text Phrase, then
         *  ensure that the Font Color is Changed to Gray, and Display
         *  the Actual Character Values instead of the '•' Characters.
         */
        else if (password.equalsIgnoreCase("Enter Password")) {
            // Set the Font Color to Gray.
            jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
            // Show the Actual Character Values
            jPasswordField1.setEchoChar((char)0);
        }
    }                                         

    /**
     *  This Method is Automatically Invoked Whenever the User Clicks Upon
     *  the "Login" Button Located at the Bottom Right of the Credential's
     *  Screen GUI Window Form. This Method is Responsible for Creating
     *  a Background Event Queue Thread that takes the Inputted Username and
     *  Password Values and searches for them inside the Remote Database. If
     *  the User is Attempting to Login as a "Student", then their Information
     *  will be looked for via the "Student" Table in the Database, while their
     *  information will be searched for via the "Instructor" Table in the Database
     *  should the User choose to Login as an "Instructor".
     * 
     *  @param evt                      The Action of the User Clicking on
     *                                  the Login Button Located at the Bottom
     *                                  of the Credential's Screen GUI Window.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        /**
         *  Ensure that the Error Status Message JLabel isn't Visible
         *  From a Previously Failed Login Attempt Upon Attempting a
         *  a New Login Session.
         */
        jLabel7.setVisible(false);
        /**
         *  Ensure that the Loader GIF Image isn't Visible Upon
         *  Attempting a New Login Process.
        **/
        jLabel3.setVisible(false);
        /**
         *  Ensure that the Background Color of the "Username" JTextField
         *  Component is White and Not Red From a Previously Failed Login Process.
         */
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        /**
         *  Ensure that the Background Color of the "Password" JPasswordField
         *  Component is White and Not Red From a Previously Failed Login Process.
         */
        jPasswordField1.setBackground(new java.awt.Color(255, 255, 255));
        
        // Retrieve the Password String Value from the JPasswordField Component
        String passwordValue = new String(jPasswordField1.getPassword());
        // Create String Variable to Hold Error Message Value should one Occur.
        String formattedHTML = "";
        
        /**
         *  If the "Username" or "Password" User Response Fields Contain the
         *  Default Text Phrases, then Create a Custom Warning Message Pop-Up GUI
         *  Window Form which Alerts the User of What Kind of Error they have
         *  Made. Additionally, this Form will Highlight the Fields Containing the
         *  Error in Credential's Screen Window Form.
         */
        if (jTextField1.getText().equalsIgnoreCase("Enter Username") || passwordValue.equalsIgnoreCase("Enter Password")) {
            /**
             *  If Both the "Enter Username" and "Enter Password" User Response Fields
             *  contain the Default Text Phrases, then Create a Custom Status Message
             *  GUI Pop-Up Class.
             */
            if (jTextField1.getText().equalsIgnoreCase("Enter Username") && passwordValue.equalsIgnoreCase("Enter Password")) {

                // Instantiate a Custom GUI Warning Message Form 
                StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(0);
                // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                formattedHTML = "<html><center>Please Enter Both a Valid Username & Password Response Value before Attempting to Login.</center></html>";
                // Set the Custom Message as the Display Message
                smcs.setStatusMessageDisplayMessage(formattedHTML);
                // Set the Custom Emblem on the Status Message GUI.
                smcs.setStatusMessageEmblem(1);
                
                // Disable the User Response Components
                setCredintialSearchComponentsEnablement(false);
                
                // Show the Warning Message GUI to the User
                smcs.setVisible(true);
            }
            /**
             *  If the "Enter Username" User Response Field contains
             *  the Default Text Phrase, then Create a Custom Status Message
             *  GUI Pop-Up Class.
             */
            else if (!jTextField1.getText().equalsIgnoreCase("Enter Username") && passwordValue.equalsIgnoreCase("Enter Password")) {
                
                // Instantiate a Custom GUI Warning Message Form 
                StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(1);
                // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                formattedHTML = "<html><center>Please Enter a Valid Response in the Password Input Field Before Attempting to Login.</center></html>";                
                // Set the Custom Message as the Display Message
                smcs.setStatusMessageDisplayMessage(formattedHTML);
                // Set the Custom Emblem on the Status Message GUI.
                smcs.setStatusMessageEmblem(1);
                
                // Disable the User Response Components
                setCredintialSearchComponentsEnablement(false);
                // Show the Warning Message GUI to the User
                smcs.setVisible(true);
            }
            /**
             *  If the "Enter Password" User Response Field contains
             *  the Default Text Phrase, then Create a Custom Status Message
             *  GUI Pop-Up Class.
             */
            else if (jTextField1.getText().equalsIgnoreCase("Enter Username") && !passwordValue.equalsIgnoreCase("Enter Password")) {
                
                // Instantiate a Custom GUI Warning Message Form 
                StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(2);
                // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                formattedHTML = "<html><center>Please Enter a Valid Response in the Username Input Field Before Attempting to Login.</center></html>";                
                // Set the Custom Message as the Display Message
                smcs.setStatusMessageDisplayMessage(formattedHTML);
                // Set the Custom Emblem on the Status Message GUI.
                smcs.setStatusMessageEmblem(1);
                
                // Disable the User Response Components
                setCredintialSearchComponentsEnablement(false);
                // Show the Warning Message GUI to the User
                smcs.setVisible(true);
            } 
        }
        /**
         *  If both of the User Input Fields Pass the Initial Check
         *  for Whether or not they Contain the Default Text Phrase,
         *  then Spawn and Event Queue Thread Which is Responsible
         *  for Querying the Remote Database to Determine if the Login
         *  Credentials are Valid.
         */
        else {
            /**
             *  Spawn a New Instance of the SwingWorker
             *  Event Queue Background Thread Class.
             */
            TaskHandler taskHandler = new TaskHandler();
            // Execute the New Thread.
            taskHandler.execute();

            /**
             *  Disable all Components Within the Form
             *  Until the Credentials Validation Process Has
             *  Finished.
             */
            setCredintialSearchComponentsEnablement(false);
            /**
             *  Show the Loading GIF Image Until the
             *  Credentials Validation Process has Finished.
             */
            setLoaderImageVisibility(true);
        }
    }
    
    /**
     *  This Method is Used to Either Show or Hide
     *  the Loading GIF Image Which is only shown while
     *  a Credentials Validation Screening Process 
     *  is in Session.
     * 
     *  @param value        The Boolean Value which Determines
     *                      Whether or Not the Loader GIF Image
     *                      is Visible.
     *
     *                      True    -   Visible
     * 
     *                      False   -   Not Visible 
     */
    public void setLoaderImageVisibility(boolean value) {
        // Set JLabel Visibility Value
        jLabel3.setVisible(value);
    }
    
    /**
     *  This Method is Used to Either Enable or Disable
     *  the User Response Components Present Within the
     *  Credentials Screen GUI Window.
     * 
     *  @param value        The Boolean Value which Determines
     *                      Whether or Not the Components are
     *                      Enabled and Capable of Being Manipulated
     *                      By the User.
     *
     *                      True    -   Enabled
     * 
     *                      False   -   Not Enabled 
     */
    public static void setCredintialSearchComponentsEnablement(boolean value) {
        // Set "Enter Username" Field Enablement
        jTextField1.setEnabled(value);
        // Set "Enter Password" Field Enablement
        jPasswordField1.setEnabled(value);
        // Set "Login" Button Enablement
        jButton1.setEnabled(value);
        // Set "Create Account" Button Enablement
        jButton2.setEnabled(value);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CredintialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CredintialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CredintialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CredintialsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CredintialsScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    public static javax.swing.JButton jButton1;
    public static javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JPasswordField jPasswordField1;
    public static javax.swing.JTextField jTextField1;
    // End of variables declaration 
    
    // Create Reference to Overhead Synchronized Variable Class
    public TrackerObject tracker = new TrackerObject();
    // Create Reference to Overhead Synchronized Variable Class
    public static WindowLocationTracker windowTracker = new WindowLocationTracker();
    // Create Reference to Overhead Synchronized Variable Class
    public ClassInstanceInformationTracker classInstanceTracker = new ClassInstanceInformationTracker();
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    private class TaskHandler extends SwingWorker<Void,Void> {
        
        /**
         *  Create A Custom String Value Meant to Hold 
         *  the User Input Password Value
         */
        public String passwordValue = "";
        
        /**
         * Method for Separate EventQueue Thread
         * to Execute.
         **/
        @Override
        protected Void doInBackground() throws Exception {
            
            /**
             * Create Reference to the Remote Database Manipulation Class.
             * This Class is Responsible for Performing the Information
             * Selection, Update, and Deletion Queries.
             */
            DatabaseManagerMySQL database = new DatabaseManagerMySQL();
            /**
             * Hide the Status Message JLabel in Case it
             * is Currently Visible from a Previous Operation.
             */
            jLabel7.setVisible(false);

            /**
             *  If the Current User Has Chosen to Log In as an "Instructor", then
             *  Execute the Following Code Block.
             */
            if (tracker.getCurrentDesignation().equalsIgnoreCase("Instructor")) {
                /**
                 *  Retrieve the Password Value from the jPasswordField Component
                 *  and Convert the User Input Value to a String Object.
                 */
                passwordValue = new String(jPasswordField1.getPassword());
                
                /**
                 *  Call the Check Instructor Login Credentials Method Present Within
                 *  the Database Manipulation Class. This Method Takes the User
                 *  Input "Username" and "Password" Values and Queries the Remote
                 *  Database in Order to Determine Whether or Not the Exact "Username"
                 *  and "Password" Values Provided are Present within the "Instructor"
                 *  Table of the Remote Database. Returns a Custom Database Return Object
                 *  Which Lets the Application Know if the Values have been Deemed Valid,
                 *  an Error has Occurred in the Process, or if the "Password" is Incorrect.
                 */
                DatabaseOperationResult result = database.checkInstructorLoginCredintials(jTextField1.getText(), passwordValue);

                /**
                 * Create String to Hold the Formatted HTML
                 * Error Status Message Should One Occur.
                 */
                String formattedHTML = "";
                
                /**
                 *  If the Boolean Variable Slot of the Custom Database Return Object is Equal
                 *  to true, then that means that the Specified Information has been Located and
                 *  Exactly Matches the Records Present in the Database. This means that the Login
                 *  Attempt has been Successful and the User can Continue on to the Main Screen
                 *  of the Application.
                 * 
                 *  (Note: The "Instructor" and "Student" Designations both have Different Main Screen
                 *  Classes seeing as the "Instructor" Version of the Application Contains More Features
                 *  than the "Student" Version.
                 */
                if (result.getResult() == true && result.getType().equalsIgnoreCase("Login Successful")) {
                    /**
                     *  Each "Instructor"'s Profile Contains Unique Identifying Information Specific
                     *  to the User. Thus, using the Unique Username Provided in the Login Process, we
                     *  will Query the Remote Database to Find the Unique Profile Information Associated
                     *  with the Current "Instructor" Profile. This Information will then be saved in a
                     *  Custom Instructor Object Variable for Later Reference and Use.
                     */
                    Instructor instructor = database.getInstructorInformation(jTextField1.getText());
                    
                    /**
                     *  This Acts a Secondary Check in Case an Error Occurs which Allows the User
                     *  to Proceed through the Login Process without an Actual Account Being Found.
                     *  If the Program Allows the User to Proceed in the Login Process without actually
                     *  Already Having an Account, then this Code Block will Produce an Error Message
                     *  Letting the User Know that an Failed Information Retrieval Error Has Occured.
                     *  
                     *  (Note: This Situation May Occur During an Internet Failure While the Login Process
                     *  is Occurring.)
                     */
                    if (instructor.getInstructorFirstName() == null) {
                        
                        /**
                         * Create Custom Warning Message Pop-Up GUI Class which Alerts the 
                         * Current User of the Fact that their Profile Information Couldn't 
                         * be Retrieved from the Remote Database.
                         */
                        StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(3);
                        // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                        formattedHTML = "<html><center>Something went wrong while Attempting to retrieve your Profile Information. Please Try Again Later.</center></html>";
                        // Set the Custom Message as the Display Message
                        smcs.setStatusMessageDisplayMessage(formattedHTML);
                        // Set the Custom Emblem on the Status Message GUI.
                        smcs.setStatusMessageEmblem(0);
                        
                        /**
                         * Disable the Credentials Screen User Response Components
                         * Until the User Exits From the Warning Message Pop-Up Classes.
                         */
                        setCredintialSearchComponentsEnablement(false);
                        /**
                         * Hide the Loader or Searching Image Which Appears While the
                         * Credential's Validation/Look Up/Retrieval Process is Occurring.
                         */
                        setLoaderImageVisibility(false);
                        // Show the Custom Error Message GUI to the User.
                        //wmcsfir.setVisible(true);
                        smcs.setVisible(true);
                    }
                    /**
                     *  If the User's "Instructor" Profile Information Has Been Successfully Retrieved
                     *  from the Remote Database, then Create and Show a "Login Successful" GUI Pop-UP
                     *  Message which Lets the User Know that the Process was a Success.
                     */
                    else {
                        // Create Custom Success Status Message GUI
                        AuthenticationSuccesful success = new AuthenticationSuccesful();
                        /**
                         * Save the Current User's "Instructor" Profile Information in a 
                         * Synchronized Variable Class so that we Can Reference it Later
                         * within the Main Screen of the Application.
                         */
                        tracker.setCurrentInstructorInformation(instructor);
                        
                        /**
                         * Hide the Loader or Searching GIF Image Seeing as
                         * the Login Process has finished Successfully.
                         */
                        setLoaderImageVisibility(false);
                        /**
                         * Show the Custom Success GUI Pop-Up Message
                         * to the User.
                         */
                        success.setVisible(true);
                        /**
                         * Delete the Current Instance of the Credentials
                         * Screen GUI Window Form.
                         */
                        dispose();
                    }
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to the User Providing the Wrong Password.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("Incorrect Password")) {
                    // Instantiate a Custom GUI Warning Message Form 
                    StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(4);
                    // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                    formattedHTML = "<html><center>The Password you have Provided is Incorrect. Please Check your Response and Try Again.</center></html>";
                    // Set the Custom Message as the Display Message
                    smcs.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Custom Emblem on the Status Message GUI.
                    smcs.setStatusMessageEmblem(0);
                        
                    /**
                     * Seeing as the Process Has Failed Due to the User Entering an
                     * Incorrect Password, then Highlight the Password Field with a
                     * Red Background to Show the User Where the Error Has Occurred.
                     */
                    jPasswordField1.setBackground(new java.awt.Color(255, 102, 102));
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                    // Show the Warning Message GUI to the User
                    smcs.setVisible(true);
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to the User Providing a Username which Doesn't Exist Within the Database.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("Username Does Not Exist")) {
                    // Instantiate a Custom GUI Warning Message Form 
                    StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(5);
                    // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                    formattedHTML = "<html><center>There is No Account Associated with the Specified Login Information. If You Don't Have an Account, Click the Create Account Button in the Login Screen Form.</center></html>";
                    // Set the Custom Message as the Display Message
                    smcs.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Custom Emblem on the Status Message GUI.
                    smcs.setStatusMessageEmblem(0);
                        
                    /**
                     * Seeing as the Process Has Failed Due to the User Entering an
                     * a Non-Existing Username, Highlight Both the Username and Password
                     * Fields in Red to Show the User Where the Error Has Occurred.
                     */
                    // Highlight "Username" User Response Field in Red.
                    jTextField1.setBackground(new java.awt.Color(255, 102, 102));
                    // Highlight "Password" User Response Field in Red.
                    jPasswordField1.setBackground(new java.awt.Color(255, 102, 102));
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                    // Show the Warning Message GUI to the User
                    smcs.setVisible(true);
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to the Internet Connection Being Interrupted While Attempting to Find the Login Information.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("Connection Failure")) {
                    // Create Custom Warning Message GUI Pop-Up Class Instance
                    WarningMessageInternetConnectionFailure wmicf = new WarningMessageInternetConnectionFailure("Credintials Screen");
                    // Show the Custom Pop-Up GUI Message.
                    wmicf.setVisible(true);
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to an Unprecedented SQL Exception Occurring.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("SQL Exception")) {
                    // Instantiate a Custom GUI Warning Message Form 
                    StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(6);
                    // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                    formattedHTML = "<html><center>An Error Has Occured While Attempting to Execute this Database Operation. Please Try Again Later or Contact a Developer Should the Problem Persist.</center></html>";
                    // Set the Custom Message as the Display Message
                    smcs.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Custom Emblem on the Status Message GUI.
                    smcs.setStatusMessageEmblem(0);
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                    // Show the Warning Message GUI to the User
                    smcs.setVisible(true);
                }
            }
            /**
             *  If the Current User Has Chosen to Log In as an "Student", then
             *  Execute the Following Code Block.
             */
            else if (tracker.getCurrentDesignation().equalsIgnoreCase("Student")) {
                
                /**
                 *  Retrieve the Password Value from the jPasswordField Component
                 *  and Convert the User Input Value to a String Object.
                 */
                passwordValue = new String(jPasswordField1.getPassword());
                
                /**
                 *  Call the Check Student Login Credentials Method Present Within
                 *  the Database Manipulation Class. This Method Takes the User
                 *  Input "Username" and "Password" Values and Queries the Remote
                 *  Database in Order to Determine Whether or Not the Exact "Username"
                 *  and "Password" Values Provided are Present within the "Student"
                 *  Table of the Remote Database. Returns a Custom Database Return Object
                 *  Which Lets the Application Know if the Values have been Deemed Valid,
                 *  an Error has Occurred in the Process, or if the "Password" is Incorrect.
                 */
                DatabaseOperationResult result = database.checkStudentLoginCredintials(jTextField1.getText(), passwordValue);
                
                /**
                 * Create String to Hold the Formatted HTML
                 * Error Status Message Should One Occur.
                 */
                String formattedHTML = "";
                
                /**
                 *  If the Boolean Variable Slot of the Custom Database Return Object is Equal
                 *  to true, then that means that the Specified Information has been Located and
                 *  Exactly Matches the Records Present in the Database. This means that the Login
                 *  Attempt has been Successful and the User can Continue on to the Main Screen
                 *  of the Application.
                 * 
                 *  (Note: The "Instructor" and "Student" Designations both have Different Main Screen
                 *  Classes seeing as the "Instructor" Version of the Application Contains More Features
                 *  than the "Student" Version.
                 */
                if (result.getResult() == true && result.getType().equalsIgnoreCase("Login Successful")) {
                    /**
                     *  Each "Student"'s Profile Contains Unique Identifying Information Specific
                     *  to the User. Thus, using the Unique Username Provided in the Login Process, we
                     *  will Query the Remote Database to Find the Unique Profile Information Associated
                     *  with the Current "Student" Profile. This Information will then be saved in a
                     *  Custom Instructor Object Variable for Later Reference and Use.
                     */
                    Student student = database.getStudentInformation(jTextField1.getText());
                    
                    /**
                     *  This Acts a Secondary Check in Case an Error Occurs which Allows the User
                     *  to Proceed through the Login Process without an Actual Account Being Found.
                     *  If the Program Allows the User to Proceed in the Login Process without actually
                     *  Already Having an Account, then this Code Block will Produce an Error Message
                     *  Letting the User Know that an Failed Information Retrieval Error Has Occured.
                     *  
                     *  (Note: This Situation May Occur During an Internet Failure While the Login Process
                     *  is Occurring.)
                     */
                    if (student.getStudentFirstName() == null) {
                        
                        /**
                         * Create Custom Warning Message Pop-Up GUI Class which Alerts the 
                         * Current User of the Fact that their Profile Information Couldn't 
                         * be Retrieved from the Remote Database.
                         */
                        StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(3);
                        // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                        formattedHTML = "<html><center>Something went wrong while Attempting to retrieve your Profile Information. Please Try Again Later.</center></html>";
                        // Set the Custom Message as the Display Message
                        smcs.setStatusMessageDisplayMessage(formattedHTML);
                        // Set the Custom Emblem on the Status Message GUI.
                        smcs.setStatusMessageEmblem(0);
                        
                        /**
                         * Disable the Credentials Screen User Response Components
                         * Until the User Exits From the Warning Message Pop-Up Classes.
                         */
                        setCredintialSearchComponentsEnablement(false);
                        /**
                         * Hide the Loader or Searching Image Which Appears While the
                         * Credential's Validation/Look Up/Retrieval Process is Occurring.
                         */
                        setLoaderImageVisibility(false);
                        // Show the Custom Error Message GUI to the User.
                        //wmcsfir.setVisible(true);
                        smcs.setVisible(true);
                    }
                    /**
                     *  If the User's "Student" Profile Information Has Been Successfully Retrieved
                     *  from the Remote Database, then Create and Show a "Login Successful" GUI Pop-UP
                     *  Message which Lets the User Know that the Process was a Success.
                     */
                    else {
                        // Create Custom Success GUI Pop-Up Message Instance
                        AuthenticationSuccesful success = new AuthenticationSuccesful();
                        /**
                         * Save the Current User's "Student" Profile Information in a 
                         * Synchronized Variable Class so that we Can Reference it Later
                         * within the Main Screen of the Application.
                         */
                        tracker.setCurrentStudentInformation(student);
                        
                        // Hide the Loader or Searching GIF Image.
                        setLoaderImageVisibility(false);
                        /**
                         * Show the Custom Success GUI Pop-Up Message
                         * to the User.
                         */
                        success.setVisible(true);
                        /**
                         * Delete the Current Instance of the Credentials
                         * Screen GUI Window Form.
                         */
                        dispose();
                    }
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to the User Providing the Wrong Password.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("Incorrect Password")) {
                    // Instantiate a Custom GUI Warning Message Form 
                    StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(4);
                    // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                    formattedHTML = "<html><center>The Password you have Provided is Incorrect. Please Check your Response and Try Again.</center></html>";
                    // Set the Custom Message as the Display Message
                    smcs.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Custom Emblem on the Status Message GUI.
                    smcs.setStatusMessageEmblem(0);
                        
                    /**
                     * Seeing as the Process Has Failed Due to the User Entering an
                     * Incorrect Password, then Highlight the Password Field with a
                     * Red Background to Show the User Where the Error Has Occurred.
                     */
                    jPasswordField1.setBackground(new java.awt.Color(255, 102, 102));
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                    // Show the Warning Message GUI to the User
                    smcs.setVisible(true);
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to the User Providing a Username which Doesn't Exist Within the Database.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("Username Does Not Exist")) {
                    // Instantiate a Custom GUI Warning Message Form 
                    StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(5);
                    // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                    formattedHTML = "<html><center>There is No Account Associated with the Specified Login Information. If You Don't Have an Account, Click the Create Account Button in the Login Screen Form.</center></html>";
                    // Set the Custom Message as the Display Message
                    smcs.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Custom Emblem on the Status Message GUI.
                    smcs.setStatusMessageEmblem(0);
                        
                    /**
                     * Seeing as the Process Has Failed Due to the User Entering an
                     * a Non-Existing Username, Highlight Both the Username and Password
                     * Fields in Red to Show the User Where the Error Has Occurred.
                     */
                    // Highlight "Username" User Response Field in Red.
                    jTextField1.setBackground(new java.awt.Color(255, 102, 102));
                    // Highlight "Password" User Response Field in Red.
                    jPasswordField1.setBackground(new java.awt.Color(255, 102, 102));
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                    // Show the Warning Message GUI to the User
                    smcs.setVisible(true);
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to the Internet Connection Being Interrupted While Attempting to Find the Login Information.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("Connection Failure")) {
                    // Create Custom Warning Message GUI Pop-Up Class Instance
                    WarningMessageInternetConnectionFailure wmicf = new WarningMessageInternetConnectionFailure("Credintials Screen");
                    // Show the Custom Pop-Up GUI Message.
                    wmicf.setVisible(true);
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                }
                /**
                 *  If the Custom Database Return Object Contains an Overall Result Boolean Value of
                 *  False, then that means the Login Process Attempt has Ended in Failure. Next, Check
                 *  For the Reason Why this Has Occurred. In this Code Block, the Login Process has Failed
                 *  Due to an Unprecedented SQL Exception Occurring.
                 * 
                 *  Now, Create a Custom Warning Message GUI Class Instance Explaining Why the Process Has
                 *  Failed to the User.
                 */
                else if (result.getResult() == false && result.getType().equalsIgnoreCase("SQL Exception")) {
                    // Instantiate a Custom GUI Warning Message Form 
                    StatusMessageCredentialsScreen smcs = new StatusMessageCredentialsScreen(6);
                    // Create the Custom Message to Be Displayed in the Pop-Up GUI Screen
                    formattedHTML = "<html><center>An Error Has Occured While Attempting to Execute this Database Operation. Please Try Again Later or Contact a Developer Should the Problem Persist.</center></html>";
                    // Set the Custom Message as the Display Message
                    smcs.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Custom Emblem on the Status Message GUI.
                    smcs.setStatusMessageEmblem(0);
                    
                    // Disable the Components in the Credential's Screen GUI Form
                    setCredintialSearchComponentsEnablement(false);
                    // Hide the Loader or Searching GIF Image.
                    setLoaderImageVisibility(false);
                    // Show the Warning Message GUI to the User
                    smcs.setVisible(true);
                }
            }
            
            /**
             * Ensure that the Searching or Loading GIF Image isn't Visible
             * at this Point seeing as the Login Attempt has Finished.
             */
            setLoaderImageVisibility(false);
            
            /**
             * We will always Return a Null
             * Value for any SwingWorker Thread.
             */
            return null;
        }
    }
}


