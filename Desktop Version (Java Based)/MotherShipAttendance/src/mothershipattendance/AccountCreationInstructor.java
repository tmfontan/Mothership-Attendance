/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import javax.swing.ImageIcon;
import javax.swing.SwingWorker;

/**
 *  This Class is Responsible For Creating An Information
 *  Input Form that is used to Retrieve all of the Necessary
 *  User Specific Information needed to Create a new "Instructor"
 *  Profile Account. This GUI Form Requires the User to Input
 *  their Full Name, Email Address, Custom Unique Username, and 
 *  Custom Password in order to Create a New Account. This Account
 *  will be Added to the Instructor Table in the Remote Database
 *  and Assigned a Unique Identification Number which is Capable
 *  of being Used to Distinguish the Account from Others Which
 *  Contain the Same First and Last Name Sequence. Additionally,
 *  the Username Field can Also be considered a Primary Key
 *  seeing as the Username String Value will be Unique for Every
 *  Instructor and Student Mothership Attendance Account. In other
 *  words, No matter which Designation the User Chooses to Create
 *  an Account Under, the Username Value will be a Unique String
 *  Value which doesn't match any other "Instructor" or "Student"'s
 *  Username String Value.
 * 
 *  @author     Tyler Fontana
 *  @date       October 17 2020
 *  @version    1.0.2
 */
public class AccountCreationInstructor extends javax.swing.JFrame {

    /**
     *  A Basic Constructor Method Used to
     *  invoke the GUI Form Creation Method
     *  which involves spawning the new JFrame
     *  object and positioning the Defined
     *  Components within it in addition to
     *  creating a reference to the Current
     *  GUI Window. Additionally, this Method
     *  is Used to Create the New Instance of
     *  the Credentials Screen Window.
     */
    public AccountCreationInstructor() {
        /**
         * Invoke the Method Used to Create and
         * Display the TitleScreen GUI Window Form.
         **/
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel7 = new javax.swing.JPanel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Account Creation (Instructor)");
        setSize(498, 528);
        setLocationRelativeTo(null);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel2.setOpaque(false);
        jPanel2.setRequestFocusEnabled(false);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/CreateAccountInstructor321x44.png"))); // NOI18N

        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("First Name");
        jTextField1.setToolTipText("<html>This Field is Meant to Contain the First Name of The Instructor<br>who is Attempting to "
                + "Create An Mothership Attendance<br>Account. Prohibited Characters Include:<br><br><center>{ “ 1 ”, “ 2 ”, “ 3 ”, “ 4 ”,"
                + " “ 5 ”, “ 6 ”, “ 7 ”, “ 8 ”, “ 9 ”, “ = ”,   <br> “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, "
                + "“ ; ”, “ < ”, <br>“ > ”, “ ! ”, “ ? ”, “ . ”, “ @ ”, “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, "
                + "“ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br> “ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”, <br>  “ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, <br> “ § ”,"
                + " “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”, <br> “ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”,"
                + " “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}</center></html>");
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(394, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel1.setOpaque(false);

        jTextField2.setForeground(new java.awt.Color(153, 153, 153));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("Last Name");
        jTextField2.setToolTipText("<html>This Field is Meant to Contain the Last Name or<br>Surname of The Instructor who is Attempting to "
                + "Create<br> A Mothership Attendance Account. Prohibited Characters <br>Include:<br><br><center>{ “ 1 ”, “ 2 ”, “ 3 ”, “ 4 ”,"
                + " “ 5 ”, “ 6 ”, “ 7 ”, “ 8 ”, “ 9 ”, “ = ”,   <br> “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, "
                + "“ ; ”, “ < ”, <br>“ > ”, “ ! ”, “ ? ”, “ . ”, “ @ ”, “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, "
                + "“ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br> “ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”, <br>  “ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, <br> “ § ”,"
                + " “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”, <br> “ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”,"
                + " “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}</center></html>");
        jTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/loadingGif2.gif"))); // NOI18N
        jLabel3.setVisible(false);
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(100, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addContainerGap(369, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(143, 143, 143)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(350, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(432, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jPanel3.setOpaque(false);

        jTextField3.setForeground(new java.awt.Color(153, 153, 153));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("Email Address");
        jTextField3.setToolTipText("<html>This Field is Meant to Contain the Associated University<br>Issued "
                + "Email Address of The Instructor who is Attempting<br>to Create An Mothership Attendance Account. "
                + "This Field<br>Must Contain a Valid Email Address Value Which is<br>Denoted by the “ @ ” Symbol."
                + " Prohibited Characters<br>Include:<br><center><br>{“ = ”,  “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, "
                + "“ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”,<br> “ < ”,  “ > ”, “ ! ”, “ ? ”, “ . ”,  “ # ”, “ $ ”, “ % ”,"
                + " “ ^ ”, “ & ”,<br> " + " “ * ”, “ ( ”, “ ) ”, “ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, :<br> "
                + "“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, “ ® ”, :<br>“ ß ”, “ Ý ”, “ … ”, "
                + "“ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, :<br>“ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”, “ Ô ”, "
                + "“ • ”, “ Ò ”, “ Â ”, “ Ø ”,  :<br> “ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, "
                + "“ ƒ ”, :<br> “ § ”, “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”, :<br> “ þ ”, "
                + "“ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \","
                + " \" > \", \" < \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Have A Value Containing The '@' "
                + "<br>Symbol And Be Longer Than Ten Characters.</center></html>");
        jTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });
        
        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Please Fill Out the Required Information Below:   ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(42, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(187, 187, 187)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(306, Short.MAX_VALUE)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(69, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(434, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel3);

        jPanel4.setOpaque(false);

        jTextField4.setForeground(new java.awt.Color(153, 153, 153));
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4.setText("Username");
        jTextField4.setToolTipText("<html> A Unique Username Value Chosen By the Instructor. This Value<br>Will Be Later "
                + "Used in Allowing the Current Instructor Access into the<br>Main Application Where They Can Connect Via "
                + "Bluetooth and Mark<br>Thier Classes' Attendance. Prohibited Characters Include: <br><br><center>{“ = ”,  “ [ ”,"
                + " “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”,<br>" + " “ < ”,  “ > ”, “ ! ”, “ ? ”,"
                + " “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, “ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”,"
                + " “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, “ ® ”,<br>“ ß ”,"
                + " “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br>“ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br>“ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”,"
                + " “ ƒ ”, “ @ ”,<br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”,<br> “ þ ”, “ ý ”,"
                + " “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \", \" > \", \" "
                + "< \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Be Longer"
                + "<br>Than Seven Characters.*</center></html>");
        jTextField4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField4FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(231, 231, 231)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(262, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel4);

        jPanel5.setOpaque(false);

        jTextField5.setForeground(new java.awt.Color(153, 153, 153));
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setText("Confirm Username");
        jTextField5.setToolTipText("<html>This Field Must Contain The Same Value Entered in the Username<br>"
                + "Information Field. These two Fields are both included to ensure that<br>The Instructor Creating the Account "
                + "is Positive of The Username<br>Selection They Have Entered. Prohibited Characters Include:<br><center><br>"
                + "{“ = ”,  “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”, <br>" +
                " “ < ”,  “ > ”, “ ! ”, “ ? ”, “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br> “ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, " + "“ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”,"
                + " “ ¼ ”, “ ¾ ”,  " + "“ œ ”, “ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”,"
                + " “ Ç ”, <br>“ Î ”," + " “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”, “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br> “ Œ ”, "
                + "“ Í ”, “  ”, “ – ”, " + "“ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, “ @ ”,<br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, "
                + "“ æ ”, “ Ž ”, “ € ”, " + "“ Ð ”, “ ð ”, “ Þ ”, <br> " + "“ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”,"
                + " “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" ` \", "
                + "\" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Be Longer"
                + "<br>Than Seven Characters.*</center></html>");
        jTextField5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField5FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(47, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(275, 275, 275)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(218, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel5);

        jPanel6.setOpaque(false);

        jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
        jPasswordField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPasswordField1.setText("Password");
        jPasswordField1.setToolTipText("<html> A Unique Password Value Chosen By the Instructor. This Value<br>Will Be Later "
                + "Used in Allowing the Current Instructor Access into the<br>Main Application Where They Can Connect Via "
                + "Bluetooth and Mark<br>Thier Classes' Attendance. Prohibited Characters Include: <br><center><br>{“ = ”,  “ [ ”,"
                + " “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”,<br>" + " “ < ”,  “ > ”, “ ! ”, “ ? ”,"
                + " “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, “ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”,"
                + " “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, “ ® ”,<br>“ ß ”,"
                + " “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br>“ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br>“ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”,"
                + " “ ƒ ”, “ @ ”,<br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”,<br> “ þ ”, “ ý ”,"
                + " “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" "
                + "` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Contain Both Letters And At Least"
                + "<br>Three Numbers Along With Be Longer Than Eleven Characters.*</center></html>");
        jPasswordField1.setEchoChar((char)0);
        jPasswordField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(320, Short.MAX_VALUE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(173, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel6);

        jPanel7.setOpaque(false);

        jPasswordField2.setForeground(new java.awt.Color(153, 153, 153));
        jPasswordField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPasswordField2.setText("Confirm Password");
        jPasswordField2.setToolTipText("<html>This Field Must Contain The Same Value Entered in the Password<br>"
                + "Information Field. These two Fields are both included to ensure that<br>The Instructor Creating the Account "
                + "is Positive of The Password<br>Selection They Have Entered. Prohibited Characters Include:<br><br>"
                + "<center>{“ = ”,  “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”, <br>" +
                " “ < ”,  “ > ”, “ ! ”, “ ? ”, “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br> “ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, " + "“ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”,"
                + " “ ¼ ”, “ ¾ ”,  " + "“ œ ”, “ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”,"
                + " “ Ç ”, <br>“ Î ”," + " “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”, “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br> “ Œ ”, "
                + "“ Í ”, “  ”, “ – ”, " + "“ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, “ @ ”, <br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, "
                + "“ æ ”, “ Ž ”, “ € ”, " + "“ Ð ”, “ ð ”, “ Þ ”, <br> " + "“ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”,"
                + " “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" "
                + "` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Contain Both Letters And At Least"
                + "<br> Three Numbers Along With Be Longer Than Eleven Characters.*</center></html>");
        jPasswordField2.setEchoChar((char)0);
        jPasswordField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPasswordField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordField2FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(365, Short.MAX_VALUE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(128, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel7);

        jPanel8.setOpaque(false);

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("jLabel2");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setVisible(false);
        
        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/createAccountButton.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(139, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(161, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(429, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(44, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(407, 407, 407)
                    .addComponent(jLabel2)
                    .addContainerGap(105, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel8);

        jPanel9.setOpaque(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/BackgroundDirectoryScreen498x560.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 1, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel9);

        pack();
        
        jButton1.requestFocusInWindow();
    }                     

    /**
     *  This Method is Automatically invoked whenever the Account Creation
     *  Instructor's GUI Form is Initialized. It is responsible for saving
     *  a reference to the Current Instance of the Credential's GUI Form
     *  in the Synchronized Overhead Instance Reference Class. This
     *  Reference will be used at a later time to invoke changes within
     *  the Current Form from a Separate Class.
     * 
     *  @param evt                  The Action of the Account Creation Instructor
     *                              GUI Window Form First Being Initialized.
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {     
        // Save the Current Instance of the Account Creation Instructor GUI Window.
        classInstanceTracker.setAccountCreationInstructorInstance(this);
    }
    
    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "First Name" JTextField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the First Name Value of their new Account without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JTextField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Ensure that the Background Color of the Component is White
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        
        /**
         *  If the Text in the TextField Component is equal to the
         *  Default String "First Name" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (jTextField1.getText().equalsIgnoreCase("First Name")) {
            // Set Display Text as Empty String
            jTextField1.setText("");
            // Ensure that the Font Color is Black
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "First Name" JTextField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JTextField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JTextField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {                                      
        /**
         *  If the TextField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "First Name".
         */
        if (jTextField1.getText().equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jTextField1.setText("First Name");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (jTextField1.getText().equalsIgnoreCase("First Name")) {
            // Change Font Color to Default Gray Value.
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Last Name" JTextField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Last Name Value of their new Account without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JTextField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {  
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Ensure that the Background Color of the Component is White
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        
        /**
         *  If the Text in the TextField Component is equal to the
         *  Default String "Last Name" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (jTextField2.getText().equalsIgnoreCase("Last Name")) {
            // Set Display Text as Empty String
            jTextField2.setText("");
            // Ensure that the Font Color is Black
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Last Name" JTextField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JTextField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JTextField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {                                      
        /**
         *  If the TextField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "Last Name".
         */
        if (jTextField2.getText().equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jTextField2.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jTextField2.setText("Last Name");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (jTextField2.getText().equalsIgnoreCase("Last Name")) {
            // Change Font Color to Default Gray Value.
            jTextField2.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Email Address" JTextField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Email Address Value of their new Account without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JTextField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {   
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Ensure that the Background Color of the Component is White
        jTextField3.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jTextField3.setForeground(new java.awt.Color(0, 0, 0));

        /**
         *  If the Text in the TextField Component is equal to the
         *  Default String "Email Address" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (jTextField3.getText().equalsIgnoreCase("Email Address")) {
            // Set Display Text as Empty String
            jTextField3.setText("");
            // Ensure that the Font Color is Black
            jTextField3.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Email Address" JTextField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JTextField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JTextField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {                                      
        /**
         *  If the TextField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "Email Address".
         */
        if (jTextField3.getText().equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jTextField3.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jTextField3.setText("Email Address");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (jTextField3.getText().equalsIgnoreCase("Email Address")) {
            // Change Font Color to Default Gray Value.
            jTextField3.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Username" JTextField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Unique Username Value of their new Account without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JTextField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) { 
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Ensure that the Background Color of the Component is White
        jTextField4.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jTextField4.setForeground(new java.awt.Color(0, 0, 0));
        
        /**
         *  If the Text in the TextField Component is equal to the
         *  Default String "Username" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (jTextField4.getText().equalsIgnoreCase("Username")) {
            // Set Display Text as Empty String
            jTextField4.setText("");
            // Ensure that the Font Color is Black
            jTextField4.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Username" JTextField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JTextField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JTextField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField4FocusLost(java.awt.event.FocusEvent evt) {                                      
        /**
         *  If the TextField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "Username".
         */
        if (jTextField4.getText().equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jTextField4.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jTextField4.setText("Username");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (jTextField4.getText().equalsIgnoreCase("Username")) {
            // Change Font Color to Default Gray Value.
            jTextField4.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Confirm Username" JTextField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Confirm Username Value Segment without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  (Note: This Field Is Used to Ensure that the User Inputted
     *  Value within the Username Field is the Exact Value that the
     *  User wishes use. There is no Changing of the Username Value
     *  Seeing as the String is used as a Unique Identification Primary
     *  Key Within the Application. Thus, It is Extremely Important
     *  that the User is Confident in what String Identifier Value
     *  They Wish to Use.)
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JTextField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField5FocusGained(java.awt.event.FocusEvent evt) {       
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Ensure that the Background Color of the Component is White
        jTextField5.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jTextField5.setForeground(new java.awt.Color(0, 0, 0));
        /**
         *  If the Text in the TextField Component is equal to the
         *  Default String "Confirm Username" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (jTextField5.getText().equalsIgnoreCase("Confirm Username")) {
            // Set Display Text as Empty String
            jTextField5.setText("");
            // Ensure that the Font Color is Black
            jTextField5.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Confirm Username" JTextField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JTextField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JTextField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jTextField5FocusLost(java.awt.event.FocusEvent evt) {                                      
        /**
         *  If the TextField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "Confirm Username".
         */
        if (jTextField5.getText().equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jTextField5.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jTextField5.setText("Confirm Username");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (jTextField5.getText().equalsIgnoreCase("Confirm Username")) {
            // Change Font Color to Default Gray Value.
            jTextField5.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Password" JPasswordField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Password Value of their new Account without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JPasswordField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jPasswordField1FocusGained(java.awt.event.FocusEvent evt) {
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Convert the JPasswordField Text Value into a String Object.
        String password = new String(jPasswordField1.getPassword());
        
        // Ensure that the Background Color of the Component is White
        jPasswordField1.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));                                          
        
        /**
         *  If the Text in the JPasswordField Component is equal to the
         *  Default String "Password" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (password.equalsIgnoreCase("Password")) {
            // Set Display Text as Empty String
            jPasswordField1.setText("");
            /**
             *  Replace the Current Series of Characters Present
             *  Within the User Input Value with a Series of '•'
             *  Hider Characters.
             */
            jPasswordField1.setEchoChar('•');
            // Ensure that the Font Color is Black
            jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                           

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Password" JPasswordField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JPasswordField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JPasswordField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jPasswordField1FocusLost(java.awt.event.FocusEvent evt) {                                          
        String password = new String(jPasswordField1.getPassword());
        
        /**
         *  If the JPasswordField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "Password".
         */
        if (password.equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Show the Actual Character's of the String Value
             *  Present Within the JPasswordField Component instead
             *  of the series of '•' Characters.
             */
            jPasswordField1.setEchoChar((char)0);
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jPasswordField1.setText("Password");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (password.equalsIgnoreCase("Password")) {
            // Change Font Color to Default Gray Value.
            jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Show the Actual Character's of the String Value
             *  Present Within the JPasswordField Component instead
             *  of the series of '•' Characters.
             */
            jPasswordField1.setEchoChar((char)0);
        }
    }                                         

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks into the "Confirm Password" JPasswordField Component. This
     *  Method is Responsible for Removing the Default Text Statement,
     *  if Present Within the Component, so that the User can Enter
     *  in the Confirm Username Value Segment without having
     *  to remove the Default Text Section. If the Default Text Phrase
     *  is not present upon the TextField Gaining the Main Event Queue
     *  Thread's Focus, then ensure that the Font Color is Black and
     *  don't remove anything.
     * 
     *  (Note: This Field Is Used to Ensure that the User Inputted
     *  Value within the Password Field is the Exact Value that the
     *  User wishes to use. As of Version 1.0.2, there is Currently no
     *  way to Change the User's Password Selection. However, this
     *  Feature May be Implemented at a Later Time.)
     * 
     *  @param evt                  The Action of the User Clicking
     *                              into the JPasswordField Component and
     *                              Causing the Component to Gain the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jPasswordField2FocusGained(java.awt.event.FocusEvent evt) {
        /**
         * Hide the Error Status Message JLabel Should it be Visible
         * From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        
        // Convert the JPasswordField Text Value into a String Object.
        String password = new String(jPasswordField2.getPassword());
        
        // Ensure that the Background Color of the Component is White
        jPasswordField2.setBackground(new java.awt.Color(255, 255, 255));
        // Ensure that the Font Color is Black
        jPasswordField2.setForeground(new java.awt.Color(0, 0, 0));                                          
        
        /**
         *  If the Text in the JPasswordField Component is equal to the
         *  Default String "Confirm Password" Upon Gaining Focus, then 
         *  Set the Display Value Within the Field as an Empty String.
         */
        if (password.equalsIgnoreCase("Confirm Password")) {
            // Set Display Text as Empty String
            jPasswordField2.setText("");
            /**
             *  Replace the Current Series of Characters Present
             *  Within the User Input Value with a Series of '•'
             *  Hider Characters.
             */
            jPasswordField2.setEchoChar('•');
            // Ensure that the Font Color is Black
            jPasswordField2.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                           

    /**
     *  This Method is automatically invoked Whenever the User
     *  Clicks out of the "Confirm Password" JPasswordField Component. This
     *  Method is Responsible for adding the Default Text Statement,
     *  should the User Click Out of the JPasswordField without Entering
     *  in any Information.
     * 
     *  @param evt                  The Action of the User Clicking
     *                              Out of the JPasswordField Component and
     *                              Causing the Component to Lose the
     *                              Overall Focus of the Main Event
     *                              Queue Thread.
     */
    private void jPasswordField2FocusLost(java.awt.event.FocusEvent evt) {
        // Retrieve the User Response Value in the Password Field.
        String password = new String(jPasswordField2.getPassword());
        
        /**
         *  If the JPasswordField Component's String Value is Equal to
         *  an Empty String Upon Losing Focus, then set the Component's
         *  Display Text Value as the Default String "Confirm Password".
         */
        if (password.equalsIgnoreCase("")) {
            /**
             *  Set the Components Font Color as the Default Gray Color
             *  First Shown When the Form Was Initialized and Shown.
             */
            jPasswordField2.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Show the Actual Character's of the String Value
             *  Present Within the JPasswordField Component instead
             *  of the series of '•' Characters.
             */
            jPasswordField2.setEchoChar((char)0);
            /**
             *  Set Display Text as the Default String Value
             *  the Field fist Started With.
             */
            jPasswordField2.setText("Confirm Password");
        }
        /**
         *  If the Component Already Contains the Default Text Value
         *  Upon Losing Focus, then Ensure that the Component Displays
         *  the Default Aesthetic Properties it was Instantiated With.
         */
        else if (password.equalsIgnoreCase("Confirm Password")) {
            // Change Font Color to Default Gray Value.
            jPasswordField2.setForeground(new java.awt.Color(153, 153, 153));
            /**
             *  Show the Actual Character's of the String Value
             *  Present Within the JPasswordField Component instead
             *  of the series of '•' Characters.
             */
            jPasswordField2.setEchoChar((char)0);
        }
    }                                         

    /**
     *  This Method is Invoked Whenever the User Clicks Upon the
     *  "Create Account" JButton Component Located at the Bottom
     *  of the Window Form. This Method is Responsible for Spawning
     *  a Background Event Queue Thread which is used to perform the
     *  Heavy Data Manipulation Tasks Present Within the Class. This
     *  is Done in Order to Allow the Main Event Queue Thread to Focus
     *  on Maintaining the Aesthetic Properties of the Window's Form.
     * 
     *  @param evt              The Action of the User Clicking on
     *                          the "Create Account" JButton Component.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        /**
         *  Show the Loader / Search GIF Image Seeing as
         *  we are Starting to Perform the Account Creation
         *  Operation Background Task.
         */
        setLoaderImageVisibility(true);
        /**
         *  Hide the Error Status Message JLabel Should it be Visible
         *  From a Previously Failed Account Creation Operation.
         */
        setStatusMessageVisibility(false);
        /**
         *  Spawn and Execute a New Background Event Queue
         *  Thread to Perform the Account Creation Information
         *  Validity Checks and the Account Profile Addition into
         *  the Remote Database.
         */
        new TaskHandler().execute();
    }
    
    /**
     *  This Method is Used to Either Show or Hide the
     *  Loading / Search GIF Image JLabel Component Which is
     *  Present to the Left of the "Create Account" JButton
     *  Component in the Account Creation Instructor Window Form.
     *  The Loading / Search GIF Image is Shown Whenever the User
     *  Begins the Account Creation Process by Clicking the "Create
     *  Account" JButton. The Image will be Shown Until the
     *  Background SwingWorker Thread Has Finished its Task.
     *  
     *  @param value            The Boolean Value that Determines
     *                          the Visibility Status of the Loading
     *                          / Search GIF Image JLabel Component.
     *                  
     *                          True    -   Visible
     * 
     *                          False   -   Not Visible.
     */
    public void setLoaderImageVisibility(boolean value) {
        // Set Component Visibility Status.
        jLabel3.setVisible(value);
    }
    
    /**
     *  This Method is Used to Either Show or Hide the
     *  Error Status Message JLabel Component Which is
     *  Present Underneath the "Confirm Password" Component
     *  Field in the Account Creation Instructor Window Form.
     *  The Error Status Message JLabel is Shown Whenever an
     *  Error Occurs While the User is Attempting to Create
     *  an Instructors Account. The Types of Errors That
     *  can cause this will be discussed Later in the Background
     *  SwingWorker Thread Class.
     *  
     *  @param value            The Boolean Value that Determines
     *                          the Visibility Status of the Error
     *                          Status Message JLabel Component.
     *                  
     *                          True    -   Visible
     * 
     *                          False   -   Not Visible.
     */
    public void setStatusMessageVisibility(boolean value) {
        // Set Component Visibility Status.
        jLabel2.setVisible(value);
    }
    
    /**
     *  This Method is Used to Set the Display Text Value of the
     *  Error Status Message JLabel Component. The Details of this
     *  Component are mentioned in the Set Status Message Visibility
     *  Method Located Above.
     * 
     *  @param value            The String Value Containing the Display
     *                          Message Which will be Shown to the User
     *                          Via the Status Message JLabel Component.
     */
    public void setStatusMessageDisplayValue(String value) {
        // Set the Display Text Value.
        jLabel2.setText(value);
    }

    /**
     *  This Method is Used in Order to Either Spawn a Custom Warning
     *  / Status Message GUI Window to Alert the User of What Type of
     *  Error They Have Made, or to Let the SwingWorker Thread Know that
     *  it Can Continue on to the Last Segment of the User Response
     *  Validation Process.
     * 
     *  @param value                    The Status Message String that
     *                                  was Retrieved from the Determine
     *                                  Error Status Method Located in the
     *                                  String Input Checker Class Instance.
     *
     *  @param results                  The Boolean Array Value Containing
     *                                  the Converged Results of the Second
     *                                  Segment in the User Response Validity
     *                                  Check. This Parameter Value will be
     *                                  Passed into the Status / Warning Message
     *                                  GUI Instance should one be created.
     * 
     *  @return                         The Boolean Value Which Determines
     *                                  Whether or Not the Thread Can Continue
     *                                  its Execution and Move on to the Final
     *                                  Segment of the Information Validation
     *                                  Process.
     */
    public boolean setResults(String value, boolean[] results) {
        
        /**
         *  If More than a Single User Response Field Contains Either an Answer
         *  Containing / Composed Solely of Whitespace Characters, or Prohibited
         *  Numerical / Special Characters, then execute Code Block. Return a Value
         *  of True to Let the SwingWorker Thread Know that an Error Has Occurred
         *  During the Second Segment of the Validation Process so it can stop
         *  Execution.
         */
        if (value.equals("Multiple Fields Contain Prohibited Characters or Blank Responses.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(8, 0, results);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Responses You've Entered in Multiple Information Fields Contain Prohibited Characters And/Or Blank Answers. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'First Name' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The First Name Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(9, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'First Name' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'First Name' Field Contains a User Response 
         *  Composed with Prohibited Numerical Characters (Digits)
         *  then Executed Code Block. Return a Value of True to Let 
         *  the SwingWorker Thread Know that an Error Has Occurred 
         *  During the Second Segment of the Validation Process so 
         *  it can stop Execution.
         */
        else if (value.equals("The First Name Field Contains Prohibited Number Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(10, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'First Name' Information Field Contains Prohibited Numerical Characters. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'First Name' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The First Name Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(11, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'First Name' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Last Name' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The Last Name Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(12, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Last Name' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html> ";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Last Name' Field Contains a User Response 
         *  Composed with Prohibited Numerical Characters (Digits)
         *  then Executed Code Block. Return a Value of True to Let 
         *  the SwingWorker Thread Know that an Error Has Occurred 
         *  During the Second Segment of the Validation Process so 
         *  it can stop Execution.
         */
        else if (value.equals("The Last Name Field Contains Prohibited Number Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(13, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Last Name' Information Field Contains Prohibited Numerical Characters. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Last Name' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The Last Name Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(14, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Last Name' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Email Address' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The Email Address Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(15, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Email Address' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Email Address' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The Email Address Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(16, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Email Address' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Username' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The Username Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(17, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Username' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Username' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The Username Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(18, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Username' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Confirm Username' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The Confirm Username Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(19, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Confirm Username' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Confirm Username' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The Confirm Username Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(20, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Confirm Username' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Password' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The Password Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(21, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Password' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Password' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The Password Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(22, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Password' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Confirm Password' User Response Field Contains an Answer Containing
         *  or Solely Composed of Whitespace Characters, then Execute Code Block. 
         *  Return a Value of True to Let the SwingWorker Thread Know that an Error
         *  Has Occurred During the Second Segment of the Validation Process so it can 
         *  stop Execution.
         */
        else if (value.equals("The Confirm Password Field Contains a Blank Answer.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(23, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Confirm Password' Information Field Contains an Answer Composed with Whitespace. Please Change Your Response and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If the 'Confirm Password' Field Contains a User Response 
         *  Composed with Prohibited Special Characters then Execute
         *  the Code Block. A List of the Prohibited Special Characters
         *  can be found via the Tool Tip Text Pop-Up Message which Appears
         *  when the User's Mouse Hovers over one of the Response Fields. 
         *  Return a Value of True to Let the SwingWorker Thread Know that
         *  an Error Has Occurred During the Second Segment of the 
         *  Validation Process so it can stop Execution.
         */
        else if (value.equals("The Confirm Password Field Contains Prohibited Special Characters.")) {
            
            // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(24, 0, null);
        
            // Create Custom Error Display Message.
            String formattedHTML = "<html><center>The Response You've Entered in the 'Confirm Password' Information Field Contains Prohibited Special Characters. Please Refer to the Suggestion Box for a List of Prohibited Special Characters and Try Again.</center></html>";
            
            // Set the GUI Window Display Message.
            smac.setStatusMessageDisplayMessage(formattedHTML);
            
            // Make the Font Size Smaller to Fit the Entire Message.
            smac.setStatusMessageFontSize(11);
            
            // Set the Emblem Image of the GUI Message.
            smac.setStatusMessageEmblem(1);
            
            /**
             * Disable the User Response Components Until the User
             * Exits From the Warning Message GUI Window Form.
             */
            setComponentEnablementStatus(false);
            
            /**
             *  Hide the Loading / Searching GIF Image
             *  Seeing as the Account Creation Process
             *  Has Ended in Failure.
             */
            setLoaderImageVisibility(false);
            
            /**
             *  Return True to let the SwingWorker Thread
             *  Know that an Error Has Been Found During the
             *  Second Segment of the Validation Process.
             */
            return true;
        }
        /**
         *  If all of the User's Responses have Been Deemed
         *  as Valid Answers then Return a Value of False. This
         *  Value Will let the Background SwingWorker Thread
         *  Know that it can Continue on to next Step in the
         *  Account Creation Process.
         */
        else {
            // Return Value of False.
            return false;
        }
    }
    
    /**
     *  This Method is Used to Converge all of the
     *  Boolean Array Values Used in the Second Segment
     *  of the User Response Validation Process into a
     *  Single Array Variable. This is Done for 
     *  Simplification Purposes in Addition to
     *  Possibly Passing the Boolean Array Variable 
     *  into a Status / Warning Message Window Instance.
     * 
     *  @return             The Boolean Array Value
     *                      Containing all of the Determined
     *                      Error Field Values.
     */
    public boolean[] createResultArray(boolean[] v1, boolean[] v2, boolean[] v3, boolean[] v4, boolean[] v5, boolean[] v6, boolean[] v7) {
        
        /**
         *  Create Boolean Array Variable to
         *  Hold the Results of All Our User
         *  Response Field Validity Check Values.
         */
        boolean[] conversion = new boolean[16];
        
        /**
         *  Store the "First Name" Field
         *  Blank Response Validity Check.
         */
        conversion[0] = v1[0];
        /**
         *  Store the "First Name" Field
         *  Prohibited Numeric Characters Validity 
         *  Check Result.
         */
        conversion[1] = v1[1];
        /**
         *  Store the "First Name" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[2] = v1[2];
        /**
         *  Store the "Last Name" Field
         *  Blank Response Validity Check.
         */
        conversion[3] = v2[0];
        /**
         *  Store the "Last Name" Field
         *  Prohibited Numeric Characters Validity 
         *  Check Result.
         */
        conversion[4] = v2[1];
        /**
         *  Store the "Last Name" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[5] = v2[2];
        /**
         *  Store the "Email Address" Field
         *  Blank Response Validity Check.
         */
        conversion[6] = v3[0];
        /**
         *  Store the "Email Address" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[7] = v3[1];
        /**
         *  Store the "Username" Field
         *  Blank Response Validity Check.
         */
        conversion[8] = v4[0];
        /**
         *  Store the "Username" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[9] = v4[1];
        /**
         *  Store the "Confirm Username" Field
         *  Blank Response Validity Check.
         */
        conversion[10] = v5[0];
        /**
         *  Store the "Confirm Username" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[11] = v5[1];
        /**
         *  Store the "Password" Field
         *  Blank Response Validity Check.
         */
        conversion[12] = v6[0];
        /**
         *  Store the "Password" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[13] = v6[1];
        /**
         *  Store the "Confirm Password" Field
         *  Blank Response Validity Check.
         */
        conversion[14] = v7[0];
        /**
         *  Store the "Confirm Password" Field
         *  Prohibited Special Characters Validity 
         *  Check Result.
         */
        conversion[15] = v7[1];
        
        /**
         *  Return the New Array With
         *  the Converged Validity Results.
         */
        return conversion;
    }
    
    /**
     *  This Method is Used to Change the Aesthetic Properties of the
     *  User Response Fields. This includes changing the Component's Background
     *  to White Should it be Highlighted Red From a Previous Operation, in
     *  Addition to Changing the Font Color to Black should it Currently Be Gray.
     */
    public void setUserResponseComponentAesthetics() {
        // Change the Components Background Color to White.
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        
        // Change the Components Background Color to White.
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        
        // Change the Components Background Color to White.
        jTextField3.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jTextField3.setForeground(new java.awt.Color(0, 0, 0));
        
        // Change the Components Background Color to White.
        jTextField4.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jTextField4.setForeground(new java.awt.Color(0, 0, 0));
        
        // Change the Components Background Color to White.
        jTextField5.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jTextField5.setForeground(new java.awt.Color(0, 0, 0));
        
        // Change the Components Background Color to White.
        jPasswordField1.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));
        
        // Change the Components Background Color to White.
        jPasswordField2.setBackground(new java.awt.Color(255, 255, 255));
        // Change the Component's Font Color to Black.
        jPasswordField2.setForeground(new java.awt.Color(0, 0, 0));
    }
    
    /**
     *  This Method is Used to Set the Enablement Status of the
     *  Series of User Response Components Present Within the Window
     *  Form. This Method is Typically Invoked after the User Begin's
     *  the Account Creation Process by Clicking the "Create Account"
     *  Button. This is Done to Ensure That the User Cannot Manipulate
     *  any Input Data within Form once the Validity Check Process
     *  and Database Account / Profile Addition Process Begins.
     * 
     *  @param value            The Boolean Value Which Determines
     *                          Whether or not the User Response
     *                          Components are Capable of Being
     *                          Manipulated By the User.
     * 
     *                          True    -   The User Can Manipulate
     *                                      the Components.
     * 
     *                          False   -   The User Cannot Manipulate
     *                                      the Components.
     */
    public static void setComponentEnablementStatus(boolean value) {
        // Set Component Enablement Status.
        jTextField1.setEnabled(value);
        // Set Component Enablement Status.
        jTextField2.setEnabled(value);
        // Set Component Enablement Status.
        jTextField3.setEnabled(value);
        // Set Component Enablement Status.
        jTextField4.setEnabled(value);
        // Set Component Enablement Status.
        jTextField5.setEnabled(value);
        // Set Component Enablement Status.
        jPasswordField1.setEnabled(value);
        // Set Component Enablement Status.
        jPasswordField2.setEnabled(value);
        // Set Component Enablement Status.
        jButton1.setEnabled(value);
    }
    
    /**
     *  This Method is Used to Reset the Boolean
     *  Array Entry Values of the Global Error Counter
     *  Boolean Array Variable. This Variable is Used
     *  in order to Determine if the User Response
     *  Fields Contain Missing or Prohibited Information
     *  in the Validity Check Process.
     */
    public void resetErrorCounterBooleanArray() {
        // Reset Boolean Array Index Value.
        errorCount[0] = false;
        // Reset Boolean Array Index Value.
        errorCount[1] = false;
        // Reset Boolean Array Index Value.
        errorCount[2] = false;
        // Reset Boolean Array Index Value.
        errorCount[3] = false;
        // Reset Boolean Array Index Value.
        errorCount[4] = false;
        // Reset Boolean Array Index Value.
        errorCount[5] = false;
        // Reset Boolean Array Index Value.
        errorCount[6] = false;
    }
    
    public void resetBooleanArrayValues() {
        FirstNameField[0] = false;
        FirstNameField[1] = false;
        FirstNameField[2] = false;
        
        LastNameField[0] = false;
        LastNameField[1] = false;
        LastNameField[2] = false;
        
        EmailField[0] = false;
        EmailField[1] = false;
        
        UsernameField[0] = false;
        UsernameField[1] = false;
        
        ConfirmUsernameField[0] = false;
        ConfirmUsernameField[1] = false;
        
        PasswordField[0] = false;
        PasswordField[1] = false;
        
        ConfirmPasswordField[0] = false;
        ConfirmPasswordField[1] = false;
    }                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountCreationInstructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountCreationInstructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountCreationInstructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountCreationInstructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountCreationInstructor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    public static javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public static javax.swing.JPasswordField jPasswordField1;
    public static javax.swing.JPasswordField jPasswordField2;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    public static javax.swing.JTextField jTextField5;
    // End of variables declaration  
    
    /**
     *  Create a Boolean Array Value Which will be Used to Perform the User 
     *  Information Input Check on the String Values Retrieved from the User Input Fields.
     *  This Essentially just Check to Make Sure that the User Has Inputted a Value
     *  in Each Required Field instead of Leaving them as the Default Text Values.
     */
    public boolean[] errorCount = {false,false,false,false,false,false,false,false};
    /**
     *  Create a Boolean Value used to Determine Whether the Thread
     *  Should Continue or Stop Execution Depending on the Result
     *  of the Response Field's Validity Check Process.
     */
    public boolean cont = true;
    /**
     * 
     */
    public boolean value = false;
    /**
     *  Create a Temporary String Variable Which Will be
     *  Used in order to Determine the Results of the Secondary
     *  Part of the User Response Validity Test.
     */
    public String userResponseValue = "";
    
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "First Name" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] FirstNameField = {false, false, false};
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "Last Name" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] LastNameField = {false, false, false};
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "Email Address" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] EmailField = {false, false};
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "Username" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] UsernameField = {false, false};
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "Confirm Username" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] ConfirmUsernameField = {false, false};
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "Password" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] PasswordField = {false, false};
    /**
     *  Create a Boolean Array Value Which will be Used in the Second
     *  Part of the User Response Validity Test in order to Determine
     *  if the "Confirm Password" Response Field Contains a User Response
     *  with Prohibited Characters or Whitespace.
     */
    public static boolean[] ConfirmPasswordField = {false, false};
    
    /**
     *  Create Reference to the Custom Class Which is Used to
     *  Check For Presence of Prohibited Characters within the
     *  User Response String Values.
     */
    public StringInputChecker inputChecker = new StringInputChecker();
    /**
     *  Create Reference to Overhead Synchronized Information Tracker
     *  Class.
     */
    public ClassInstanceInformationTracker classInstanceTracker = new ClassInstanceInformationTracker();
    /**
     *  Create Reference to Overhead Synchronized Information Tracker
     *  Class.
     */
    public TrackerObject tracker = new TrackerObject();
    /**
     *  This Integer Value is Used to Determine How
     *  Many Errors of a Certain Type have Occurred in the
     *  Information Validity Check Process.
     */
    public int counter = 0;   
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    private class TaskHandler extends SwingWorker<Void,Void> {
        
        /**
         * Method for Separate EventQueue Thread
         * to Execute.
         **/
        @Override
        protected Void doInBackground() throws Exception {
            
            /**
             *  Reset the Global Continue Boolean Variable
             *  Which is Responsible for Determining Whether
             *  or Not the Thread Should Continue its Execution
             *  Process.
             */
            cont = true;
        
            /**
             *  Change the Aesthetic Properties of All the User
             *  Response Components Present Within the Form.
             */
            setUserResponseComponentAesthetics();
            /**
             *  Reset the Global Boolean Error Counter
             *  Array to its Default Set of Entry Values.
             */
            resetErrorCounterBooleanArray();

            /**
             *  Convert the "Password" JPasswordField User Response into
             *  a String Variable.
             */
            String passwordOne = new String(jPasswordField1.getPassword());
            /**
             *  Convert the "Confirm Password" JPasswordField User Response into
             *  a String Variable.
             */
            String passwordTwo = new String(jPasswordField2.getPassword());

            /**
             *  If Any of the User Response Fields Contain Either the Default Text Value or an Empty String,
             *  then Execute this Code Block. This Conditional Block Will Determine the Reason for the Validity
             *  Check Failure and Create a Appropriate Warning Message GUI Window to Alert the User of Why the
             *  Task Has Failed.
             */
            if ((jTextField1.getText().equalsIgnoreCase("First Name") || jTextField1.getText().equalsIgnoreCase("")) ||
                (jTextField2.getText().equalsIgnoreCase("Last Name") || jTextField2.getText().equalsIgnoreCase("")) ||
                (jTextField3.getText().equalsIgnoreCase("Email Address") || jTextField3.getText().equalsIgnoreCase("")) ||
                (jTextField4.getText().equalsIgnoreCase("Username") || jTextField4.getText().equalsIgnoreCase("")) ||
                (jTextField5.getText().equalsIgnoreCase("Confirm Username") || jTextField5.getText().equalsIgnoreCase("")) ||
                (passwordOne.equalsIgnoreCase("Password") || passwordOne.equalsIgnoreCase("")) ||
                (passwordTwo.equalsIgnoreCase("Confirm Password") || passwordTwo.equalsIgnoreCase(""))) {

                /**
                 *  If the "First Name" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the First Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (jTextField1.getText().equalsIgnoreCase("First Name") || jTextField1.getText().equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[0] = true;
                }

                /**
                 *  If the "Last Name" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the Second Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (jTextField2.getText().equalsIgnoreCase("Last Name") || jTextField2.getText().equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[1] = true;
                }
                
                /**
                 *  If the "Email Address" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the Third Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (jTextField3.getText().equalsIgnoreCase("Email Address") || jTextField3.getText().equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[2] = true;
                }

                /**
                 *  If the "Username" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the Forth Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (jTextField4.getText().equalsIgnoreCase("Username") || jTextField4.getText().equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[3] = true;
                }

                /**
                 *  If the "Confirm Username" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the Fifth Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (jTextField5.getText().equalsIgnoreCase("Confirm Username") || jTextField5.getText().equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[4] = true;
                }

                /**
                 *  If the "Password" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the Sixth Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (passwordOne.equalsIgnoreCase("Password") || passwordOne.equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[5] = true;
                }

                /**
                 *  If the "Confirm Password" User Response Field Contains Either the Default Text Value or an Empty
                 *  String, then set the Seventh Error Counter Array Index as True. This Value will be Used in
                 *  order to Determine and Create an Appropriate Status / Warning Message GUI Window for the User.
                 */
                if (passwordTwo.equalsIgnoreCase("Confirm Password") || passwordOne.equalsIgnoreCase("")) {
                    // Set Boolean Array Index Value.
                    errorCount[6] = true;
                }
                
                /**
                 *  Check to See if Multiple of the User Response Fields Are Missing Information using the Error
                 *  Counter Boolean Array Values we Calculated Previously. If so, then Create a Custom Status /
                 *  Warning Message GUI Window and Display it to the User.
                 */
                if ((errorCount[0] == true && errorCount[1] == true) || (errorCount[0] == true && errorCount[2] == true) || (errorCount[0] == true && errorCount[3] == true) ||
                    (errorCount[0] == true && errorCount[4] == true) || (errorCount[0] == true && errorCount[5] == true) || (errorCount[0] == true && errorCount[6] == true) ||
                    (errorCount[1] == true && errorCount[2] == true) || (errorCount[1] == true && errorCount[3] == true) || (errorCount[1] == true && errorCount[4] == true) || 
                    (errorCount[1] == true && errorCount[5] == true) || (errorCount[1] == true && errorCount[6] == true) || (errorCount[2] == true && errorCount[3] == true) ||  
                    (errorCount[2] == true && errorCount[4] == true) || (errorCount[2] == true && errorCount[5] == true) || (errorCount[2] == true && errorCount[6] == true) ||
                    (errorCount[3] == true && errorCount[4] == true) || (errorCount[3] == true && errorCount[5] == true) || (errorCount[3] == true && errorCount[6] == true) ||
                    (errorCount[4] == true && errorCount[5] == true) || (errorCount[4] == true && errorCount[6] == true) || (errorCount[5] == true && errorCount[6] == true)) {

                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(0, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Multiple Fields Contain Missing or Incorrect Information. Please Ensure that you have Entered a Response in Every Required Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "First Name" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[0] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(1, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'First Name' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "Last Name" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[1] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(2, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'Last Name' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "Email Address" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[2] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(3, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'Email Address' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "Username" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[3] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(4, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'Username' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "Confirm Username" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[4] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(5, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'Confirm Username' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "Password" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[5] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(6, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'Password' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
                /**
                 *  If the "Confirm Password" User Response Field is Missing a User
                 *  Input Response, then Execute the Following Code Block. Then
                 *  Create a Custom Status / Warning Message Based on the Result.
                 */
                else if (errorCount[6] == true) {
                    
                    // Create New Instance of the Status / Warning Message Pop-Up GUI Class.
                    StatusMessageAccountCreation smac = new StatusMessageAccountCreation(7, 0, null);
                    
                    // Create Custom HTML Formatted Message For Status GUI Screen.
                    String formattedHTML = "<html><center>Please Enter A Valid Response in the 'Confirm Password' Information Field.</center></html>";
                    // Set the Custom Status Message Value as the Display Text Value.
                    smac.setStatusMessageDisplayMessage(formattedHTML);
                    // Set the Emblem Type within the Window.
                    smac.setStatusMessageEmblem(1);
                    
                    /**
                     *  Hide the Loader / Searching GIF Image JLabel
                     *  Seeing as the Account Creation Process has Ended
                     *  in Failure.
                     */
                    setLoaderImageVisibility(false);
                    
                    // Show the Custom GUI Message Window.
                    smac.setVisible(true);

                    /**
                    * Disable the User Response Components Until the User
                    * Exits From the Warning Message GUI Window Form.
                    */
                    setComponentEnablementStatus(false);
                }
            }
            /**
             *  If the User has Entered an Input Value in Each of the
             *  Required Fields, then Continue on to the Second Part of the
             *  Information Validity Checking Process which Includes
             *  Checking the User Responses for Prohibited Characters
             *  within the Responses (i.e Numbers or Special Characters) and
             *  Checking to Ensure that the User Responses Don't Contain or
             *  are only WhiteSpace.
             */
            else {

                /**
                 *  Reset the Global Boolean Array Check Variables,
                 *  Which are used in the Second Part of the Validity
                 *  Checking Process, to their Default Values in Case
                 *  they have been manipulated During a Previously
                 *  Attempted Account Creation Process.
                 */
                resetBooleanArrayValues();
                
                /**
                 *  Retrieve the User Response Value From the "First Name"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = jTextField1.getText();

                /**
                 *  If the User Response Value For the "First Name" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, There Can be No Number Characters
                 *  Used, so we have to Ensure that there are none Present in Addition to
                 *  Prohibited Special Characters and Whitespace.
                 */
                if ((userResponseValue.isBlank() == true) || (inputChecker.checkForOnlyNumbersInString(userResponseValue) == true) || (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true)) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        FirstNameField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Digit Characters.
                     */
                    if (inputChecker.checkForOnlyNumbersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        FirstNameField[1] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        FirstNameField[2] = true;
                    }
                }

                /**
                 *  Retrieve the User Response Value From the "Last Name"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = jTextField2.getText();

                /**
                 *  If the User Response Value For the "Last Name" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, There Can be No Number Characters
                 *  Used, so we have to Ensure that there are none Present in Addition to
                 *  Prohibited Special Characters and Whitespace.
                 */
                if (((userResponseValue.isBlank() == true) || (inputChecker.checkForOnlyNumbersInString(userResponseValue) == true) || (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true))) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        LastNameField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Digit Characters.
                     */
                    if (inputChecker.checkForOnlyNumbersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        LastNameField[1] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        LastNameField[2] = true;
                    }
                }

                /**
                 *  Retrieve the User Response Value From the "Email Address"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = jTextField3.getText();

                /**
                 *  If the User Response Value For the "Email Address" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, The User is Capable of Using
                 *  Numbers in their Response Value, so we will only Check For
                 *  Prohibited Special Characters and Whitespace.
                 */
                if (((userResponseValue.isBlank() == true) || (inputChecker.checkForSpecialCharactersInStringEmail(userResponseValue) == true))) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        EmailField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInStringEmail(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        EmailField[1] = true;
                    }
                }

                /**
                 *  Retrieve the User Response Value From the "Username"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = jTextField4.getText();

                /**
                 *  If the User Response Value For the "Username" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, The User is Capable of Using
                 *  Numbers in their Response Value, so we will only Check For
                 *  Prohibited Special Characters and Whitespace.
                 */
                if (((userResponseValue.isBlank() == true) || (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true))) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        UsernameField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        UsernameField[1] = true;
                    }
                }

                /**
                 *  Retrieve the User Response Value From the "Confirm Username"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = jTextField5.getText();

                /**
                 *  If the User Response Value For the "Confirm Username" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, The User is Capable of Using
                 *  Numbers in their Response Value, so we will only Check For
                 *  Prohibited Special Characters and Whitespace.
                 */
                if (((userResponseValue.isBlank() == true) || (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true))) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        ConfirmUsernameField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        ConfirmUsernameField[1] = true;
                    }
                }

                /**
                 *  Retrieve the User Response Value From the "Password"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = new String(jPasswordField1.getPassword());

                /**
                 *  If the User Response Value For the "Password" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, The User is Capable of Using
                 *  Numbers in their Response Value, so we will only Check For
                 *  Prohibited Special Characters and Whitespace.
                 */
                if (((userResponseValue.isBlank() == true) || (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true))) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        PasswordField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        PasswordField[1] = true;
                    }
                }

                /**
                 *  Retrieve the User Response Value From the "Confirm Password"
                 *  Information Field and Store it in the Global Comparison
                 *  / Operation String. This Variable will be Used in Order to
                 *  Determine whether or Not the User Response Value Contains
                 *  any Prohibited Characters or Only Consists of Whitespace.
                 */
                userResponseValue = new String(jPasswordField2.getPassword());

                /**
                 *  If the User Response Value For the "Confirm Password" Field
                 *  Contains Any Whitespace or Prohibited Characters, then Execute
                 *  Code Block. In this Particular Field, The User is Capable of Using
                 *  Numbers in their Response Value, so we will only Check For
                 *  Prohibited Special Characters and Whitespace.
                 */
                if (((userResponseValue.isBlank() == true) || (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true))) {
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Whitespace Characters.
                     */
                    if (userResponseValue.isBlank() == true) {
                        // Set Boolean Array Entry Error Value.
                        ConfirmPasswordField[0] = true;
                    }
                    /**
                     *  Check to See if the User Response Contains
                     *  Any or is Solely Composed of Prohibited Special Characters.
                     */
                    if (inputChecker.checkForSpecialCharactersInString(userResponseValue) == true) {
                        // Set Boolean Array Entry Error Value.
                        ConfirmPasswordField[1] = true;
                    }
                }

                /**
                 *  Invoke the Error Status Determination Method Located Within
                 *  the String Input Checker Class Instance. This Method will Provide
                 *  the SwingWorker Thread with a String Result Message That Determines How the
                 *  Thread should continue to Operate. If the Result of the Status Message
                 *  is Anything other than the Value: "All Fields Contain Valid Answers.",
                 *  then the Thread will Spawn a Warning Message Window Which Lets the
                 *  User Know Where the Error(s) have Occurred. Otherwise, the Thread
                 *  will be Able to Continue on the Last Part of the User Response
                 *  Validation Process.
                 */
                userResponseValue = inputChecker.determineErrorStatus(FirstNameField, LastNameField, EmailField, UsernameField, ConfirmUsernameField, PasswordField, ConfirmPasswordField);
                
                /**
                 *  Convert All of the Validity Check Results Found Earlier
                 *  into a Single Boolean Array Entry.
                 */
                boolean[] conversion = createResultArray(FirstNameField, LastNameField, EmailField, UsernameField, ConfirmUsernameField, PasswordField, ConfirmPasswordField);
                
                /**
                 *  After we have Retrieved the Status Message String in the
                 *  Previous Step, we will run the new Value Through the
                 *  Set Results Method. This Method will Either Return a
                 *  Value of True, Which Means an Error Has Occurred in the
                 *  Validation Process, or False, Which Means that all of
                 *  the User Response Information is Valid.
                 */
                value = setResults(userResponseValue, conversion);

                /**
                 *  If the Returned Value From the Set Results Method
                 *  is Equal to True, this Means an Error Has Occurred.
                 *  So, Change the Continue Status Boolean Value to
                 *  False which will cause the Thread to Stop Execution.
                 */
                if (value == true) {
                    // Stop Thread Execution.
                    cont = false;
                }

                /**
                 *  If the All of the User Response Values have Been Deemed
                 *  to Contains Valid Answers which Don't Contain Whitespace
                 *  or Special Characters, then Continue on the Third Segment
                 *  of the Validity Checking Process which Deals with Checking
                 *  Length Requirements. This Feature is Added in order to
                 *  Promote Uniqueness Amongst the User Accounts.
                 */
                if (cont == true) {
                    
                    /**
                     *  Convert the User Response 'Password' Value into a
                     *  a String Object for Comparison Purposes.
                     */
                    String passOne = new String(jPasswordField1.getPassword());
                    
                    /**
                     *  Convert the User Response 'Confirm Password' Value into a
                     *  a String Object for Comparison Purposes.
                     */
                    String passTwo = new String(jPasswordField2.getPassword());
                    
                    /**
                     *  Re-Initialize the Counter Integer Variable Which will be
                     *  used in order to Count How Many User Response
                     *  Fields Contain Answers that Don't Meet the Length
                     *  Requirement Validity Check.
                     */
                    counter = 0;

                    /**
                     *  Create Boolean Array Which is Responsible
                     *  For Recording the Results of the Third
                     *  Segment of the Validity Checking Process.
                     */
                    boolean[] checker = new boolean[5];
                    
                    /**
                     *  If the 'Email Address' Field contains a
                     *  User Response Value that is Less than
                     *  Ten Characters in Length, then Increment
                     *  the Error Counter Value.
                     */
                    if (jTextField3.getText().length() < 10) {
                        // Set Error Value.
                        checker[0] = false;
                        // Increment Error Counter.
                        counter++;
                    }
                    /**
                     *  If the 'Username' Field contains a
                     *  User Response Value that is Less than
                     *  Seven Characters in Length, then Increment
                     *  the Error Counter Value.
                     */
                    if (jTextField4.getText().length() < 7) {
                        // Set Error Value.
                        checker[1] = false;
                        // Increment Error Counter.
                        counter++;
                    }
                    /**
                     *  If the 'Confirm Username' Field contains a
                     *  User Response Value that is Less than
                     *  Seven Characters in Length, then Increment
                     *  the Error Counter Value.
                     */
                    if (jTextField5.getText().length() < 7) {
                        // Set Error Value.
                        checker[2] = false;
                        // Increment Error Counter.
                        counter++;
                    }
                    /**
                     *  If the 'Password' Field contains a
                     *  User Response Value that is Less than
                     *  Eleven Characters in Length, then Increment
                     *  the Error Counter Value.
                     */
                    if (passOne.length() < 11) {
                        // Set Error Value.
                        checker[3] = false;
                        // Increment Error Counter.
                        counter++;
                    }
                    /**
                     *  If the 'Confirm Password' Field contains a
                     *  User Response Value that is Less than
                     *  Eleven Characters in Length, then Increment
                     *  the Error Counter Value.
                     */
                    if (passTwo.length() < 11) {
                        // Set Error Value.
                        checker[4] = false;
                        // Increment Error Counter.
                        counter++;
                    }

                    /**
                     *  If there are Multiple User Response
                     *  Fields that Contains Answers of an
                     *  Invalid Length, then Execute Code Block.
                     */
                    if (counter > 1) {
                        // Create New Instance of the Status Message Class.
                        StatusMessageAccountCreation smac = new StatusMessageAccountCreation(25, 0, checker);
                        
                        // Create Custom Error Display Message.
                        String formattedHTML = "<html><center>Multiple Fields Contain Responses of an Invalid Length. Please Check the Suggestion Box for the Required Character Length Values of Each Field and Try Again.</center></html>";

                        // Set the GUI Window Display Message.
                        smac.setStatusMessageDisplayMessage(formattedHTML);

                        // Set the Emblem Image of the GUI Message.
                        smac.setStatusMessageEmblem(1);

                        /**
                         * Disable the User Response Components Until the User
                         * Exits From the Warning Message GUI Window Form.
                         */
                        setComponentEnablementStatus(false);

                        /**
                         *  Hide the Loading / Searching GIF Image
                         *  Seeing as the Account Creation Process
                         *  Has Ended in Failure.
                         */
                        setLoaderImageVisibility(false);
                        
                        /**
                         *  Stop Thread Execution.
                         */
                        cont = false;
                    }
                    /**
                     *  If a Single Error Response Field Contains
                     *  an Answer of Invalid Length, then Execute
                     *  Code Block.
                     */
                    else if (counter == 1) {
                        
                        // Initialize New Instance of the Status Message Class.
                        StatusMessageAccountCreation smac;
                        
                        // Create Custom Error Display Message.
                        String formattedHTML = "";
                        
                        /**
                         *  If the 'Email Address' Field Doesn't Meet
                         *  the Character Length Requirement.
                         */
                        if (checker[0] == false) {
                            // Set New Instance of the Status Message Class.
                            smac = new StatusMessageAccountCreation(25, 0, null);
                        
                            // Create Custom Error Display Message.
                            formattedHTML = "<html><center>The Response Entered into the 'Email Address' Field Doesn't Meet the Ten Character Requirement. Please Choose a Different Response.</center></html>";
                        
                            // Set the GUI Window Display Message.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);
                        }
                        /**
                         *  If the 'Username' Field Doesn't Meet
                         *  the Character Length Requirement.
                         */
                        else if (checker[1] == false) {
                            // Set New Instance of the Status Message Class.
                            smac = new StatusMessageAccountCreation(26, 0, null);
                        
                            // Create Custom Error Display Message.
                            formattedHTML = "<html><center>The Response Entered into the 'Username' Field Doesn't Meet the Seven Character Requirement. Please Choose a Different Response.</center></html>";
                        
                            // Set the GUI Window Display Message.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);
                        }
                        /**
                         *  If the 'Confirm Username' Field Doesn't Meet
                         *  the Character Length Requirement.
                         */
                        else if (checker[2] == false) {
                            // Set New Instance of the Status Message Class.
                            smac = new StatusMessageAccountCreation(27, 0, null);
                            
                            // Create Custom Error Display Message.
                            formattedHTML = "<html><center>The Response Entered into the 'Confirm Username' Field Doesn't Meet the Seven Character Requirement. Please Choose a Different Response.</center></html>";
                        
                            // Set the GUI Window Display Message.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);
                        }
                        /**
                         *  If the 'Password' Field Doesn't Meet
                         *  the Character Length Requirement.
                         */
                        else if (checker[3] == false) {
                            // Set New Instance of the Status Message Class.
                            smac = new StatusMessageAccountCreation(28, 0, null);
                            
                            // Create Custom Error Display Message.
                            formattedHTML = "<html><center>The Response Entered into the 'Password' Field Doesn't Meet the Eleven Character Requirement. Please Choose a Different Response.</center></html>";
                            
                            // Set the GUI Window Display Message.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);
                        }
                        /**
                         *  If the 'Confirm Password' Field Doesn't Meet
                         *  the Character Length Requirement.
                         */
                        else if (checker[4] == false) {
                            // Set New Instance of the Status Message Class.
                            smac = new StatusMessageAccountCreation(29, 0, null);
                            
                            // Create Custom Error Display Message.
                            formattedHTML = "<html><center>The Response Entered into the 'Confirm Password' Field Doesn't Meet the Eleven Character Requirement. Please Choose a Different Response.</center></html>";
                            
                            // Set the GUI Window Display Message.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);
                        }

                        /**
                         * Disable the User Response Components Until the User
                         * Exits From the Warning Message GUI Window Form.
                         */
                        setComponentEnablementStatus(false);

                        /**
                         *  Hide the Loading / Searching GIF Image
                         *  Seeing as the Account Creation Process
                         *  Has Ended in Failure.
                         */
                        setLoaderImageVisibility(false);
                        
                        /**
                         *  Stop Thread Execution.
                         */
                        cont = false;
                    }
                    /**
                     *  We have Now Verified that All of the User's
                     *  Response Values are of the Required Lengths.
                     *  From here, we perform the Forth Segment of the
                     *  Response Validity Test where we Check to See
                     *  if the Email Address Value is an Actual Email
                     *  Address and if the Username and Password Field
                     *  Values Match their Confirm Versions.
                     */
                    else {
                        /**
                         *  If the Email Address Field Doesn't Contain the
                         *  '@' Character within the Response, it isn't
                         *  Considered to be a Valid Email Address.
                         */
                        if (!jTextField3.getText().contains("@")) {
                            // Create New Instance of the Status Message Class.
                            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(30, 0, null);
                            
                            // Create Custom Error Display Message.
                            String formattedHTML = "<html><center>You have Entered an Invalid Email Address Value. Please Include the '@' Character in Your Response.</center></html>";
                        
                            // Display the Custom Error Message on the Pop-Up Form.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);

                            /**
                             * Disable the User Response Components Until the User
                             * Exits From the Warning Message GUI Window Form.
                             */
                            setComponentEnablementStatus(false);

                            /**
                             *  Hide the Loading / Searching GIF Image
                             *  Seeing as the Account Creation Process
                             *  Has Ended in Failure.
                             */
                            setLoaderImageVisibility(false);
                            
                            /**
                             *  Stop the Thread's Execution Due
                             *  to the Presence of an Error.
                             */
                            cont = false;
                        }
                        /**
                         *  If the "Username" and "Confirm Username" Fields Don't Contain
                         *  Matching Values, then show a Warning Message to the User.
                         */
                        else if (!jTextField4.getText().equalsIgnoreCase(jTextField5.getText())) {
                            // Create New Instance of the Status Message Class.
                            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(31, 0, null);
                            
                            // Create Custom Error Display Message.
                            String formattedHTML = "<html><center>Please Ensure that the Responses You've Entered into the 'Username' and 'Confirm Username' Fields are Matching Values.</center></html>";
                        
                            // Display the Custom Error Message on the Pop-Up Form.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);

                            /**
                             * Disable the User Response Components Until the User
                             * Exits From the Warning Message GUI Window Form.
                             */
                            setComponentEnablementStatus(false);

                            /**
                             *  Hide the Loading / Searching GIF Image
                             *  Seeing as the Account Creation Process
                             *  Has Ended in Failure.
                             */
                            setLoaderImageVisibility(false);
                            
                            /**
                             *  Stop the Thread's Execution Due
                             *  to the Presence of an Error.
                             */
                            cont = false;
                        }
                        /**
                         *  If the "Password" and "Confirm Password" Fields Don't Contain
                         *  Matching Values, then show a Warning Message to the User.
                         */
                        else if (!passOne.equalsIgnoreCase(passTwo)) {
                            // Create New Instance of the Status Message Class.
                            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(32, 0, null);
                            
                            // Create Custom Error Display Message.
                            String formattedHTML = "<html><center>Please Ensure that the Responses You've Entered into the 'Password' and 'Confirm Password' Fields are Matching Values.</center></html>";
                        
                            // Display the Custom Error Message on the Pop-Up Form.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);

                            /**
                             * Disable the User Response Components Until the User
                             * Exits From the Warning Message GUI Window Form.
                             */
                            setComponentEnablementStatus(false);

                            /**
                             *  Hide the Loading / Searching GIF Image
                             *  Seeing as the Account Creation Process
                             *  Has Ended in Failure.
                             */
                            setLoaderImageVisibility(false);
                            
                            /**
                             *  Stop the Thread's Execution Due
                             *  to the Presence of an Error.
                             */
                            cont = false;
                        }
                    }
                }

                /**
                 *  If the Responses that the User has Entered All Contain
                 *  Valid Information which have no Prohibited Characters / 
                 *  Whitespace contained within them and meet the Validation
                 *  / Length Requirements; then they have Officially Passed
                 *  the Validation Process. Now, we must Ensure that the
                 *  Information Entered isn't Already Present Within the
                 *  Remote Database.
                 */
                if (cont == true) {
                    /**
                     *  Declare a new Instance of the Database Manager MySQL
                     *  Class. This Class Contains Multiple Methods which are
                     *  Used to Query, Update, or Remove Data from the Remote
                     *  Database. The Remote Database is Run through the
                     *  MyPHPAdmin Website. More information Concerning the
                     *  Remote Database and the Methods Used to Manipulate
                     *  it can be Found in the Database Manager MySQL Class.
                     */
                    DatabaseManagerMySQL manager = new DatabaseManagerMySQL();

                    /**
                     *  In this Next Conditional Statement, we Use the Check Username
                     *  Availability Method in Order to Determine if the Remote
                     *  Database Already Contains a User Account Profile with the
                     *  Current User's Specified Username. This Method will Search
                     *  for all the Username Values in Both the "Instructor" and "Student"
                     *  Table in order to Determine if the Specified Value is Unique.
                     *  If this Value is Already Chosen By Another Profile, then
                     *  Show an Error Message GUI Which Alerts the User of this Fact.
                     */
                    
                    /**
                     *  Get the Results of the Username Availability Test.
                     */
                    DatabaseOperationResult result = manager.checkUsernameAvalability(jTextField4.getText().trim());
                    
                    /**
                     *  If the Overall Result of the Check Username
                     *  Availability Test is a Value of False, it means
                     *  that either the Specified Username Value is Present
                     *  or that an SQL Exception has Occurred Within the
                     *  Program.
                     */
                    if (result.getResult() == false) {
                        
                        /**
                         *  If the Error Type is the String "Username Present"
                         *  then Create a Custom Error Message for the User.
                         */
                        if (result.getType().equalsIgnoreCase("Username Present")) {
                            // Create New Instance of the Status Message Class.
                            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(33, 0, null);
                            
                            // Create Custom Error Display Message.
                            String formattedHTML = "<html><center>Sorry, the 'Username' Value that you have Specified is Already Taken. Please Choose Another Response and Try Again.</center></html>";
                        
                            // Display the Custom Error Message on the Pop-Up Form.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);

                            /**
                             * Disable the User Response Components Until the User
                             * Exits From the Warning Message GUI Window Form.
                             */
                            setComponentEnablementStatus(false);

                            /**
                             *  Hide the Loading / Searching GIF Image
                             *  Seeing as the Account Creation Process
                             *  Has Ended in Failure.
                             */
                            setLoaderImageVisibility(false);
                        }
                        /**
                         *  If the Error Type is the String "SQL Exception"
                         *  then Create a Custom Error Message for the User.
                         */
                        else if (result.getType().equalsIgnoreCase("SQL Exception")) {
                            // Create New Instance of the Status Message Class.
                            StatusMessageAccountCreation smac = new StatusMessageAccountCreation(34, 0, null);
                            
                            // Create Custom Error Display Message.
                            String formattedHTML = "<html><center>An Error Has Occured While Attempting to Create Your Account. Please Try Again Later or Contact a Developer Should the Problem Persist.</center></html>";
                        
                            // Display the Custom Error Message on the Pop-Up Form.
                            smac.setStatusMessageDisplayMessage(formattedHTML);
                            
                            // Set the Emblem Image of the GUI Message.
                            smac.setStatusMessageEmblem(1);

                            /**
                             * Disable the User Response Components Until the User
                             * Exits From the Warning Message GUI Window Form.
                             */
                            setComponentEnablementStatus(false);

                            /**
                             *  Hide the Loading / Searching GIF Image
                             *  Seeing as the Account Creation Process
                             *  Has Ended in Failure.
                             */
                            setLoaderImageVisibility(false);
                        }
                    }
                    /**
                     *  If the Overall Return Value of the Database Operation
                     *  Result is True, then it Means that the Specified Username
                     *  is Currently Available and that the Thread can Create
                     *  the New "Instructor" Account.
                     */
                    else {
                        /**
                         *  Create the Display Name Value Which is A Combination of the
                         *  User's First and Last Name Values. This Cannot Be Changed
                         *  once it has been Created. This Value is What will be Displayed
                         *  in Both the Attendance Server and Profile Section of the
                         *  Applications Main Screen.
                         */
                        String displayName = jTextField1.getText() + " " + jTextField2.getText();

                        /**
                         *  Save the User's Password Value.
                         */
                        String password = new String(jPasswordField1.getPassword());
                        
                        /**
                         *  Create a New Custom Instructor Object Which Holds Data Fields For
                         *  All of the User Response Information Values. Additionally, we will
                         *  Instantiate this Object Using the Default Values for the Other
                         *  Miscellaneous Data Entries is Contains.
                         */
                        Instructor instructor = new Instructor(0, jTextField1.getText(), jTextField2.getText(), jTextField4.getText(), 
                                password, jTextField3.getText(), displayName,
                                "", "", "", "/mothershipattendance/Image/ProfilePictures/Large/ProfilePicture20.png",
                                "/mothershipattendance/Image/ProfilePictures/Scaled/ProfilePicture20Scaled.png",
                                "/mothershipattendance/Image/ProfilePictures/Small/ProfilePicture20Small.png",
                                "/mothershipattendance/Image/ProfilePictures/XSChatIcons/ProfilePictureXS20.png");

                        /**
                         *  Create a New Custom Database Return Object Which is Used
                         *  in order to Find the Results of the "Instructor" Account
                         *  Creation Process.
                         */
                        AccountCreationResults createresult = manager.insertInstructorAccount(instructor);

                        
                        if (createresult.getResult() == false) {
                            AccountCreationFailed fail = new AccountCreationFailed();

                            /**
                            *  Hide the Loader / Searching GIF Image JLabel
                            *  Seeing as the Account Creation Process has Ended
                            *  in Failure.
                            */
                            setLoaderImageVisibility(false);
                            fail.setVisible(true);
                        }
                        else {
                            AccountCreationSuccessful create = new AccountCreationSuccessful();
                            /**
                            *  Hide the Loader / Searching GIF Image JLabel
                            *  Seeing as the Account Creation Process has Ended
                            *  in Failure.
                            */
                            setLoaderImageVisibility(false);
                            create.setVisible(true);

                            instructor.setInstructorID(createresult.getID());
                            tracker.setCurrentInstructorInformation(instructor);

                            dispose();
                        }
                    }
                }
            }
        
            return null;
        }
    }
}