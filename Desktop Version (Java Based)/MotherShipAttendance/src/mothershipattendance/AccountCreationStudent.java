/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;


import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author tylerfontana
 */
public class AccountCreationStudent extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public AccountCreationStudent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel7 = new javax.swing.JPanel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Account Creation (Student)");
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));
        setSize(500, 562);
        setLocationRelativeTo(null);

        jPanel2.setOpaque(false);
        jPanel2.setRequestFocusEnabled(false);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/CreateAccountStudentScaled.png"))); // NOI18N

        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("First Name");
        jTextField1.setToolTipText("<html>This Field is Meant to Contain the First Name of The Student<br>who is Attempting to "
                + "Create An Mothership Attendance<br>Account. Prohibited Characters Include:<br><br><center>{ “ 1 ”, “ 2 ”, “ 3 ”, “ 4 ”,"
                + " “ 5 ”, “ 6 ”, “ 7 ”, “ 8 ”, “ 9 ”, “ = ”,   <br> “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, "
                + "“ ; ”, “ < ”, <br>“ > ”, “ ! ”, “ ? ”, “ . ”, “ @ ”, “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, "
                + "“ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br> “ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”, <br>  “ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, <br> “ § ”,"
                + " “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”, <br> “ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”,"
                + " “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}</center></html>");
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        jTextField6.setForeground(new java.awt.Color(153, 153, 153));
        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6.setText("Student Identification Number");
        jTextField6.setToolTipText("<html>This Field is Meant to Contain the University Issued<br> Student Identification Number"
                + " Given to Each Student<br> Upon Successful Enrollment.This Field Should Contain<br> A Number Value In The Specified"
                + " Range:<br><center> (2,000,000 - 10,000,000)<br><br>*MUST Be A Valid Number Value*</center></html>");
        jTextField6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField6FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField6FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(48, 48, 48)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(376, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(106, 106, 106)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(421, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel2);

        jPanel1.setOpaque(false);

        jTextField2.setForeground(new java.awt.Color(153, 153, 153));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("Last Name");
        jTextField2.setToolTipText("<html>This Field is Meant to Contain the Last Name or<br>Surname of The Student who is Attempting to "
                + "Create<br> A Mothership Attendance Account. Prohibited Characters <br>Include:<br><br><center>{ “ 1 ”, “ 2 ”, “ 3 ”, “ 4 ”,"
                + " “ 5 ”, “ 6 ”, “ 7 ”, “ 8 ”, “ 9 ”, “ = ”,   <br> “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, "
                + "“ ; ”, “ < ”, <br>“ > ”, “ ! ”, “ ? ”, “ . ”, “ @ ”, “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, "
                + "“ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br> “ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”, <br>  “ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, <br> “ § ”,"
                + " “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”, <br> “ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”,"
                + " “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}</center></html>");
        jTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Please Enter the Required Information Below:   ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(52, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(195, 195, 195)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(332, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(75, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(463, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jPanel3.setOpaque(false);

        jTextField3.setForeground(new java.awt.Color(153, 153, 153));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("Email Address");
        jTextField3.setToolTipText("<html>This Field is Meant to Contain the Associated University<br>Issued "
                + "Email Address of The Student who is Attempting<br>to Create An Mothership Attendance Account. "
                + "This Field<br>Must Contain a Valid Email Address Value Which is<br>Denoted by the “ @ ” Symbol."
                + " Prohibited Characters<br>Include:<br><center><br>{“ = ”,  “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, "
                + "“ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”,<br> “ < ”,  “ > ”, “ ! ”, “ ? ”, “ . ”,  “ # ”, “ $ ”, “ % ”,"
                + " “ ^ ”, “ & ”,<br> " + " “ * ”, “ ( ”, “ ) ”, “ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, :<br> "
                + "“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, “ ® ”, :<br>“ ß ”, “ Ý ”, “ … ”, "
                + "“ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, :<br>“ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”, “ Ô ”, "
                + "“ • ”, “ Ò ”, “ Â ”, “ Ø ”,  :<br> “ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, "
                + "“ ƒ ”, :<br> “ § ”, “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”, :<br> “ þ ”, "
                + "“ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \","
                + " \" > \", \" < \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Have A Value Containing The '@' "
                + "<br>Symbol And Be Longer Than Ten Characters.</center></html>");
        jTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(239, 239, 239)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(288, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel3);

        jPanel4.setOpaque(false);

        jTextField4.setForeground(new java.awt.Color(153, 153, 153));
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4.setText("Username");
        jTextField4.setToolTipText("<html> A Unique Username Value Chosen By the Student. This Value<br>Will Be Later "
                + "Used in Allowing the Current Student Access into the<br>Main Application Where They Can Connect Via "
                + "Bluetooth and Mark<br>Their Attendance. Prohibited Characters Include: <br><br><center>{“ = ”,  “ [ ”,"
                + " “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”,<br>" + " “ < ”,  “ > ”, “ ! ”, “ ? ”,"
                + " “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, “ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”,"
                + " “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, “ ® ”,<br>“ ß ”,"
                + " “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br>“ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br>“ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”,"
                + " “ ƒ ”, “ @ ”,<br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”,<br> “ þ ”, “ ý ”,"
                + " “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”,<br>\" / \", \" \\ \", \" ^ \", \" > \", \" "
                + "< \", \" - \", \" ` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Be Longer"
                + "<br>Than Seven Characters.*</center></html>");
        jTextField4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField4FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(283, 283, 283)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(244, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel4);

        jPanel5.setOpaque(false);

        jTextField5.setForeground(new java.awt.Color(153, 153, 153));
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setText("Confirm Username");
        jTextField5.setToolTipText("<html>This Field Must Contain The Same Value Entered in the Username<br>"
                + "Information Field. These two Fields are both included to ensure that<br>The Student Creating the Account "
                + "is Positive of The Username<br>Selection They Have Entered. Prohibited Characters Include:<br><center><br>"
                + "{“ = ”,  “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”, <br>" +
                " “ < ”,  “ > ”, “ ! ”, “ ? ”, “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br> “ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, " + "“ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”,"
                + " “ ¼ ”, “ ¾ ”,  " + "“ œ ”, “ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”,"
                + " “ Ç ”, <br>“ Î ”," + " “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”, “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br> “ Œ ”, "
                + "“ Í ”, “  ”, “ – ”, " + "“ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, “ @ ”,<br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, "
                + "“ æ ”, “ Ž ”, “ € ”, " + "“ Ð ”, “ ð ”, “ Þ ”, <br> " + "“ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”,"
                + " “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" ` \", "
                + "\" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Be Longer"
                + "<br>Than Seven Characters.*</center></html>");
        jTextField5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField5FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField5FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(327, 327, 327)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(200, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel5);

        jPanel6.setOpaque(false);

        jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
        jPasswordField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPasswordField1.setText("Password");
        jPasswordField1.setEchoChar((char)0);
        jPasswordField1.setToolTipText("<html> A Unique Password Value Chosen By the Student. This Value<br>Will Be Later "
                + "Used in Allowing the Current Student Access into the<br>Main Application Where They Can Connect Via "
                + "Bluetooth and Mark<br>Their Attendance. Prohibited Characters Include: <br><center><br>{“ = ”,  “ [ ”,"
                + " “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”,<br>" + " “ < ”,  “ > ”, “ ! ”, “ ? ”,"
                + " “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br>“ * ”, “ ( ”, “ ) ”, “ ~ ”, “ , ”, “ å ”, “ † ”, “ ç ”,"
                + " “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”, “ ¼ ”, “ ¾ ”,  “ œ ”, “ ® ”,<br>“ ß ”,"
                + " “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”, “ Ç ”, <br>“ Î ”, “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”,"
                + " “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br>“ Œ ”, “ Í ”, “  ”, “ – ”, “ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”,"
                + " “ ƒ ”, “ @ ”,<br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, “ æ ”, “ Ž ”, “ € ”, “ Ð ”, “ ð ”, “ Þ ”,<br> “ þ ”, “ ý ”,"
                + " “ ° ”, “ · ”, “ ± ”, “ Æ ”, “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" "
                + "` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Contain Both Letters And At Least"
                + "<br>Three Numbers Along With Be Longer Than Eleven Characters.*</center></html>");
        jPasswordField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(42, Short.MAX_VALUE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(370, Short.MAX_VALUE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(157, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel6);

        jPanel7.setOpaque(false);

        jPasswordField2.setForeground(new java.awt.Color(153, 153, 153));
        jPasswordField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPasswordField2.setText("Confirm Password");
        jPasswordField2.setEchoChar((char)0);
        jPasswordField2.setToolTipText("<html>This Field Must Contain The Same Value Entered in the Password<br>"
                + "Information Field. These two Fields are both included to ensure that<br>The Student Creating the Account "
                + "is Positive of The Password<br>Selection They Have Entered. Prohibited Characters Include:<br><br>"
                + "<center>{“ = ”,  “ [ ”, “ ] ”, “ { ”, “ } ”, “ _ ”, “ \\ ”, “ / ”, “ | ”, “ : ”, “ ; ”, <br>" +
                " “ < ”,  “ > ”, “ ! ”, “ ? ”, “ . ”,  “ # ”, “ $ ”, “ % ”, “ ^ ”, “ & ”, <br> “ * ”, “ ( ”, “ ) ”, "
                + "“ ~ ”, “ , ”, " + "“ å ”, “ † ”, “ ç ”, “ ƒ ”, “ © ”, <br>“ ™ ”, “ š ”, “ ¬ ”, “ µ ”, “ ø ”, “ ½ ”,"
                + " “ ¼ ”, “ ¾ ”,  " + "“ œ ”, “ ® ”, <br>“ ß ”, “ Ý ”, “ … ”, “ ‰ ”, “ ˆ ”, “ ¥ ”, “ ‡ ”, “ Å ”, “ ¹ ”,"
                + " “ Ç ”, <br>“ Î ”," + " “ Ï ”, “ › ”, “ Ó ”, “ ˆ ”, “ Ô ”, “ • ”, “ Ò ”, “ Â ”, “ Ø ”,<br> “ Œ ”, "
                + "“ Í ”, “  ”, “ – ”, " + "“ º ”, “ ¡ ”, “ ™ ”, “ £ ”, “ ¢ ”, “ ƒ ”, “ @ ”, <br>“ § ”, “ ¶ ”, “ • ”, “ ª ”, "
                + "“ æ ”, “ Ž ”, “ € ”, " + "“ Ð ”, “ ð ”, “ Þ ”, <br> " + "“ þ ”, “ ý ”, “ ° ”, “ · ”, “ ± ”, “ Æ ”,"
                + " “ Ú ”, “ ¿ ”, “ ‡ ”, “ ¨ ”, “ × ”<br>\" / \", \" \\ \", \" ^ \", \" > \", \" < \", \" - \", \" "
                + "` \", \" ~ \", \" + \", \" = \"}<br><br>*This Field MUST Contain Both Letters And At Least"
                + "<br> Three Numbers Along With Be Longer Than Eleven Characters.*</center></html>");
        jPasswordField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPasswordField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordField2FocusLost(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/loadingGif2.gif"))); // NOI18N
        jLabel3.setVisible(false);
        
        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(42, Short.MAX_VALUE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(108, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addContainerGap(363, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(414, Short.MAX_VALUE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(113, Short.MAX_VALUE)))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(478, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(34, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel7);

        jPanel8.setOpaque(false);

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("jLabel2");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setVisible(false);

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/createAccountButton.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(144, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(159, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(51, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(475, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addGap(455, 455, 455)
                    .addComponent(jLabel2)
                    .addContainerGap(91, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel8);

        jPanel9.setOpaque(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/BackgroundDirectoryScreen498x560.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel9);
        
        JPopupMenu menu = new JPopupMenu();
        Action cut = new DefaultEditorKit.CutAction();
        cut.putValue(Action.NAME, "Cut");
        cut.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control X"));
        menu.add(cut);

        Action copy = new DefaultEditorKit.CopyAction();
        copy.putValue(Action.NAME, "Copy");
        copy.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control C"));
        menu.add(copy);

        Action paste = new DefaultEditorKit.PasteAction();
        paste.putValue(Action.NAME, "Paste");
        paste.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control V"));
        menu.add(paste);
        
        jTextField1.setComponentPopupMenu(menu);
        jTextField2.setComponentPopupMenu(menu);
        jTextField3.setComponentPopupMenu(menu);
        jTextField4.setComponentPopupMenu(menu);
        jTextField5.setComponentPopupMenu(menu);
        jTextField6.setComponentPopupMenu(menu);
        jPasswordField1.setComponentPopupMenu(menu);
        jPasswordField2.setComponentPopupMenu(menu);
        
        pack();
        
        jButton1.requestFocusInWindow();
    }// </editor-fold>                        

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        classInstanceTracker.setAccountCreationStudentInstance(this);
    }
    
    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {                                        
        jLabel2.setVisible(false);
        
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (jTextField1.getText().equalsIgnoreCase("First Name")) {
            // Set Display Text
            jTextField1.setText("");
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {                                      
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (jTextField1.getText().equalsIgnoreCase("")) {
            // Display Text
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
            jTextField1.setText("First Name");
        }
        else if (jTextField1.getText().equalsIgnoreCase("First Name")) {
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {                                        
        jLabel2.setVisible(false);
        
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (jTextField2.getText().equalsIgnoreCase("Last Name")) {
            // Set Display Text
            jTextField2.setText("");
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {                                      
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (jTextField2.getText().equalsIgnoreCase("")) {
            // Display Text
            jTextField2.setForeground(new java.awt.Color(153, 153, 153));
            jTextField2.setText("Last Name");
        }
        else if (jTextField2.getText().equalsIgnoreCase("Last Name")) {
            jTextField2.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {                                        
        jLabel2.setVisible(false);
        
        jTextField3.setBackground(new java.awt.Color(255, 255, 255));
        jTextField3.setForeground(new java.awt.Color(0, 0, 0));

        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (jTextField3.getText().equalsIgnoreCase("Email Address")) {
            // Set Display Text
            jTextField3.setText("");
            jTextField3.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {                                      
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (jTextField3.getText().equalsIgnoreCase("")) {
            // Display Text
            jTextField3.setForeground(new java.awt.Color(153, 153, 153));
            jTextField3.setText("Email Address");
        }
        else if (jTextField3.getText().equalsIgnoreCase("Email Address")) {
            jTextField3.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) {                                        
        jLabel2.setVisible(false);
        
        jTextField4.setBackground(new java.awt.Color(255, 255, 255));
        jTextField4.setForeground(new java.awt.Color(0, 0, 0));
        
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (jTextField4.getText().equalsIgnoreCase("Username")) {
            // Set Display Text
            jTextField4.setText("");
            jTextField4.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    private void jTextField4FocusLost(java.awt.event.FocusEvent evt) {                                      
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (jTextField4.getText().equalsIgnoreCase("")) {
            // Display Text
            jTextField4.setForeground(new java.awt.Color(153, 153, 153));
            jTextField4.setText("Username");
        }
        else if (jTextField4.getText().equalsIgnoreCase("Username")) {
            jTextField4.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    private void jTextField5FocusGained(java.awt.event.FocusEvent evt) {                                        
        jLabel2.setVisible(false);
        
        jTextField5.setBackground(new java.awt.Color(255, 255, 255));
        jTextField5.setForeground(new java.awt.Color(0, 0, 0));
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (jTextField5.getText().equalsIgnoreCase("Confirm Username")) {
            // Set Display Text
            jTextField5.setText("");
            jTextField5.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    private void jTextField5FocusLost(java.awt.event.FocusEvent evt) {                                      
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (jTextField5.getText().equalsIgnoreCase("")) {
            // Display Text
            jTextField5.setForeground(new java.awt.Color(153, 153, 153));
            jTextField5.setText("Confirm Username");
        }
        else if (jTextField5.getText().equalsIgnoreCase("Confirm Username")) {
            jTextField5.setForeground(new java.awt.Color(153, 153, 153));
        }
    }                                     

    private void jPasswordField1FocusGained(java.awt.event.FocusEvent evt) {                                            
        jLabel2.setVisible(false);
        
        String password = new String(jPasswordField1.getPassword());
        
        jPasswordField1.setBackground(new java.awt.Color(255, 255, 255));
        jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));                                          
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (password.equalsIgnoreCase("Password")) {
            // Set Display Text
            jPasswordField1.setText("");
            jPasswordField1.setEchoChar('•');
            jPasswordField1.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                           

    private void jPasswordField1FocusLost(java.awt.event.FocusEvent evt) {                                          
        String password = new String(jPasswordField1.getPassword());
        
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (password.equalsIgnoreCase("")) {
            // Display Text
            jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
            jPasswordField1.setEchoChar((char)0);
            jPasswordField1.setText("Password");
        }
        else if (password.equalsIgnoreCase("Password")) {
            jPasswordField1.setForeground(new java.awt.Color(153, 153, 153));
            jPasswordField1.setEchoChar((char)0);
        }
    }                                         

    private void jPasswordField2FocusGained(java.awt.event.FocusEvent evt) {                                            
        jLabel2.setVisible(false);
        
        String password = new String(jPasswordField2.getPassword());
        
        jPasswordField2.setBackground(new java.awt.Color(255, 255, 255));
        jPasswordField2.setForeground(new java.awt.Color(0, 0, 0));                                          
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (password.equalsIgnoreCase("Confirm Password")) {
            // Set Display Text
            jPasswordField2.setText("");
            jPasswordField2.setEchoChar('•');
            jPasswordField2.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                           

    private void jPasswordField2FocusLost(java.awt.event.FocusEvent evt) {                                          
        String password = new String(jPasswordField2.getPassword());
        
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (password.equalsIgnoreCase("")) {
            // Display Text
            jPasswordField2.setForeground(new java.awt.Color(153, 153, 153));
            jPasswordField2.setEchoChar((char)0);
            jPasswordField2.setText("Confirm Password");
        }
        else if (password.equalsIgnoreCase("Confirm Password")) {
            jPasswordField2.setForeground(new java.awt.Color(153, 153, 153));
            jPasswordField2.setEchoChar((char)0);
        }
    }                                   

    private void jTextField6FocusGained(java.awt.event.FocusEvent evt) {    
        jLabel2.setVisible(false);
        
        jTextField6.setBackground(new java.awt.Color(255, 255, 255));
        jTextField6.setForeground(new java.awt.Color(0, 0, 0));
        // If Text in Text Field is equal to Enter Username
        // Make TextField empty upon click.
        if (jTextField6.getText().equalsIgnoreCase("Student Identification Number")) {
            // Set Display Text
            jTextField6.setText("");
            jTextField6.setForeground(new java.awt.Color(0, 0, 0));
        }
    }                                       

    private void jTextField6FocusLost(java.awt.event.FocusEvent evt) {                                      
        // If Text in Text Field is empty Make TextField
        // Display Enter Username upon focus lost.
        if (jTextField6.getText().equalsIgnoreCase("")) {
            // Display Text
            jTextField6.setForeground(new java.awt.Color(153, 153, 153));
            jTextField6.setText("Student Identification Number");
        }
        else if (jTextField6.getText().equalsIgnoreCase("Student Identification Number")) {
            jTextField6.setForeground(new java.awt.Color(153, 153, 153));
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        
        jLabel2.setVisible(false);
        
        SwingWorkerAccountCreationStudent controller = new SwingWorkerAccountCreationStudent();        
        controller.execute();
        
        showLoaderImage();
    }

    public void showLoaderImage() {
        jLabel3.setVisible(true);
    }
    
    public void hideLoaderImage() {
        jLabel3.setVisible(false);
    }
    
    public boolean setResults(String result) {
        WarningMessageACIncorrectFieldModifier warnPC = new WarningMessageACIncorrectFieldModifier();
        
        if (result.equals("Multiple Fields Contain Prohibited Characters or Blank Responses.")) {
            
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in Multiple Information Fields");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The First Name Field Contains a Blank Answer.")) {
            //jTextField1.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the First Name Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The First Name Field Contains Prohibited Number Characters.")) {
            //jTextField1.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the First Name Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The First Name Field Contains Prohibited Special Characters.")) {
            //jTextField1.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the First Name Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Last Name Field Contains a Blank Answer.")) {
            //jTextField2.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            warnPC.jLabel7.setText("in the Last Name Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Last Name Field Contains Prohibited Number Characters.")) {
            //jTextField2.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Last Name Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Last Name Field Contains Prohibited Special Characters.")) {
            //jTextField2.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Last Name Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Email Address Field Contains a Blank Answer.")) {
            //jTextField3.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Email Address Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Email Address Field Contains Prohibited Special Characters.")) {
            //jTextField3.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Email Address Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Username Field Contains a Blank Answer.")) {
            //jTextField4.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Username Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Username Field Contains Prohibited Special Characters.")) {
            //jTextField4.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Username Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Confirm Username Field Contains a Blank Answer.")) {
            //jTextField5.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Confirm Username Text Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Confirm Username Field Contains Prohibited Special Characters.")) {
            //jTextField5.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Confirm Username Text Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Password Field Contains a Blank Answer.")) {
            //jPasswordField1.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Password Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Password Field Contains Prohibited Special Characters.")) {
            //jPasswordField1.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Password Information Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Confirm Password Field Contains a Blank Answer.")) {
            //jPasswordField2.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Confirm Password Text Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else if (result.equals("The Confirm Password Field Contains Prohibited Special Characters.")) {
            //jPasswordField2.setBackground(new java.awt.Color(255, 102, 102));
            jLabel2.setText(result);
            
            disableComponents();
            
            warnPC.jLabel7.setText("in the Confirm Password Text Field");
            warnPC.setVisible(true);
            
            return true;
        }
        else {
            return false;
        }
    }
    
    public void disableComponents() {
        jTextField1.setEnabled(false);
        jTextField2.setEnabled(false);
        jTextField3.setEnabled(false);
        jTextField4.setEnabled(false);
        jTextField5.setEnabled(false);
        jTextField6.setEnabled(false);
        jPasswordField1.setEnabled(false);
        jPasswordField2.setEnabled(false);
        jButton1.setEnabled(false);
    }
    
    public void resetBooleanArrayValues() {
        FirstNameField[0] = false;
        FirstNameField[1] = false;
        FirstNameField[2] = false;
        LastNameField[0] = false;
        LastNameField[1] = false;
        LastNameField[2] = false;
        EmailField[0] = false;
        EmailField[1] = false;
        UsernameField[0] = false;
        UsernameField[1] = false;
        ConfirmUsernameField[0] = false;
        ConfirmUsernameField[1] = false;
        PasswordField[0] = false;
        PasswordField[1] = false;
        ConfirmPasswordField[0] = false;
        ConfirmPasswordField[1] = false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountCreationStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountCreationStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountCreationStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountCreationStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountCreationStudent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    public static javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public static javax.swing.JPasswordField jPasswordField1;
    public static javax.swing.JPasswordField jPasswordField2;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    public static javax.swing.JTextField jTextField5;
    public static javax.swing.JTextField jTextField6;
    public boolean[] errorCount = {false,false,false,false,false,false,false,false};
    public boolean cont = true;
    public boolean value = false;
    public String resultErrorValue = "";
    public TrackerObject tracker = new TrackerObject();
    public static boolean[] FirstNameField = {false, false, false};
    public static boolean[] LastNameField = {false, false, false};
    public static boolean[] EmailField = {false, false};
    public static boolean[] UsernameField = {false, false};
    public static boolean[] ConfirmUsernameField = {false, false};
    public static boolean[] PasswordField = {false, false};
    public static boolean[] ConfirmPasswordField = {false, false};
    public StringInputChecker checker = new StringInputChecker();
    public DatabaseManagerMySQL data = new DatabaseManagerMySQL();
    public ClassInstanceInformationTracker classInstanceTracker = new ClassInstanceInformationTracker();
    public int counter = 0;
    // End of variables declaration                   

    /*
     *  LoadingScreenController is a SwingWorker Class whose
     *  doInBackground() Method is invoked upon calling the execute()
     *  method in the main class. A SwingWorker Class is the only
     *  way to safely create a seperate thread that interacts with
     *  the main EventQueue class. Should you try to invoke change to the GUI
     *  object from a non EventQueue related class, it can cause
     *  unforseen nonrepeatable errors in the programs execution.
     *
     */
    private class SwingWorkerAccountCreationStudent extends SwingWorker<Void,Void> {
        
        // Method for Seperate EventQueue Thread
        // to Execute.
        @Override
        protected Void doInBackground() throws Exception {
            
            cont = true;
        
            jTextField1.setBackground(new java.awt.Color(255, 255, 255));
            jTextField2.setBackground(new java.awt.Color(255, 255, 255));
            jTextField3.setBackground(new java.awt.Color(255, 255, 255));
            jTextField4.setBackground(new java.awt.Color(255, 255, 255));
            jTextField5.setBackground(new java.awt.Color(255, 255, 255));
            jTextField6.setBackground(new java.awt.Color(255, 255, 255));
            jPasswordField1.setBackground(new java.awt.Color(255, 255, 255));
            jPasswordField2.setBackground(new java.awt.Color(255, 255, 255));

            errorCount[0] = false;
            errorCount[1] = false;
            errorCount[2] = false;
            errorCount[3] = false;
            errorCount[4] = false;
            errorCount[5] = false;
            errorCount[6] = false;
            errorCount[7] = false;

            String passwordOne = new String(jPasswordField1.getPassword());
            String passwordTwo = new String(jPasswordField2.getPassword());

            if ((jTextField6.getText().equalsIgnoreCase("Student Identification Number") || jTextField6.getText().equalsIgnoreCase("")) ||
                (jTextField1.getText().equalsIgnoreCase("First Name") || jTextField1.getText().equalsIgnoreCase("")) ||
                (jTextField2.getText().equalsIgnoreCase("Last Name") || jTextField2.getText().equalsIgnoreCase("")) ||
                (jTextField3.getText().equalsIgnoreCase("Email Address") || jTextField3.getText().equalsIgnoreCase("")) ||
                (jTextField4.getText().equalsIgnoreCase("Username") || jTextField4.getText().equalsIgnoreCase("")) ||
                (jTextField5.getText().equalsIgnoreCase("Confirm Username") || jTextField5.getText().equalsIgnoreCase("")) ||
                (passwordOne.equalsIgnoreCase("Password") || passwordOne.equalsIgnoreCase("")) ||
                (passwordTwo.equalsIgnoreCase("Confirm Password") || passwordTwo.equalsIgnoreCase(""))) {


                if ((jTextField6.getText().equalsIgnoreCase("Student Identification Number") || jTextField6.getText().equalsIgnoreCase(""))) {
                    errorCount[0] = true;
                }

                if (jTextField1.getText().equalsIgnoreCase("First Name") || jTextField1.getText().equalsIgnoreCase("")) {
                    errorCount[1] = true;
                }

                if (jTextField2.getText().equalsIgnoreCase("Last Name") || jTextField2.getText().equalsIgnoreCase("")) {
                    errorCount[2] = true;
                }
                if (jTextField3.getText().equalsIgnoreCase("Email Address") || jTextField3.getText().equalsIgnoreCase("")) {
                    errorCount[3] = true;
                }

                if (jTextField4.getText().equalsIgnoreCase("Username") || jTextField4.getText().equalsIgnoreCase("")) {
                    errorCount[4] = true;
                }

                if (jTextField5.getText().equalsIgnoreCase("Confirm Username") || jTextField5.getText().equalsIgnoreCase("")) {
                    errorCount[5] = true;
                }

                if (passwordOne.equalsIgnoreCase("Password") || passwordOne.equalsIgnoreCase("")) {
                    errorCount[6] = true;
                }

                if (passwordTwo.equalsIgnoreCase("Confirm Password") || passwordOne.equalsIgnoreCase("")) {
                    errorCount[7] = true;
                }

                // Check to See if Multiple Information Fields House Missing or Incorrect Information. Boolean Permutation If Statement.
                if ((errorCount[0] == true && errorCount[1] == true) || (errorCount[0] == true && errorCount[2] == true) || (errorCount[0] == true && errorCount[3] == true) ||
                    (errorCount[0] == true && errorCount[4] == true) || (errorCount[0] == true && errorCount[5] == true) || (errorCount[0] == true && errorCount[6] == true) ||
                    (errorCount[0] == true && errorCount[7] == true) || (errorCount[1] == true && errorCount[2] == true) || (errorCount[1] == true && errorCount[3] == true) ||   
                    (errorCount[1] == true && errorCount[4] == true) || (errorCount[1] == true && errorCount[5] == true) || (errorCount[1] == true && errorCount[6] == true) ||   
                    (errorCount[1] == true && errorCount[7] == true) || (errorCount[2] == true && errorCount[3] == true) || (errorCount[2] == true && errorCount[4] == true) ||
                    (errorCount[2] == true && errorCount[5] == true) || (errorCount[2] == true && errorCount[6] == true) || (errorCount[2] == true && errorCount[7] == true) ||
                    (errorCount[3] == true && errorCount[4] == true) || (errorCount[3] == true && errorCount[5] == true) || (errorCount[3] == true && errorCount[6] == true) ||
                    (errorCount[3] == true && errorCount[7] == true) || (errorCount[4] == true && errorCount[5] == true) || (errorCount[4] == true && errorCount[6] == true) ||
                    (errorCount[4] == true && errorCount[7] == true) || (errorCount[5] == true && errorCount[6] == true) || (errorCount[5] == true && errorCount[7] == true) ||
                    (errorCount[6] == true && errorCount[7] == true)) {


                    WarningMessageACMultipleFields warn = new WarningMessageACMultipleFields();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();

                }
                else if (errorCount[0] == true) {
                    WarningMessageACStudentID warn = new WarningMessageACStudentID();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[1] == true) {
                    WarningMessageACFirstName warn = new WarningMessageACFirstName();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[2] == true) {
                    WarningMessageACLastName warn = new WarningMessageACLastName();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[3] == true) {
                    WarningMessageACEmail warn = new WarningMessageACEmail();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[4] == true) {
                    WarningMessageACUsername warn = new WarningMessageACUsername();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[5] == true) {
                    WarningMessageACConfirmUsername warn = new WarningMessageACConfirmUsername();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[6] == true) {
                    WarningMessageACPassword warn = new WarningMessageACPassword();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
                else if (errorCount[7] == true) {
                    WarningMessageACConfirmPassword warn = new WarningMessageACConfirmPassword();
                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();
                }
            }
            else {

                try {
                    String tempString = jTextField6.getText();
                    int tempNum = Integer.parseInt(tempString);

                    if (tempNum < 2000000 || tempNum > 10000000) {
                        WarningMessageACStudentIDInvalid warn = new WarningMessageACStudentIDInvalid();
                        WarningMessageACStudentIDInvalid.jLabel9.setText("Number Within the Specified ");
                        WarningMessageACStudentIDInvalid.jLabel10.setText("Range: (2,000,000 - 10,000,000).");

                        hideLoaderImage();
                        warn.setVisible(true);

                        disableComponents();

                        cont = false;
                    }
                }
                catch (NullPointerException e) {
                    System.out.println("Null Pointer Exception Student Account Creation Line: " + Thread.currentThread().getStackTrace()[1].getLineNumber() + "): " + e);
                }
                catch (NumberFormatException nfe) {
                    System.out.println("Number Format Exception Student Account Creation Line: " + Thread.currentThread().getStackTrace()[1].getLineNumber() + "): " + nfe);

                    WarningMessageACStudentIDInvalid warn = new WarningMessageACStudentIDInvalid();

                    hideLoaderImage();
                    warn.setVisible(true);

                    disableComponents();

                    cont = false;
                }

                if (cont == true) {

                    resetBooleanArrayValues();

                    resultErrorValue = jTextField1.getText();

                    // Check For Special Characters, Numbers, or A Blank Answer in the First Name Field.
                    if ((resultErrorValue.isBlank() == true) || (checker.checkForOnlyNumbersInString(resultErrorValue) == true) || (checker.checkForSpecialCharactersInString(resultErrorValue) == true)) {
                        if (resultErrorValue.isBlank() == true) {
                            FirstNameField[0] = true;
                        }
                        if (checker.checkForOnlyNumbersInString(resultErrorValue) == true) {
                            FirstNameField[1] = true;
                        }
                        if (checker.checkForSpecialCharactersInString(resultErrorValue) == true) {
                            FirstNameField[2] = true;
                        }
                    }

                    resultErrorValue = jTextField2.getText();

                    // Check For Special Characters, Numbers, or A Blank Answer in the Last Name Field.
                    if (((resultErrorValue.isBlank() == true) || (checker.checkForOnlyNumbersInString(resultErrorValue) == true) || (checker.checkForSpecialCharactersInString(resultErrorValue) == true))) {
                        if (resultErrorValue.isBlank() == true) {
                            LastNameField[0] = true;
                        }
                        if (checker.checkForOnlyNumbersInString(resultErrorValue) == true) {
                            LastNameField[1] = true;
                        }
                        if (checker.checkForSpecialCharactersInString(resultErrorValue) == true) {
                            LastNameField[2] = true;
                        }
                    }

                    resultErrorValue = jTextField3.getText();

                    // Check For Special Characters, Numbers, or A Blank Answer in the Email Address Field.
                    if (((resultErrorValue.isBlank() == true) || (checker.checkForSpecialCharactersInStringEmail(resultErrorValue) == true))) {
                        if (resultErrorValue.isBlank() == true) {
                            EmailField[0] = true;
                        }
                        if (checker.checkForSpecialCharactersInStringEmail(resultErrorValue) == true) {
                            EmailField[1] = true;
                        }
                    }

                    resultErrorValue = jTextField4.getText();

                    // Check For Special Characters, Numbers, or A Blank Answer in the Username Field.
                    if (((resultErrorValue.isBlank() == true) || (checker.checkForSpecialCharactersInString(resultErrorValue) == true))) {
                        if (resultErrorValue.isBlank() == true) {
                            UsernameField[0] = true;
                        }
                        if (checker.checkForSpecialCharactersInString(resultErrorValue) == true) {
                            UsernameField[1] = true;
                        }
                    }

                    resultErrorValue = jTextField5.getText();

                    // Check For Special Characters, Numbers, or A Blank Answer in the Confirm Username Field.
                    if (((resultErrorValue.isBlank() == true) || (checker.checkForSpecialCharactersInString(resultErrorValue) == true))) {
                        if (resultErrorValue.isBlank() == true) {
                            ConfirmUsernameField[0] = true;
                        }
                        if (checker.checkForSpecialCharactersInString(resultErrorValue) == true) {
                            ConfirmUsernameField[1] = true;
                        }
                    }

                    String passOne = new String(jPasswordField1.getPassword());

                    // Check For Special Characters, Numbers, or A Blank Answer in the Password Field.
                    if (((passOne.isBlank() == true) || (checker.checkForSpecialCharactersInString(passOne) == true))) {
                        if (passOne.isBlank() == true) {
                            PasswordField[0] = true;
                        }
                        if (checker.checkForSpecialCharactersInString(passOne) == true) {
                            PasswordField[1] = true;
                        }
                    }

                    String passTwo = new String(jPasswordField2.getPassword());

                    // Check For Special Characters, Numbers, or A Blank Answer in the Password Field.
                    if (((passTwo.isBlank() == true) || (checker.checkForSpecialCharactersInString(passTwo) == true))) {
                        if (passTwo.isBlank() == true) {
                            ConfirmPasswordField[0] = true;
                        }
                        if (checker.checkForSpecialCharactersInString(passTwo) == true) {
                            ConfirmPasswordField[1] = true;
                        }
                    }
                }

                resultErrorValue = checker.determineErrorStatus(FirstNameField,LastNameField,EmailField,UsernameField,ConfirmUsernameField,PasswordField,ConfirmPasswordField);
                value = setResults(resultErrorValue);

                if (value == true) {
                    cont = false;
                }

                // Start Checking Length Requirements On Each of the
                // User's Responses in the Account Creation Student Class
                if (cont == true) {
                    // Convert the Value contained within the Password
                    // Field into a Accessible String.
                    String passOne = new String(jPasswordField1.getPassword());
                    // Convert the Value contained within the Password
                    // Field into a Accessible String.
                    String passTwo = new String(jPasswordField2.getPassword());
                    counter = 0;

                    if (jTextField3.getText().length() < 10) {
                        counter++;
                    }

                    if (jTextField4.getText().length() < 7) {
                        counter++;
                    }

                    if (jTextField5.getText().length() < 7) {
                        counter++;
                    }

                    if (passOne.length() < 11) {
                        counter++;
                    }

                    if (passTwo.length() < 11) {
                        counter++;
                    }

                    if (counter > 1) {
                        WarningMessageACInvalidLength length = new WarningMessageACInvalidLength();
                        length.jLabel8.setText("Don't Meet The Character");
                        length.jLabel7.setText("in Multiple Information Fields");

                        cont = false;
                        disableComponents();

                        hideLoaderImage();
                        length.setVisible(true);
                    }
                    else if (counter == 1) {
                        if (jTextField3.getText().length() < 10) {

                            WarningMessageACInvalidLength length = new WarningMessageACInvalidLength();
                            length.jLabel8.setText("Doesn't Meet The Ten Character");
                            length.jLabel7.setText("in the Email Address Information Field");

                            cont = false;
                            disableComponents();

                            hideLoaderImage();
                            length.setVisible(true);
                        }
                        else if (jTextField4.getText().length() < 7 || jTextField5.getText().length() < 7) {
                            if (jTextField4.getText().length() < 7 || jTextField5.getText().length() < 7) {
                                WarningMessageACInvalidLength length = new WarningMessageACInvalidLength();
                                length.jLabel8.setText("Doesn't Meet The Seven Character");

                                if (jTextField4.getText().length() < 7 && jTextField5.getText().length() < 7) {
                                    length.jLabel7.setText("in the Username Information Fields");
                                }
                                else if (jTextField4.getText().length() < 7) {
                                    length.jLabel7.setText("in the Username Information Field");
                                }
                                else if (jTextField5.getText().length() < 7) {
                                    length.jLabel7.setText("in the Confirm Username Field");
                                }

                                cont = false;
                                disableComponents();

                                hideLoaderImage();
                                length.setVisible(true);
                            }
                        }
                        else if (passOne.length() < 11 || passTwo.length() < 11) {
                            if (passOne.length() < 11 || passTwo.length() < 11) {
                                WarningMessageACInvalidLength length = new WarningMessageACInvalidLength();
                                length.jLabel8.setText("Doesn't Meet The Eleven Character");

                                if (passOne.length() < 11 && passTwo.length() < 11) {
                                    length.jLabel7.setText("in the Password Information Fields");
                                }
                                else if (passOne.length() < 11) {
                                    length.jLabel7.setText("in the Password Information Field");
                                }
                                else if (passTwo.length() < 11) {
                                    length.jLabel7.setText("in the Confirm Password Field");
                                }

                                cont = false;
                                disableComponents();

                                hideLoaderImage();
                                length.setVisible(true);
                            }
                        }
                    }
                    else {
                        if (!jTextField3.getText().contains("@")) {
                            WarningMessageACInvalidEmail warn = new WarningMessageACInvalidEmail();

                            cont = false;
                            disableComponents();

                            hideLoaderImage();
                            warn.setVisible(true);
                        }
                        else if (!jTextField4.getText().equalsIgnoreCase(jTextField5.getText())) {
                            WarningMessageACNonEqualUsername equal = new WarningMessageACNonEqualUsername();

                            cont = false;
                            disableComponents();

                            hideLoaderImage();
                            equal.setVisible(true);
                        }
                        else if (!passOne.equalsIgnoreCase(passTwo)) {
                            WarningMessageACNonEqualPassword equal = new WarningMessageACNonEqualPassword();

                            cont = false;
                            disableComponents();

                            hideLoaderImage();
                            equal.setVisible(true);
                        }
                    }
                }

                // Final Round of Error Checking.
                if (cont == true) {
                    String passOne = new String(jPasswordField1.getPassword());

                    // Check to Ensure That the Username & Password Fields Don't Contain
                    // The Same Values in Order to Enhance Security.
                    if (jTextField4.getText().equalsIgnoreCase(passOne)) {
                        WarningMessageACInvalidEmail warn = new WarningMessageACInvalidEmail();

                        cont = false;
                        disableComponents();

                        hideLoaderImage();
                        warn.setVisible(true);
                    }
                    if (checker.checkAmountOfNumbersInString(passOne) < 3 && cont == true) {
                        WarningMessageACPasswordNotEnoughNumbers warn = new WarningMessageACPasswordNotEnoughNumbers();

                        cont = false;
                        disableComponents();

                        hideLoaderImage();
                        warn.setVisible(true);
                    }
                    if (cont == true) {

                        String tempString = jTextField6.getText();
                        int tempNum = Integer.parseInt(tempString);

                        DatabaseOperationResult resOne = data.checkUsernameAvalability(jTextField4.getText());
                        DatabaseOperationResult resTwo = data.checkStudentIDAvalability(tempNum);
                        
                        if (resOne.getResult() == false) {
                            WarningMessageACSelectedUsernameInUse warn = new WarningMessageACSelectedUsernameInUse();
                            warn.jLabel11.setText(jTextField4.getText());

                            disableComponents();

                            hideLoaderImage();
                            warn.setVisible(true);
                        }
                        else if (resTwo.getResult() == false) {
                            WarningMessageACSelectedStudentIDInUse warn = new WarningMessageACSelectedStudentIDInUse();
                            warn.jLabel11.setText(jTextField6.getText());

                            disableComponents();

                            hideLoaderImage();
                            warn.setVisible(true);
                        }
                        else {
                            String displayName = "" + jTextField1.getText() + " " +  jTextField2.getText();
                            Student student = new Student(0, tempNum, jTextField1.getText(), jTextField2.getText(), jTextField3.getText(),
                                    jTextField4.getText(), passOne, displayName,
                                    "", "", "", "/mothershipattendance/Image/ProfilePictures/Large/ProfilePicture20.png",
                                    "/mothershipattendance/Image/ProfilePictures/Scaled/ProfilePicture20Scaled.png",
                                    "/mothershipattendance/Image/ProfilePictures/Small/ProfilePicture20Small.png", 
                                    "/mothershipattendance/Image/ProfilePictures/XSChatIcons/ProfilePictureXS20.png");

                            AccountCreationResults result = data.insertStudent(student);

                            if (result.getResult() == false) {
                                AccountCreationFailed fail = new AccountCreationFailed();

                                hideLoaderImage();
                                fail.setVisible(true);
                            }
                            else {
                                AccountCreationSuccessful create = new AccountCreationSuccessful();

                                hideLoaderImage();
                                create.setVisible(true);

                                student.setRowID(result.getID());
                                tracker.setCurrentStudentInformation(student);

                                dispose();
                            }
                        }
                    }
                }
            }
            
            return null;
        }
        
        // This method is automatically invoked after the
        // doInBackground() method has finished
        // executing.
        @Override
        protected void done() {
            // Make the GuiFour Frame
            // invisible.
            //setVisible(false);
            //dispose();
        }
    }
}
