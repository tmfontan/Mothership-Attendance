/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mothershipattendance;

import java.awt.Point;
import javax.swing.SwingWorker;
import java.awt.*;

/**
 *  This Class is Responsible for Creating The
 *  Title GUI Screen for the Application. The Created
 *  GUI Form cycles through a Series of Images Contained
 *  In a Single GIF Image File While a Progression Bar
 *  is Shown. Background Objects and Variables are Initialized
 *  while the Progress Bar is loading so that they will be
 *  ready to use once the User reaches the Next GUI Screen.
 * 
 *  @author     Tyler Fontana
 *  @date       November 3 2020
 *  @version    1.0.2
 */
public class TitleScreen extends javax.swing.JFrame {

    /**
     *  A Basic Constructor Method Used to
     *  invoke the GUI Form Creation Method
     *  in addition to Initializing and
     *  Executing a Background SwingWorker
     *  Thread. The SwingWorker Thread is
     *  responsible for Invoking the Iteration
     *  to the Next GUI Window in the Application's
     *  Sequence.
     */
    public TitleScreen() {
        /**
         * Create and Execute A Background SwingWorker
         * Thread which is used to Monitor the Progress
         * of the Progression Bar.
         **/
        taskHandler.execute();
        /**
         * Invoke the Method Used to Create and
         * Display the TitleScreen GUI Window Form.
         **/
        initComponents();
    }

    /**
     *  This method is called from within the constructor to initialize the form.
     *  WARNING: Do NOT modify this code. The content of this method is always
     *  regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mothership Attendance (Desktop Edition)");
        setSize(900,718);
        setLocationRelativeTo(null);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMaximumSize(new java.awt.Dimension(900, 656));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 656));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 656));
        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        jPanel2.setMaximumSize(new java.awt.Dimension(900, 656));
        jPanel2.setMinimumSize(new java.awt.Dimension(900, 656));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new javax.swing.OverlayLayout(jPanel2));

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setMaximumSize(new java.awt.Dimension(900, 656));
        jPanel7.setMinimumSize(new java.awt.Dimension(900, 656));
        jPanel7.setOpaque(false);
        jPanel7.setPreferredSize(new java.awt.Dimension(900, 656));

        jLayeredPane1.setPreferredSize(new java.awt.Dimension(910, 666));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/MotherShipAttendance.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/ezgif.com-resize.gif"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/loader.png"))); // NOI18N

        jPanel4.setMaximumSize(new java.awt.Dimension(900, 656));
        jPanel4.setMinimumSize(new java.awt.Dimension(900, 656));
        jPanel4.setPreferredSize(new java.awt.Dimension(900, 656));
        jPanel4.setLayout(new java.awt.CardLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mothershipattendance/Image/backdrop.gif"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setMaximumSize(new java.awt.Dimension(900, 656));
        jLabel2.setMinimumSize(null);
        jLabel2.setOpaque(true);
        jPanel4.add(jLabel2, "card6");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jLabel6.setText("");
        jLabel6.setSize(new java.awt.Dimension(800, 30));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel6.setVerticalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jProgressBar1.setBackground(new java.awt.Color(255, 51, 51));
        jProgressBar1.setForeground(new java.awt.Color(255, 51, 102));
        jProgressBar1.setMaximumSize(new java.awt.Dimension(765, 20));
        jProgressBar1.setMinimumSize(new java.awt.Dimension(765, 20));
        jProgressBar1.setName("0%"); // NOI18N
        jProgressBar1.setOpaque(true);
        jProgressBar1.setSize(18, 650);
        jProgressBar1.setValue(0);
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(100);
        jProgressBar1.setString("0%");
        jProgressBar1.setVisible(true);
        jProgressBar1.setPreferredSize(new java.awt.Dimension(765, 20));
        jPanel3.setOpaque(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(0, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(21, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(350, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(43, 43, 43)))
        );

        jButton1.setBackground(new java.awt.Color(0, 153, 255));
        jButton1.setFont(new java.awt.Font("Trajan Pro 3", 0, 26)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Continue");
        jButton1.setVisible(false);

        jLayeredPane1.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.PALETTE_LAYER);
        jLayeredPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DRAG_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.PALETTE_LAYER);
        jLayeredPane1.setLayer(jPanel3, javax.swing.JLayeredPane.DRAG_LAYER);
        jLayeredPane1.setLayer(jLabel6, javax.swing.JLayeredPane.DRAG_LAYER);
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DRAG_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(jLabel1)
                .addContainerGap(190, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(116, 116, 116)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(297, 297, 297)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(183, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(41, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(41, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(336, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(335, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel1)
                .addContainerGap(175, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(553, 553, 553)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(458, 458, 458)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(123, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(595, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(34, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(561, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(39, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 656, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel7);

        jPanel1.add(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TitleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TitleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TitleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TitleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TitleScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify 
    private javax.swing.JButton jButton1;                    
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration
    
    // Create Reference to Synchronized Window Tracker Overhead Class.
    public static WindowLocationTracker windowTracker = new WindowLocationTracker();
    // Create Global Instance of the Inner SwingWorker Thread Class.
    private TaskHandler taskHandler = new TaskHandler();
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    private class TaskHandler extends SwingWorker<Void,Void> {
        /**
         * Method for Separate EventQueue Thread
         * to Execute.
         **/
        @Override
        protected Void doInBackground() throws Exception {

            /**
             * Get a Reference to the Current Thread
             * so that we can Invoke the Sleep Method.
             * We cannot do this using the Global TaskHandler
             * SwingWorker thread Reference Seeing as the
             * SwingWorker Class Object is Unable to Invoke
             * the Sleep() or Wait() Methods.
            **/
            Thread thread = Thread.currentThread();
            
            /**
             * Create a Boolean Value which will be
             * used to End the While Loop Once the
             * Progress Bar has reached its maximum
             * Value.
            **/
            boolean endLoop = false;
            /**
             * Create a Variable to Hold the Progress
             * Level of the Loader Bar.
            **/
            int progress = 0;
            
            try {
                /**
                 * Cause the SwingWorker Thread to
                 * Sleep for a Period of Six Seconds
                 **/
                thread.sleep(6000);
                
                /** 
                 * Continously Loop Until the Progress 
                 * Bar is Completely Filled.
                 **/
                while (endLoop == false) {
                    /**
                     * Increment the Progress Integer
                     * Value on each Iteration.
                    **/
                    progress++;
                    
                    /**
                     * Set the Progress Bar Component Value.
                     * This Value is a Number 1 - 100 that
                     * will determine what Percentege of the
                     * Loading Bar is Shown as Filled.
                    **/
                    jProgressBar1.setValue(progress);
                    /**
                     * Add a Percentage Sign to the Progress
                     * Number Currently Shown and Display it
                     * in the Middle of the Progress Bar.
                    **/
                    jProgressBar1.setString(progress + "%");
                    
                    // If the Progress Counter Variable is the Value of 6.
                    if (progress == 6) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Initializing...");
                    }
                    // If the Progress Counter Variable is the Value of 11.
                    else if (progress == 11) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Starting Application Sweep...");
                    }
                    // If the Progress Counter Variable is the Value of 14.
                    else if (progress == 14) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Begin Authentication Process...");
                    }
                    // If the Progress Counter Variable is the Value of 22.
                    else if (progress == 22) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Validating IP Address...");
                    }
                    // If the Progress Counter Variable is the Value of 24.
                    else if (progress == 24) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("IP Address Validation Complete...");
                    }
                    // If the Progress Counter Variable is the Value of 27.
                    else if (progress == 27) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Checking Port Number Avaliability...");
                    }
                    // If the Progress Counter Variable is the Value of 30.
                    else if (progress == 30) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Avaliable Port Number Scan Complete...");
                    }
                    // If the Progress Counter Variable is the Value of 35.
                    else if (progress == 35) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Validating Swing Application Integrity...");
                    }
                    // If the Progress Counter Variable is the Value of 39.
                    else if (progress == 39) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Fetching Component Data...");
                    }
                    // If the Progress Counter Variable is the Value of 41.
                    else if (progress == 41) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Validating Component Integrity...");
                    }
                    // If the Progress Counter Variable is the Value of 43.
                    else if (progress == 43) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Component Integrity Validation Complete...");
                    }
                    // If the Progress Counter Variable is the Value of 46.
                    else if (progress == 46) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Validating SwingWorker EventQueue Thread...");
                    }
                    // If the Progress Counter Variable is the Value of 48.
                    else if (progress == 48) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Validation Complete...");
                    }
                    // If the Progress Counter Variable is the Value of 50.
                    else if (progress == 50) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Fetching Miscellaneous Data...");
                    }
                    // If the Progress Counter Variable is the Value of 57.
                    else if (progress == 57) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Data Retrieval Successful...");
                    }
                    // If the Progress Counter Variable is the Value of 59.
                    else if (progress == 59) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Validating Java Application Class Integrity...");
                    }
                    // If the Progress Counter Variable is the Value of 61.
                    else if (progress == 61) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Ensuring Client Class Integrity...");
                    }
                    // If the Progress Counter Variable is the Value of 65.
                    else if (progress == 65) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Fetching Miscellaneous Data...");
                    }
                    // If the Progress Counter Variable is the Value of 68.
                    else if (progress == 68) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Data Retrieval Successful...");
                    }
                    // If the Progress Counter Variable is the Value of 72.
                    else if (progress == 72) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Client Class Integrity Verified...");
                    }
                    // If the Progress Counter Variable is the Value of 74.
                    else if (progress == 74) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Ensuring Possible Client Connectivity...");
                    }
                    // If the Progress Counter Variable is the Value of 77.
                    else if (progress == 77) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Client Connectivity Check Complete...");
                    }
                    // If the Progress Counter Variable is the Value of 79.
                    else if (progress == 79) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Ensuring Server Class Integrity...");
                    }
                    // If the Progress Counter Variable is the Value of 81.
                    else if (progress == 81) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Fetching Miscellaneous Server Data...");
                    }
                    // If the Progress Counter Variable is the Value of 85.
                    else if (progress == 85) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Data Retrieval Successful...");
                    }
                    // If the Progress Counter Variable is the Value of 87.
                    else if (progress == 87) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Ensuring Server Class Connectivity...");
                    }
                    // If the Progress Counter Variable is the Value of 89.
                    else if (progress == 89) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Server Class Connectivity Check Complete...");
                    }
                    // If the Progress Counter Variable is the Value of 90.
                    else if (progress == 90) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Done...");
                    }
                    // If the Progress Counter Variable is the Value of 94.
                    else if (progress == 94) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Loading Application...");
                    }
                    // If the Progress Counter Variable is the Value of 97.
                    else if (progress == 97) {
                        // Set JLabel Status Message as Custom String value.
                        jLabel6.setText("Beginning Mothership Attendance Application...");
                    }
                    
                    /**
                     *  If the Progress Integer Value is Anyone of the Number Values
                     *  Listed Below, then cause the TaskHandler thread to Sleep for a
                     *  Period of 900 Milliseconds.
                     */
                    if (progress == 14 || progress == 22 || progress == 27 || progress == 35 ||
                        progress == 41 || progress == 46 || progress == 50 || progress == 59 || 
                        progress == 65 || progress == 72 || progress == 77 || progress == 81 || 
                        progress == 89 || progress == 94) {
                        // Make the TasHandler Thread Sleep
                        thread.sleep(900);
                    }
                    /**
                     *  If the Progress Integer Value is Anyone of the Number Values
                     *  Listed Below, then cause the TaskHandler thread to Sleep for a
                     *  Period of 1200 Milliseconds (or 1.2 Seconds).
                     */
                    else if (progress == 6 || progress == 11 || progress == 24 || progress == 30 ||
                             progress == 39 || progress == 43 || progress == 48 || progress == 57 ||
                             progress == 61 || progress == 68 || progress == 74 || progress == 79 ||
                             progress == 85 || progress == 87 || progress == 90 || progress == 97) {
                        // Make TaskHandler Thread Sleep.
                        thread.sleep(1200);
                    }
                    /**
                     *  If the Progress Integer Value has Reached 100 Percent,
                     *  then Save the Current Location of the Window, Cause the
                     *  TaskHandler Thread to Sleep for 1.5 Seconds More, and
                     *  Transition over to the Directory Screen.
                     */
                    else if (progress == 100) {
                        // Make the TasHandler Thread Sleep
                        thread.sleep(1500);
                        /**
                         * Set the Current Window Location
                         * So that we can Spawn the New
                         * Directory Screen GUI Window in
                         * the Exact same Position.
                         */
                        setWindowLocation();
                        
                        // Create New Instance of the Directory Screen GUI Form
                        DirectoryScreen directoryScreen = new DirectoryScreen();
                        // Show the New Instance on Screen
                        directoryScreen.setVisible(true);
                        /**
                         * Hide the Title 
                         * Screen Instance.
                         */
                        setVisible(false);
                    }
                }
            }
            /**
             *  Catch A Thread Interruption Exception
             *  Should it Occur.
             */
            catch (InterruptedException ie) {
                // Print out the Error Details
                System.out.println("Interrupted Exception: " + ie);
            }

            /**
             * We will always Return a Null
             * Value for any SwingWorker Thread.
             */
            return null;
        }
        
        /**
         * This Method is Used to Retrieve the Current
         * Location of the Window Depending on its Dimensional
         * Size. It will then save this Value to a Synchronized
         * Variable in an Overhead Class.
         */
        private void setWindowLocation() {
            // Get the Dimensions of the Current Machine's Screen
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            // Save the Height of the Screen.
            int screenHeight = screenSize.height;
            // Save the Width of the Screen.
            int screenWidth = screenSize.width;

            /**
             * If the Window is Currently Outside of the Screen's
             * Visible Area, set the Current Window Location as Null.
             */
            if ((getX() < 0) || (getX() > (screenWidth - 900)) || getY() > (screenHeight - 700)) {
                // Set Synchronized Location Variable.
                windowTracker.setMainWindowLocation(null);
            }
            /**
             * If the Window is Currently Within the Screen's
             * Visible Area, set the Current Window Location of the Window.
             */
            else  {
                // Get the Window's Location
                Point remeberLocation = new Point(getX(), getY());
                // Save the Window's Location
                windowTracker.setMainWindowLocation(remeberLocation);
            }
        }
    }
}
